external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTLevCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass2(string,string,string,string,string,string,string);
external procedure GetAccPeriodComments(Integer,Date,var string,var string,var string,var string,var string,var string,var string);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure HTVends(string, string, var string);
external procedure HTObj(string,var string);
external procedure HTOT(string,var string);
external procedure SumAged(Date,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure PrintAgedLine(val,val,val,val,val,val,val,val,val,val,val,Integer,Integer,string);
external procedure CountPeriods(var Integer);
external procedure GetPDVRebt(string,var val);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);

//VITO: DOL-102
external procedure HT2Per(date,date,var string);
external procedure GetBaseCurncy(Integer,var string);
external function string 10 GetClassificationOfType(string,string,var string);
external procedure GetObjs(string,string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external outer function integer GetInvoicePeriod(date,date,date);

procedure SetReportColumns()
begin
  integer step;

  SetRepCol(2,30);
  SetRepCol(3,110);
  SetRepCol(4,180);
  SetRepCol(5,240);
  SetRepCol(6,300);
  SetRepCol(7,360);
  SetRepCol(8,420);

  return;
end;

procedure PrintColumnHeaders(record RcVc RepSpec,var date sd,var date ed,var date td)
begin

  sd = AddMonth(RepSpec.sStartDate,-2);
  sd.day = 1;
  ed = AddMonth(RepSpec.sStartDate,2);
  ed.day = DaysInMonth(GetYear(ed),GetMonth(ed));

  StartFormat(15);
    OutString(0,0,USetStr(2605),false);//Tiek˜jas (Supplier)
    OutString(2,0,USetStr(2448),false);//Pavadinimas (Name)
    OutString(3,0,USetStr(2514),false);//Valiuta (Currecy)
    OutString(4,0,USetStr(2078),true);//Prieä (Before)
    td = AddMonth(sd,1); td.day = 1;
    OutString(5,0,DateToString(td,"YY.MM.DD"),true);//(Last month)
    td = AddMonth(sd,2); td.day = 1;
    OutString(6,0,DateToString(td,"YY.MM.DD"),true);//(Current month)
    td = AddMonth(sd,3); td.day = 1;
    OutString(7,0,DateToString(td,"YY.MM.DD"),true);//(Next month)
    OutString(8,0,USetStr(2079),true);//Po (After)
    OutString(1,0,USetStr(1182),true);//Liku‹iai (Balance)
  EndFormat;

  StartFormat(15);
    OutString(0,0,"",false);
    OutString(2,0,"",false);
    OutString(3,0,"",false);
    OutString(4,0,"",true);
    td = AddMonth(sd,1); td.day = DaysInMonth(GetYear(td),GetMonth(td));
    OutString(5,0,DateToString(td,"YY.MM.DD"),true);//(Last month)
    td = AddMonth(sd,2); td.day = DaysInMonth(GetYear(td),GetMonth(td));
    OutString(6,0,DateToString(td,"YY.MM.DD"),true);//(Current month)
    td = AddMonth(sd,3); td.day = DaysInMonth(GetYear(td),GetMonth(td));
    OutString(7,0,DateToString(td,"YY.MM.DD"),true);//(Next month)
    OutString(8,0,"",true);
    OutString(1,0,"",true);
  EndFormat;

  StartFormat(3);
  EndFormat;
  Black_Divider(0,1);

  return;
end;

function boolean CheckVendorMatch(string vecode,record RcVc RepSpec)
begin
  record CUVc VEr;
  string 10 class;
  string 255 classname;
  boolean res;
  
  res = true;
  
  if (nonblank(RepSpec.f2) or nonblank(RepSpec.f4) or nonblank(RepSpec.f5) or nonblank(RepSpec.f7)) then begin
    VEr.Code = vecode;
    if ReadFirstMain(VEr,1,true) then begin
      if (nonblank(RepSpec.f4) and !SetInSet(RepSpec.f4,VEr.Classification)) then begin
        res = false;
      end;
      if (res and nonblank(RepSpec.f5)) then begin
        class = "";
        class = GetClassificationOfType(VEr.Classification,RepSpec.f5,classname);
        if (class == "") then begin
          res = false;
        end;
      end;
      if (res and nonblank(RepSpec.f7) and RepSpec.f7 != VEr.VECat) then begin
        res = false;
      end;
    end;
  end;
  
  CheckVendorMatch = res;

  return;
end;

procedure GetInvoiceSumInVendCur(record VIVc VIr,val unpaidsum,var val res,var string vendcur,string basecur)
begin
  record CUVc VEr;

  vendcur = basecur;
  
  VEr.Code = VIr.VECode;  
  if (ReadFirstMain(VEr,1,true)) then begin
    if (nonblank(VEr.VECurncyCode)) then begin
      vendcur = VEr.VECurncyCode;
    end;
  end;
  
  if (vendcur == VIr.CurncyCode) then begin
    res = unpaidsum;
    goto LGetInvoiceSumInVendCur;
  end;
  
  if (vendcur == basecur) then begin
    res = MulRateToBase1(VIr.CurncyCode,unpaidsum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
  end;
  
  res = blankval;
  CurValToOtherCur(VIr.TransDate,VIr.CurncyCode,unpaidsum,vendcur,res,DefaultCurRoundOff);
  
LGetInvoiceSumInVendCur:;

  return;
end;

procedure GetReceiptSumInVendCur(date TransDate,string vendcode,val sum,string curcode,var val res,
                                              var string vendname,var string vendcur,string basecur)
begin
  record CUVc VEr;

  vendcur = basecur;
  vendname = "";
  
  VEr.Code = vendcode;  
  if (ReadFirstMain(VEr,1,true)) then begin
    if (nonblank(VEr.VECurncyCode)) then begin
      vendcur = VEr.VECurncyCode;
      vendname = VEr.Name;
    end;
  end;
  
  if (vendcur == curcode) then begin
    res = sum;
  end else begin
    res = blankval;
    CurValToOtherCur(TransDate,curcode,sum,vendcur,res,DefaultCurRoundOff);
  end;
  
  return;
end;

procedure AddCustData(string vendcode,string vendname,string vendcur,val t,integer period,
var integer cnt,var array string a_CustCodes,var vector string v_CustData,var vector val v_CustVals,
                                                                    var vector boolean v_CustAddedf)
begin

  if (!v_CustAddedf[vendcode]) then begin
    v_CustData[vendcode & ":NAME"] = vendname;
    v_CustData[vendcode & ":CUR"] = vendcur;
    a_CustCodes[cnt] = vendcode;
    cnt = cnt + 1;
    v_CustAddedf[vendcode] = true;
    v_CustVals[vendcode & ":" & period] = t;
  end else begin
    v_CustVals[vendcode & ":" & period] = v_CustVals[vendcode & ":" & period] + t; 
  end;

  return;
end;

// EVS: DOL-146
function val GetUnusedPrepaymentValue(longint prepaynr, string vecode)
begin
  record OPPVc OPPr;
  val res;
  
  OPPr.VECode = vecode;
  OPPr.SerNr = prepaynr;
  if (ReadLastMain(OPPr,2,true)) then begin
    res = OPPr.PPVal;
  end;
  
  GetUnusedPrepaymentValue = res;
return;
end;
// :EVS

procedure LoadOPVcData(Record RcVc RepSpec,date sd,date ed,string basecur,var integer cnt,
              var array string a_CustCodes,var vector string v_CustData,var vector val v_CustVals,
                                                                    var vector boolean v_CustAddedf)
begin
  record OPVc OPr;
  row OPVc OPrw;
  integer i,rwcnt;
  boolean TrHs,testf,rowtestf;
  string 255 vendname,vendcur,objs;
  val t,rs;

  OPr.TransDate = sd;
  TrHs = true;
  while LoopKey("TransDate",OPr,1,TrHs) begin
    if (TrHs) then begin
      if (OPr.TransDate > ed) then begin
        TrHs = false;
      end;
    end;

    if (TrHs) then begin
      testf = true;
      if (OPr.DoneFlag == 0 and RepSpec.flags[3] == 0) then begin
        testf = false;
      end;

      if (testf) then begin
        rwcnt = MatRowCnt(OPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OPr,i,OPrw);
          rowtestf = true;
          rowtestf = CheckVendorMatch(OPrw.VECode,RepSpec);
          if (rowtestf and OPrw.VISerNr != -1) then begin
            rowtestf = false;
          end;
          if (rowtestf and OPrw.PrepayNr == -1) then begin
            rowtestf = false;
          end;
          if (rowtestf and nonblank(RepSpec.f2) and OPrw.VECode != RepSpec.f2) then begin
            rowtestf = false;
          end;
          if (rowtestf and nonblank(RepSpec.ObjStr) and !SetInSet(RepSpec.ObjStr,OPrw.Objects)) then begin
            rowtestf = false;
          end;
          if (rowtestf and nonblank(RepSpec.ObjType)) then begin
            objs = "";
            GetObjs(RepSpec.ObjType,OPrw.Objects,objs);
            if (objs == "") then begin
              rowtestf = false;
            end;
          end;
          // EVS: DOL-146
          if (rowtestf and OPrw.PrepayNr != -1) then begin
            rs = GetUnusedPrepaymentValue(OPrw.PrepayNr,OPrw.VECode);
            if (rs <= 0) then begin
              rowtestf = false;
            end;
          end;
          // :EVS
          if (rowtestf) then begin
            GetReceiptSumInVendCur(OPr.TransDate,OPrw.VECode,-OPrw.RecVal,OPrw.RecCurncy,t,vendname,vendcur,basecur);
            AddCustData(OPrw.VECode,OPRw.Comment,vendcur,t,GetInvoicePeriod(OPr.TransDate,sd,ed),
                                                cnt,a_CustCodes,v_CustData,v_CustVals,v_CustAddedf);
          end;
        end;
      end;
    end;
  end;  

 return;
end;

procedure LoadVIVcData(Record RcVc RepSpec,date sd,date ed,string basecur,var integer cnt,
              var array string a_CustCodes,var vector string v_CustData,var vector val v_CustVals,
                                                                    var vector boolean v_CustAddedf)
begin
  record VIVc VIr;
  record APVc APr;
  row IVVc IVrw;
  boolean TrHs,testf;
  val t,unpaid;
  string 20 vendcur;
  string 255 objs;

  //1. normal OKed invoice 
  VIr.OKFlag = 1;
  VIr.DueDate = sd;
  TrHs = true;
  while LoopKey("OKFlagDueDate",VIr,2,TrHs) begin
    if (TrHs) then begin
      if (VIr.OKFlag != 1) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      if (VIr.DueDate > ed) then begin
        TrHs = false;
      end;
    end;
    
    if (TrHs) then begin
      testf = CheckVendorMatch(VIr.VECode,RepSpec);
      if (testf and nonblank(RepSpec.f2) and RepSpec.f2 != VIr.VECode) then begin
        testf = false;
      end;
      if (testf and nonblank(RepSpec.ObjStr) and !SetInSet(RepSpec.ObjStr,VIr.Objects)) then begin
        testf = false;
      end;
      if (testf and nonblank(RepSpec.ObjType)) then begin
        objs = "";
        GetObjs(RepSpec.ObjType,VIr.Objects,objs);
        if (objs == "") then begin
          testf = false;
        end;
      end;
      if (testf and VIr.InvType != kInvoiceTypeNormal) then begin
        testf = false;
      end;
      if (testf) then begin
        APr.SerNr = VIr.SerNr;
        if (!ReadFirstMain(APr,1,true)) then begin
          testf = false;
        end;
        unpaid = APr.RVal;
      end;

      if (testf) then begin
        GetInvoiceSumInVendCur(VIr,unpaid,t,vendcur,basecur);
        AddCustData(VIr.VECode,VIr.VEName,vendcur,t,GetInvoicePeriod(VIr.DueDate,sd,ed),
                                                cnt,a_CustCodes,v_CustData,v_CustVals,v_CustAddedf);
      end;
    end;
  end;

  //2. normal unOKed invoices 
  VIr.OKFlag = 0;
  VIr.DueDate = sd;
  ResetLoop(VIr);
  TrHs = (RepSpec.flags[3] == 1);
  while LoopKey("OKFlagDueDate",VIr,2,TrHs) begin
    if (TrHs) then begin
      if (VIr.OKFlag != 0) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      if (VIr.DueDate > ed) then begin
        TrHs = false;
      end;
    end;

    if (TrHs) then begin
      testf = CheckVendorMatch(VIr.VECode,RepSpec);
      if (testf and nonblank(RepSpec.f2) and RepSpec.f2 != VIr.VECode) then begin
        testf = false;
      end;
      if (testf and nonblank(RepSpec.ObjStr) and !SetInSet(RepSpec.ObjStr,VIr.Objects)) then begin
        testf = false;
      end;
      if (testf and nonblank(RepSpec.ObjType)) then begin
        objs = "";
        GetObjs(RepSpec.ObjType,VIr.Objects,objs);
        if (objs == "") then begin
          testf = false;
        end;
      end;
      if (testf and VIr.InvType != kInvoiceTypeNormal) then begin
        testf = false;
      end;
      
      if (testf) then begin
        GetInvoiceSumInVendCur(VIr,VIr.PayVal,t,vendcur,basecur);
        AddCustData(VIr.VECode,VIr.VEName,vendcur,t,GetInvoicePeriod(VIr.DueDate,sd,ed),
                                                cnt,a_CustCodes,v_CustData,v_CustVals,v_CustAddedf);
      end;
    end;
  end;

  //3. credit invoices by transdate
  // EVS: DOL-146 credit invoices aka returns should not be included
  VIr.TransDate = sd;
  ResetLoop(VIr);
  TrHs = true;
  while LoopKey("TransDate",VIr,1,TrHs) begin
    if (TrHs) then begin
      if (VIr.TransDate > ed) then begin
        Trhs = false;
      end;
    end;
    
    if (TrHs) then begin
      testf = CheckVendorMatch(VIr.VECode,RepSpec);
      if (testf and nonblank(RepSpec.f2) and RepSpec.f2 != VIr.VECode) then begin
        testf = false;
      end;
      if (testf and nonblank(RepSpec.ObjStr) and !SetInSet(RepSpec.ObjStr,VIr.Objects)) then begin
        testf = false;
      end;
      if (testf and nonblank(RepSpec.ObjType)) then begin
        objs = "";
        GetObjs(RepSpec.ObjType,VIr.Objects,objs);
        if (objs == "") then begin
          testf = false;
        end;
      end;
      if (testf and VIr.InvType != kInvoiceTypeCredit) then begin
        testf = false;
      end;
      if (testf and VIr.OKFlag == 0 and RepSpec.flags[3] == 0) then begin
        testf = false;
      end;
    
      if (testf) then begin
        GetInvoiceSumInVendCur(VIr,-VIr.PayVal,t,vendcur,basecur);
        AddCustData(VIr.VECode,VIr.VEName,vendcur,t,GetInvoicePeriod(VIr.TransDate,sd,ed),
                                                cnt,a_CustCodes,v_CustData,v_CustVals,v_CustAddedf);      
      end;
    end;
  end;  

  return;
end;

procedure PrintVal(integer pos,val valvalue)
begin
  val t;
  
  t = 0;
  if (valvalue != blankval) then begin
    t = valvalue;
  end;
  OutVal(pos,0,t,M4Val,true);

  return;
end;

procedure PrintVector(date sd,string basecur,array string a_CustCodes,vector string v_CustData,
                                                                         vector val v_CustVals)
begin
  array val totals;
  integer i,a;
  val t;

  for (i=0;i<a_CustCodes.length;i=i+1) begin
    StartFormat(15);
      OutString(0,"DblCUVc",a_CustCodes[i],false);
      OutString(2,0,v_CustData[a_CustCodes[i] & ":NAME"],false);
      OutString(3,0,v_CustData[a_CustCodes[i] & ":CUR"],false);
      PrintVal(4,v_CustVals[a_CustCodes[i] & ":1"]);
      PrintVal(5,v_CustVals[a_CustCodes[i] & ":2"]);
      PrintVal(6,v_CustVals[a_CustCodes[i] & ":3"]);
      PrintVal(7,v_CustVals[a_CustCodes[i] & ":4"]);
      PrintVal(8,v_CustVals[a_CustCodes[i] & ":5"]);
      t = 0;
      for (a=1;a<=5;a=a+1) begin
        t = t + v_CustVals[a_CustCodes[i] & ":" & a];
      end;
      PrintVal(1,t);
    EndFormat;
    Gray_divider(1,0);

    for (a=1;a<=5;a=a+1) begin
      if (v_CustData[a_CustCodes[i] & ":CUR"] != basecur) then begin
        totals[a] = totals[a] + MulWithRateToBase1(v_CustData[a_CustCodes[i] & ":CUR"],sd,v_CustVals[a_CustCodes[i] & ":" & a],DefaultCurRoundOff);
      end else begin
        totals[a] = totals[a] + v_CustVals[a_CustCodes[i] & ":" & a];
      end;
    end;
  end;

  Black_divider(1,0);
  StartFormat(15);
    OutString(0,0,"",false);
    OutString(2,0,USetStr(20526) & " (" & basecur & ")",false);//Viso
    OutString(3,0,"",false);
    PrintVal(4,totals[1]);
    PrintVal(5,totals[2]);
    PrintVal(6,totals[3]);
    PrintVal(7,totals[4]);
    PrintVal(8,totals[5]);
    t = 0;
    for (a=1;a<=5;a=a+1) begin
      t = t + totals[a];
    end;
    PrintVal(1,t);
  EndFormat;

  return;
end;

procedure DOL_OPProgRn_ByMonths(record RcVc RepSpec)
begin
  date sd,ed,td;
  string 20 basecur;
  array string 20 a_CustCodes;
  vector string 200 v_CustData;
  vector val v_CustVals;
  vector boolean v_CustAddedf;
  integer cnt;
  
  SetReportColumns;
  PrintColumnHeaders(RepSpec,sd,ed,td);
  GetBaseCurncy(1,basecur);

  cnt = 0;
  LoadVIVcData(RepSpec,sd,ed,basecur,cnt,a_CustCodes,v_CustData,v_CustVals,v_CustAddedf);
  LoadOPVcData(RepSpec,sd,ed,basecur,cnt,a_CustCodes,v_CustData,v_CustVals,v_CustAddedf);

  SortStringArray(a_CustCodes);
  PrintVector(sd,basecur,a_CustCodes,v_CustData,v_CustVals);

  return;
end;
//:VITO

procedure PrintAgedHeader(Date d1,Integer nrofper)
begin
  record AgedBlock AgedRec;
  string 30 tstr1,tstr2,tstr3,tstr4,tstr5,tstr6,tstr7;
  LongInt p1,p2;
  Date agedate;

  BlockLoad(AgedRec);  
  if (AgedRec.UseAccPeriod) then begin
    agedate = d1;
    if (blankdate(agedate)) then begin agedate = CurrentDate; end;
    GetAccPeriodComments(1,agedate,tstr1,tstr2,tstr3,tstr4,tstr5,tstr6,tstr7);
    if (nrofper<=1) then begin
      tstr2 = tstr2 & " - ";
    end;
    if (nrofper<=2) then begin
      tstr3 = tstr3 & " - ";
    end;
    if (nrofper<=3) then begin
      tstr4 = tstr4 & " - ";
    end;
    if (nrofper<=4) then begin
      tstr5 = tstr5 & " - ";
    end;
    if (nrofper<=5) then begin
      tstr6 = tstr6 & " - ";
    end;
    tstr7 = tstr7 & " - ";
  end else begin
    p1 = AgedRec.Per1;
    p2 = AgedRec.Per2;
    if (p1==-1) then begin p1 = 15; end;
    if (p2==-1) then begin p2 = 30; end;
    tstr1 = "0 - " & p1;
    tstr2 = "" & p1+1 & " - " & p2;
    tstr3 = "" & p2+1 & " - "; 
    if (AgedRec.Per3>-1) then begin tstr3 = tstr3 & AgedRec.Per3; end;
    tstr4 = "" & AgedRec.Per3+1 & " - ";
    if (AgedRec.Per4>-1) then begin tstr4 = tstr4 & AgedRec.Per4; end;
    tstr5 = "" & AgedRec.Per4+1 & " - ";
    if (AgedRec.Per5>-1) then begin tstr5 = tstr5 & AgedRec.Per5; end;
    tstr6 = "" & AgedRec.Per5+1 & " - ";
    if (AgedRec.Per6>-1) then begin tstr6 = tstr6 & AgedRec.Per6; end;
    tstr7 = "" & AgedRec.Per6+1 & " - ";
  end;
  StartFormat(15);
  OutStringAdjust(2,0,USetStr(4137),true,M4Val);
  OutStringAdjust(3,0,tstr1,true,M4Val);
  OutStringAdjust(4,0,tstr2,true,M4Val);
  OutStringAdjust(5,0,tstr3,true,M4Val);
  if (nrofper>2) then begin
    OutStringAdjust(6,0,tstr4,true,M4Val);
  end;
  if (nrofper>3) then begin
    OutStringAdjust(7,0,tstr5,true,M4Val);
  end;
  if (nrofper>4) then begin
    OutStringAdjust(8,0,tstr6,true,M4Val);
  end;
  if (nrofper>5) then begin
    OutStringAdjust(9,0,tstr7,true,M4Val);
  end;
  OutStringAdjustBiDi(1,0,USetStr(4046),true,M4Val,520);
  EndFormat;
  Gray_Divider(0,1);
  return;
end;

procedure PrintNSumOPInstall(record RcVc RepSpec,record VIVc VIp,var val APSump,var val sact,var val s0,var val s1,var val s2,var val s3,var val s4,var val s5,var val s6,var val s7)
BEGIN
  record APInstallVC APIr;
  Boolean TrHs;
  LongInt latedays;

  APIr.VISerNr = VIp.SerNr;
  TrHs = true;
  while (LoopKey("VISerNr",APIr,1,TrHs)) begin
    if (APIr.VISerNr!=VIp.SerNr) then begin
      TrHs = false;
    end;  
    if (TrHs) then begin
      latedays = DateDiff(APIr.DueDate,CurrentDate);
      APSump = APSump + APIr.BookRVal;
      if (RepSpec.flags[0]==0) then begin
        StartFormat(15);
        OutDate(0,0,APIr.DueDate,false);
        OutLongInt(70,"DblVIVc",VIp.SerNr,false);
        OutString(150,0,VIp.VECode,false);
        OutString(220,0,VIp.VEName,false);
        OutVal(400,0,APIr.BookRVal,M4Val,true);
        OutVal(480,0,APSump,M4Val,true);
        EndFormat;
        if (nonblank(VIp.Comment)) then begin
          StartFormat(15);
          OutString(40,0,VIp.Comment,false);
          EndFormat;
       end;
      end;
      SumAged(CurrentDate,-latedays,0,APIr.BookRVal,sact,s0,s1,s2,s3,s4,s5,s6,s7);
    end;
  end;
  RETURN;
END;

global
procedure OPProgRn(record RcVc RepSpec) 
BEGIN
  record APVc APr;
  record VIVc VIr;
  record ObjVc OBr;  
  Boolean TrHs;
  val APSum,rs;
  val APVal,pdvrebt,tv;
  val sact,s0,s1,s2,s3,s4,s5,s6,s7,tot;
  LongInt latedays;
  Boolean testf,vif,Accs;
  string 255 ckey,tstr,t2;
  Date pd,thed;
  Integer rw,nrofper;
  record RoundBlock Roundb;
  record AccBlock Accb;
  
  BlockLoad(Accb); 
  BlockLoad(Roundb); 
  thed = RepSpec.d1;
  if (blankdate(thed)) then begin 
    thed = CurrentDate;
  end;
  StartReportJob(USetStr(4121));//Mok˜jim÷ prognoz˜
  rw = 1;
  //VITO: DOL-102
  if (RepSpec.flags[0] == 2) then begin
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  //:VITO
  HTVends(RepSpec.f2,RepSpec.f2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
   if (RepSpec.ArtMode==1) then begin
     tstr = USetStr(4128);//Mok˜jimas nust. nuol. dienˆ
   end else begin
     tstr = USetStr(4127);//Mok˜jimas laiku
   end;  
   Header(rw,tstr,0);
   if (RepSpec.flags[1]==0) then begin
     tstr = USetStr(4133);//Visos faktðros
   end else begin
     tstr = USetStr(4134);//Tik nesulaikytos fakt.
   end;  
   Header(rw,tstr,1);
   rw = rw + 1;
   if (RepSpec.flags[0]==0) then begin
     tstr = USetStr(4129);//Detal˜s
   end else begin
     tstr = USetStr(4130);//Laikotarpiais
   end;
   //VITO: DOL-102
   if (RepSpec.flags[2] == 0) then begin
     tstr = USetStr(1000077);//Pagal m˜nesius
   end;
   //:VITO
   Header(rw,tstr,0);
   if (nonblank(RepSpec.ObjStr)) then begin
     HTObj(RepSpec.ObjStr,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end else begin
     if (nonblank(RepSpec.ObjType)) then begin
       HTOT(RepSpec.ObjType,tstr);
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;
   if (IsBooks==false) then begin
    if (HasContactClassification) then begin
      HTCustClass(RepSpec.f4,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;
    HTCustClassType(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
    if (HasCategories) then begin
      HTLevCat(RepSpec.f7,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;
  end;
  EndHeader;
  
  //VITO: DOL-102
  if (RepSpec.flags[0] == 2) then begin
    DOL_OPProgRn_ByMonths(RepSpec);
    goto LOPProgRn;
  end;
  //:VITO
  if (RepSpec.flags[0]!=0) then begin
  CountPeriods(nrofper);
  if (nrofper==2) then begin
    SetRepColBiDi(2,250,290);
    SetRepColBiDi(3,300,340);
    SetRepColBiDi(4,350,390);
    SetRepColBiDi(5,400,440);
  end;
  if (nrofper==3) then begin
    SetRepColBiDi(2,100,140);
    SetRepColBiDi(3,180,220);
    SetRepColBiDi(4,260,300);
    SetRepColBiDi(5,320,360);
    SetRepColBiDi(6,400,440);
  end;
  if (nrofper==4) then begin
    SetRepColBiDi(2,80,120);
    SetRepColBiDi(3,160,200);
    SetRepColBiDi(4,240,280);
    SetRepColBiDi(5,320,360);
    SetRepColBiDi(6,380,420);
    SetRepColBiDi(7,430,470);
  end;
  if (nrofper==5) then begin
    SetRepColBiDi(2,60,100);
    SetRepColBiDi(3,120,160);
    SetRepColBiDi(4,180,220);
    SetRepColBiDi(5,240,280);
    SetRepColBiDi(6,300,340);
    SetRepColBiDi(7,360,400);
    SetRepColBiDi(8,420,460);    
  end;
  if (nrofper==6) then begin
    SetRepColBiDi(2,50,90);
    SetRepColBiDi(3,100,140);
    SetRepColBiDi(4,150,190);
    SetRepColBiDi(5,200,240);
    SetRepColBiDi(6,250,290);
    SetRepColBiDi(7,300,340);
    SetRepColBiDi(8,350,390);
    SetRepColBiDi(9,400,440);
  end;
  end;
  if (RepSpec.ArtMode==1) then begin
    ckey = "RebDate";
  end else begin
    ckey = "DueDate";
  end;
  if (RepSpec.flags[0]==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(4122),false);
   // OutString(60,0,USetStr(4136),false);
    OutString(70,0,USetStr(4123),false);
    OutString(150,0,USetStr(4126),false);
    OutString(220,0,USetStr(4132),false);
    OutStringAdjustBiDi(400,0,USetStr(4124),true,M4Val,450);
    OutStringAdjustBiDi(1,0,USetStr(4125),true,M4Val,505);
    EndFormat;
  end else begin
    PrintAgedHeader(RepSpec.d1,nrofper);
  end;
  APr.SerNr = 0;
  if (RepSpec.flags[0]==0) then begin
    Gray_Divider(0,1);
  end;  
  TrHs = true;
  while (LoopKey(ckey,APr,2,TrHs)) begin
    VIr.SerNr = APr.SerNr;
    vif = ReadFirstMain(VIr,1,true);
    if (RepSpec.ArtMode==1) then begin
      if (vif) then begin
        pd = VIr.RebDate;
      end else begin
        pd = APr.RebDate;
      end;
    end else begin
      if (vif) then begin
        pd = VIr.DueDate;
      end else begin
        pd = APr.DueDate;
      end;  
    end;
    if (blankdate(pd)) then begin
      pd = VIr.DueDate;
    end;
    if (nonblankdate(RepSpec.d1)) then begin
      if (pd>RepSpec.d1) then begin
        TrHs = false;
      end;  
    end;  
    if (TrHs) then begin
      if (blank(RepSpec.f2) or (RepSpec.f2==APr.VECode)) then begin
        testf = true;
        if (RepSpec.flags[1]==1) then begin
          if (vif) then begin
            if (VIr.Closed!=0) then begin
              testf = false;
            end;
          end;    
        end;
        // EVS: DOL-144
        if (testf) then begin
          testf = CheckVendorMatch(VIr.VECode,RepSpec);
        end;
        // :EVS
        if (testf) then begin
          testf = ContactInGroupClass2(VIr.VECode,RepSpec.f7,RepSpec.f4,RepSpec.f5,"SUPP","","");
        end;
        if (testf) then begin
          if (nonblank(RepSpec.ObjStr)) then begin 
            if (SetInSet(RepSpec.ObjStr,VIr.Objects)==false) then begin
              testf = false;
            end;  
          end else begin
            if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin
              testf = false;
              OBr.OTCode = RepSpec.ObjType;
              OBr.Code = "";
              Accs = true;
              ResetLoop(OBr);
              while (LoopKey("OTCode",OBr,1,Accs)) begin
                if ((Accs==true) and (RepSpec.ObjType==OBr.OTCode)) then begin
                  if (SetInSet(OBr.Code,VIr.Objects)) then begin
                    testf = true;
                    Accs = false;
                  end;
                end;
              end; 
            end;
          end;
        end;
        if (testf) then begin
          if ((vif==false) or (VIr.InstallmentInv==0)) then begin
            if (RepSpec.ArtMode==1) then begin
              latedays = DateDiff(pd,thed);
              APVal = APr.RVal;
              GetPDVRebt(VIr.PayDeal,pdvrebt);
              if (pdvrebt!=0) then begin
                tv = (VIr.RebVal*APVal)/VIr.PayVal;
                if (tv==0) then begin
                  if (Accb.DiscCashVAT!=0) then begin
                    tv = VIr.CalcVATVal;
                    if (VIr.VATVal!=0) then begin
                      tv = VIr.VATVal;
                    end;
                    tv = VIr.PayVal - tv;
                    tv = tv*pdvrebt;
                  end else begin
                    tv = APVal*pdvrebt;
                  end;
                  tv = tv/100;
                  tv = Round(tv,GetTotalRoundMode(Roundb));
                end;
                APVal = APVal - tv;
//pdvrebt2                
              end;
            end else begin
              if (vif) then begin
                latedays = DateDiff(VIr.DueDate,thed);
              end else begin
                latedays = DateDiff(APr.DueDate,thed);
              end;   
              APVal = APr.RVal;
            end;
            APVal = APVal - VIr.HoldSum;
            if (vif) then begin
//              rs = MulRateToBase1(VIr.CurncyCode,APVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
//they say it should be todays rate in forecast
              rs = MulWithRateToBase1(VIr.CurncyCode,CurrentDate,APVal,DefaultCurRoundOff);          
            end else begin
              rs = MulWithRateToBase1(APr.CurncyCode,APr.DueDate,APVal,DefaultCurRoundOff);
            end;  
            APSum = APSum + rs;
            if (vif==false) then begin
              VIr.SerNr = APr.SerNr;
              VIr.VECode = APr.VECode;
              VIr.VEName = APr.VEName;
              VIr.Comment = "";
              t2 = USetStr(2530);
            end;
            tstr = VIr.SerNr;
            if (VIr.POSerNr>=1) then begin
              t2 = VIr.POSerNr;
            end else begin
              t2 = "";
            end;
            if (vif==false) then begin
              tstr = t2;
            end;  
            if (RepSpec.flags[0]==0) then begin
              StartFormat(15);
              OutDate(0,0,pd,false);
              if (HasLocalization("ARG")) then begin
                OutStringID(70,"DblVIVc",VIr.SerNr & ",(" & VIr.InvoiceNr & ")",false,VIr.SerNr);
              end else begin 
                OutString(70,"DblVIVc",VIr.SerNr,false);
              end;  
              OutString(150,0,VIr.VECode,false);
              OutString(220,0,VIr.VEName,false);
              OutValBiDi(400,0,rs,M4Val,true,450);
              OutValBiDi(1,0,APSum,M4Val,true,505);
/*              
              OutString(70,"DblVIVc",tstr,false);
              OutString(110,"DblPOVc",t2,false);
              OutString(150,0,VIr.VECode,false);
              OutString(210,0,VIr.VEName,false);
              OutVal(380,0,rs,M4Val,true);
              OutVal(480,0,APSum,M4Val,true);
*/              
              EndFormat;
              if (nonblank(VIr.Comment)) then begin
                StartFormat(15);
                OutString(40,0,VIr.Comment,false);
                EndFormat;
              end;
            end;
            SumAged(thed,-latedays,0,rs,sact,s0,s1,s2,s3,s4,s5,s6,s7);        
          end else begin
            PrintNSumOPInstall(RepSpec,VIr,APSum,sact,s0,s1,s2,s3,s4,s5,s6,s7);
          end;
        end;
      end;
    end;  
  end;
  if (RepSpec.flags[0]==0) then begin
    Gray_Divider(0,1);
  end;  
  if (RepSpec.flags[0]==1) then begin
    tot = s0 + s1;
    tot = tot + s2;
    tot = tot + s3;
    tot = tot + s4;
    tot = tot + s5;
    tot = tot + s6;
    tot = tot + s7;
    tot = tot + sact;
    PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,blankval,tot,nrofper,480,"");
  end;
  if ((RepSpec.flags[2]!=0) or (RepSpec.flags[3]!=0)) then begin
    if (RepSpec.flags[3]!=0) then begin
      tstr = USetStr(2366);        
      if (RepSpec.flags[2]!=0) then begin
        t2 = USetStr(2891);
        tstr = tstr & t2;
        t2 = USetStr(3023);        
        tstr = tstr & t2;
      end;      
    end else begin
      tstr = USetStr(3023);        
    end;
    StartFormat(15);
    if (RepSpec.flags[0]==0) then begin
      OutString(0,0,tstr,false);
    end else begin
      OutString(140,0,tstr,false);
    end;
    EndFormat;
    APSum = 0;
    s0 = 0;
    s1 = 0;
    s2 = 0;
    s3 = 0;
    s4 = 0;
    s5 = 0;
    s6 = 0;
    s7 = 0;      
    VIr.OKFlag = 0;
    VIr.SerNr = -1;
    TrHs = true;
    while (LoopKey("OKFlag",VIr,2,TrHs)) begin
      if (VIr.OKFlag!=0) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;        
        if (RepSpec.ArtMode==1) then begin
          pd = VIr.RebDate;
        end else begin
          pd = VIr.DueDate;
        end;        
        if (nonblankdate(RepSpec.d1)) then begin
          if (RepSpec.ArtMode==1) then begin
            if (pd>RepSpec.d1) then begin testf = false; end;
          end else begin
            if (pd>RepSpec.d1) then begin testf = false; end;
          end;          
        end;  
        if (nonblank(RepSpec.f2) and (RepSpec.f2!=VIr.VECode)) then begin
          testf = false;
        end;  
        if (blank(RepSpec.f2) or (RepSpec.f2==VIr.VECode)) then begin
          if (RepSpec.flags[1]==1) then begin
            if (VIr.Closed!=0) then begin testf = false; end;
          end;
        end;
        if (testf) then begin
          testf = ContactInGroupClass2(VIr.VECode,RepSpec.f7,RepSpec.f4,RepSpec.f5,"SUPP","","");
        end;        
        if (RepSpec.flags[2]==0) then begin
          if (VIr.PrelBook!=0) then begin testf = false; end;
        end;  
        if (RepSpec.flags[3]==0) then begin
          if (VIr.PrelBook==0) then begin testf = false; end;
        end;  
        if (testf) then begin
          if (nonblank(RepSpec.ObjStr)) then begin 
            if (SetInSet(RepSpec.ObjStr,VIr.Objects)==false) then begin
              testf = false;
            end;  
          end else begin
            if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin
              testf = false;
              OBr.OTCode = RepSpec.ObjType;
              OBr.Code = "";
              Accs = true;
              ResetLoop(OBr);
              while (LoopKey("OTCode",OBr,1,Accs)) begin
                if ((Accs==true) and (RepSpec.ObjType==OBr.OTCode)) then begin
                  if (SetInSet(OBr.Code,VIr.Objects)==true) then begin
                    testf = true;
                    Accs = false;
                  end;
                end;
              end; 
            end;
          end;
        end;  
        if (testf) then begin
          if (RepSpec.ArtMode==1) then begin
            latedays = DateDiff(pd,thed);
            APVal = VIr.PayVal;
            GetPDVRebt(VIr.PayDeal,pdvrebt);
            if (pdvrebt!=0) then begin
              tv = APVal*pdvrebt;
              tv = tv/100;
              tv = Round(tv,GetTotalRoundMode(Roundb));
              APVal = APVal - tv;
//pdvrebt2              
            end;
          end else begin            
            latedays = DateDiff(VIr.DueDate,thed);
            APVal = VIr.PayVal;
          end;
          APVal = APVal - VIr.HoldSum;
          rs = MulRateToBase1(VIr.CurncyCode,APVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            rs = -rs;
          end;  
          APSum = APSum + rs;
          tstr = VIr.SerNr;
          if (vif==false) then begin
            tstr =  tstr & t2;
          end;  
          if (RepSpec.flags[0]==0) then begin
            StartFormat(15);
            OutDate(0,0,pd,false);
           // OutString(60,0,t2,false);
            OutString(70,"DblVIVc",VIr.SerNr,false);
            OutString(140,0,VIr.VECode,false);
            OutString(200,0,VIr.VEName,false);
            OutValBiDi(400,0,rs,M4Val,true,450);
            OutValBiDi(1,0,APSum,M4Val,true,505);
            EndFormat;
            if (nonblank(VIr.Comment)) then begin
              StartFormat(15);
              OutString(70,0,VIr.Comment,false);
              EndFormat;
            end;
          end;
          SumAged(thed,-latedays,0,rs,sact,s0,s1,s2,s3,s4,s5,s6,s7);        
        end;
      end;
    end;
    if (RepSpec.flags[0]==0) then begin
      Gray_Divider(0,1);    
    end;  
    if (RepSpec.flags[0]==1) then begin
      PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,blankval,tot,nrofper,480,"");
    end;        
  end;
LOPProgRn:;//VITO: DOL-102
  EndJob;
  RETURN;
END;
