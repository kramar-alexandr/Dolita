external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HTCusts(string, string, var string);
external procedure HTOKF(Integer,Integer, var string);
external procedure HTArtSel(string,string, var string);
external procedure HTSaleMan(string, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure FindSalesExVat(record TaxMatrixVc,string, val,Integer,Integer,var val);
external procedure HT2Per(Date,Date,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetVATdouble(string,var val,var val,Integer);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean GetVAT2(string,var val,var Integer,Integer);
external function Boolean GetVATincl(string,var val,var Integer);
external outer function val GetIVCashCCPaySum(record IVCashVc); //EBS
external outer function boolean DOLIsReturnInvoice(record IVCashVc, var longint); //EBS

// EVS: DOL-5
function val GetItemPriceFromCard(string artcode)
begin
  record INVc INr;
  val res;
  
  if (ReadFirstItem(artcode,INr,true,false)) then begin
    res = INr.UPrice1;
  end;
  
  GetItemPriceFromCard = res;
return;
end;
// :EVS

// EVS: DOL-81
procedure CashInvVat(Integer stp,Integer incvat,Integer NoTAXonVAT,Integer exportflag,string vatcode,val rowsump,
                var val vatprcp,var val vatvalp,var val vatexclprc,var val vatinclprc,var val rowtax)
BEGIN
  Integer rn;
  val tax1;
  
  vatprcp = blankval;
  vatvalp = blankval;
  vatexclprc = blankval;
  vatinclprc = blankval;
  if (stp==1) then begin
    switch (incvat) begin
      case 0:
        if ((exportflag==0) or (exportflag==3) or (exportflag==4)) then begin
//          Mul2VAT(vatcode,rowsump,vatvalp,vatprcp,incvat);
          GetVATdouble(vatcode,vatprcp,tax1,incvat);
          MulVATIV(vatcode,rowsump,vatvalp,rowtax,incvat,NoTAXonVAT);
          if (GetVAT2(vatcode,vatexclprc,rn,0)) then begin
          end;
          if (GetVATincl(vatcode,vatinclprc,rn)) then begin
          end;
        end;
      otherwise 
//        Mul2VAT(vatcode,rowsump,vatvalp,vatprcp,incvat);
        GetVATdouble(vatcode,vatprcp,tax1,incvat);
        MulVATIV(vatcode,rowsump,vatvalp,rowtax,incvat,NoTAXonVAT);
        if (GetVAT2(vatcode,vatexclprc,rn,0)) then begin
        end;
        if (GetVATincl(vatcode,vatinclprc,rn)) then begin
        end;
    end;
  end;
  RETURN;
END;
// :EVS

procedure RepIVCashGP(record IVCashVc IVCashp, var val totquanp, var val totcsump,record RcVc RepSpec)
begin
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  val gps;
  val rowinbase,ivsum;
  val diff,totdiff;
  val item_card_price;
  val row_reb;
  Boolean skipitem,testf;
  record INVc INr;
  val t,rowGP,quant,gp;
  record TaxMatrixVc TMr;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  longint templ; //EBS
  
  
  rwcnt = MatRowCnt(IVCashp);
  
  // EVS: DOL-5
  if (RepSpec.flags[3] == 1) then begin
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(IVCashp,i,IVCashrw);
      if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
        skipitem = false;
        if (IVCashrw.ovst!=0) then begin
          skipitem = true; 
        end;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (RepSpec.FirstAcc<>IVCashrw.ArtCode) then begin
            skipitem = true;
          end;  
        end;
        if (nonblank(RepSpec.f3)) then begin
          if (SetInSet(RepSpec.f3,IVCashrw.Objects)==false) then begin
            skipitem = true;
          end;
        end; 
        if (nonblank(RepSpec.LastAcc)) then begin
          INr.Code=IVCashrw.ArtCode;
          if (ReadFirstMain(INr,1,true)) then begin
            if (nonblank(RepSpec.LastAcc)) then begin
              if (RepSpec.LastAcc<>INr.Group) then begin
                skipitem = true;
              end;
            end;
          end else begin
            skipitem = true;
          end;
        end;
        t = MULRATETOBASE1(IVCashp.CurncyCode,IVCashrw.Sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
        UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
        FindSalesExVat(TMr,IVCashrw.VATCode,t,IVCashp.InclVAT,IVCashp.NoTAXonVAT,rowinbase);
        gp = IVCashrw.rowGP;
        if (blank(gp)) then begin
          if (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
            t = MULRATETOBASE1(IVCashp.CurncyCode,IVCashrw.Sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
            FindSalesExVat(TMr,IVCashrw.VATCode,t,IVCashp.InclVAT,IVCashp.NoTAXonVAT,rowinbase);
            t = IVCashrw.Quant * IVCashrw.BasePrice;
            if (IVCashrw.PriceFactor!=0) then begin
              t = t/IVCashrw.PriceFactor;
            end;
            gp = rowinbase - t;
          end;
        end;
        rowGP = gp;
        quant = IVCashrw.Quant;
        
        item_card_price = GetItemPriceFromCard(IVCashrw.ArtCode);
        row_reb = stringtoval(IVCashrw.vRebate,m41val);//((1-(rowinbase/quant)/item_card_price)*100); // EVS: DOL-103
        
        if (row_reb == 0) then begin
          goto LRepIVCashGP;
        end;
      end;  
    end;
    if (rwcnt == 0) then begin
      goto LRepIVCashGP;
    end;
  end;
  // :EVS
  
  Gray_Divider(0,1);
  
  totquanp = 0;
  totdiff = 0;
  StartFormat(15);
//EBS-->
  if RepSpec.flags[29]!=0 then begin
    OutStringID(0,"DblEBSPOSIVCashVc",IVCashp.SerNr,false,IVCashp.SerNr & ":" & RepSpec.flags[29]);
  end else begin
    OutLongInt(0,"DblIVCashVc",IVCashp.SerNr,false);
  end;
//EBS<--
  OutDate(130,0,IVCashp.InvDate,false);
  EndFormat;
//  rwcnt = MatRowCnt(IVCashp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
  
    if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
            skipitem = false;
            if (IVCashrw.ovst!=0) then begin
              skipitem = true; 
            end;
            if (nonblank(RepSpec.FirstAcc)) then begin
              if (RepSpec.FirstAcc<>IVCashrw.ArtCode) then begin
                skipitem = true;
              end;  
            end;
            if (nonblank(RepSpec.f3)) then begin
              if (SetInSet(RepSpec.f3,IVCashrw.Objects)==false) then begin
                skipitem = true;
              end;
            end; 
            if (nonblank(RepSpec.LastAcc)) then begin
              INr.Code=IVCashrw.ArtCode;
              if (ReadFirstMain(INr,1,true)) then begin
                if (nonblank(RepSpec.LastAcc)) then begin
                  if (RepSpec.LastAcc<>INr.Group) then begin
                    skipitem = true;
                  end;
                end;
              end else begin
                skipitem = true;
              end;
            end;
            
            if (skipitem==false) then begin
              t = MULRATETOBASE1(IVCashp.CurncyCode,IVCashrw.Sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
              UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
              FindSalesExVat(TMr,IVCashrw.VATCode,t,IVCashp.InclVAT,IVCashp.NoTAXonVAT,rowinbase);
              
              // EVS: DOL-103
              FindSalesExVat(TMr,IVCashrw.VATCode,IVCashrw.Sum,IVCashp.InclVAT,IVCashp.NoTAXonVAT,rowinbase);
              if (IVCashp.InclVAT == 0) then begin
                CashInvVat(IVCashrw.stp,IVCashp.InclVAT,IVCashp.NoTAXonVAT,0,IVCashrw.VATCode,IVCashrw.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax); // EVS: DOL-81
                rowinbase = rowinbase + vatval;
              end else begin
                rowinbase = MULRATETOBASE1(IVCashp.CurncyCode,IVCashrw.Sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
              end;
              // :EVS
              
              gp = IVCashrw.rowGP;
              if (blank(gp)) then begin
                if (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
                  t = MULRATETOBASE1(IVCashp.CurncyCode,IVCashrw.Sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
                  FindSalesExVat(TMr,IVCashrw.VATCode,t,IVCashp.InclVAT,IVCashp.NoTAXonVAT,rowinbase);
                  t = IVCashrw.Quant * IVCashrw.BasePrice;
                  if (IVCashrw.PriceFactor!=0) then begin
                    t = t/IVCashrw.PriceFactor;
                  end;
                  gp = rowinbase - t;
                end;
              end;
//EBS-->
 //             if DOLIsReturnInvoice(IVCashp,templ) then begin
//                gp = -gp;
//              end;
//EBS<--
              rowGP = gp;
              quant = IVCashrw.Quant;
              
              // EVS: DOL-5
              testf = true;
              
              item_card_price = GetItemPriceFromCard(IVCashrw.ArtCode);
              row_reb = stringtoval(IVCashrw.vRebate,m41val);//((1-(rowinbase/quant)/item_card_price)*100);
              
              if (RepSpec.flags[3] == 1 and row_reb == 0) then begin
                testf = false;
              end;
              // :EVS
              
              if (testf) then begin
                
                ivsum = ivsum + rowinbase;
                
                gps = gps + rowGP;
                diff = rowinbase - rowGP;
              
            
                totdiff = totdiff + diff;
                totquanp = totquanp + quant;
              
                StartFormat(15);
                OutString(20,0,IVCashrw.ArtCode,false);
                OutVal(124,0,quant,M4UVal,true);
                OutString(130,0,IVCashrw.Spec,false);
                OutVal(250,0,item_card_price,M4Val,true); // EVS: DOL-5
                OutString(300,0,row_reb & "%",true); // EVS: DOL-5
                OutVal(350,0,rowinbase,M4Val,true);
                OutVal(420,0,diff,M4Val,true);
                OutVal(480,0,rowGP,M4Val,true);//IVrw
                EndFormat;
              end;

            end;
    end;
  end;

  Black_Divider(275,480);
  StartFormat(15);
  OutVal(124,0,totquanp,M4Qty,true);
  OutVal(350,0,ivsum,M4Val,true);
  OutVal(420,0,totdiff,M4Val,true);
  OutVal(480,0,gps,M4Val,true);
  EndFormat;
  ivsum = ivsum + gps;
  StartFormat(15);
  OutString(100,0,IVCashp.Objects,false);
  EndFormat;
  
  LRepIVCashGP:;
  return;
end;

// EVS: DOL-5
procedure AddToTimeArray_IVCashVc(record IVCashVc IVCashr,var vector longint v_ivcashrec,var vector val v_iv,var vector val v_gps,val iv, val gps,var array date a_datelist, vector boolean v_dateaddedf, vector integer v_datetimelen)
begin
  string 60 index;
  time onstime,onetime;
  
  onstime.hour = GetHour(IVCashr.TransTime);
  onstime.minute = 1;
  onstime.second = 0;
  
  onetime = AddHours(onstime,1);
  onetime.minute = 0;
  
  index = IVCashr.InvDate & "|" & onstime & "|" & onetime;
  
  v_ivcashrec[index & "|" & v_datetimelen[index]] = IVCashr.SerNr;
  v_iv[index & "|" & v_datetimelen[index]] = iv;
  v_gps[index & "|" & v_datetimelen[index]] = gps;
  v_datetimelen[index] = v_datetimelen[index] + 1;
  
  if (!v_dateaddedf[IVCashr.InvDate]) then begin
    a_datelist[a_datelist.length] = IVCashr.InvDate;
    v_dateaddedf[IVCashr.InvDate] = true;
  end;
  
return;
end;
// :EVS

global
procedure PIVGP1Rn(record RcVc RepSpec,LongInt afr,LongInt ato,string frcu,string tocu,string frdra,string todra,var val TotSum,var val gpsum)
begin
  record IVCashVc IVCashr;
  Boolean TrHs;
  Integer i,rwcnt,j,k;
  val iv,gps,t,rowGP;
  Boolean testf,testf2;
  row IVCashVc IVCashrw;
  Boolean skipfr;
  record INVc INr;
  Boolean skipitem;
  Boolean wholeinv;
  LongInt LLoop1,templ; //EBS added templ
  val totquan, sumquan, totcsum, sumcsum,rowinbase;
  string 255 tstr,vindex;
  Integer rw;
  time onstime,onetime;
  record TaxMatrixVc TMr;
  vector longint v_ivcashrec;
  vector val v_iv,v_gps;
  array date a_datelist;
  vector boolean v_dateaddedf;
  vector integer v_datetimelen;
  array time a_stime,a_etime;
  boolean showusercolf,totonlyf;
  val user_iv,totuser_iv,user_qty,totuser_qty,qty,totqty;
  boolean skipuseritem;
  boolean notinheaderf,notinmatrixf,remnonperscolsf;
  array integer a_colx;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;

  /*
  SetRepCol(3,288);
  SetRepCol(4,384);
  SetRepCol(5,336);
  */
  
  if (RepSpec.ArtMode == 3) then begin
    RepSpec.ArtMode = 0;
    totonlyf = true;
    remnonperscolsf = true;
  end;
  
  if (RepSpec.ArtMode == 4) then begin
    RepSpec.ArtMode = 0;
    remnonperscolsf = true;
  end;
  
  if (RepSpec.ArtMode == 0) then begin
    showusercolf = nonblank(RepSpec.AccStr);
  end;
  
  if  (RepSpec.ArtMode==0) then begin
    // StartFormat(15);
    // OutString(0,0,USetStr(2352),false);
    // OutString(60,0,USetStr(2353),false);
    // OutString(140,0,USetStr(2354),false);
    // OutString(340,0,USetStr(2642),true);
    // OutString(410,0,USetStr(2644),true);
    // OutString(480,0,USetStr(2643),true);
    // EndFormat;
    if (showusercolf) then begin
      a_colx[0] = 60;
      a_colx[1] = 140;
      a_colx[2] = 260;
      a_colx[3] = 320;
      a_colx[4] = 360;
      a_colx[5] = 420;
    end else begin
      a_colx[0] = 60;
      a_colx[1] = 140;
      a_colx[2] = 360;
//        a_colx[3] = 320;
      a_colx[4] = 420;
//        a_colx[5] = 420;
    end;
      
    StartFormat(15);
    OutString(0,0,USetStr(2352),false);
    OutString(a_colx[0],0,USetStr(2353),false);
    OutString(a_colx[1],0,USetStr(2354),false);
    if (!remnonperscolsf) then begin
      OutString(a_colx[2],0,USetStr(20531),true);
    end;
    if (showusercolf) then begin
      OutString(a_colx[3],0,USetStr(20531) & " (" & RepSpec.AccStr & ")",true);
    end;
    if (!remnonperscolsf) then begin
      OutString(a_colx[4],0,USetStr(2642),true);
    end;
    if (showusercolf) then begin
      OutString(a_colx[5],0,USetStr(2642) & " (" & RepSpec.AccStr & ")",true);
    end;
    if (!remnonperscolsf) then begin
      OutString(1,0,USetStr(2643),true);
    end;
    EndFormat;
  end;
  if  (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2352),false);
    OutString(130,0,USetStr(2353),false);
    OutString(250,0,USetStr(1000011),true); // EVS: DOL-5
    OutString(300,0,USetStr(1000012),true); // EVS: DOL-5
    OutString(350,0,USetStr(2642),true);
    OutString(420,0,USetStr(2572),true);
    OutString(480,0,USetStr(2643),true);
    EndFormat;
  end;
  // EVS: DOL-5
  if (RepSpec.ArtMode == 2) then begin
    StartFormat(15);
    OutString(0,0,USetStr(4885),false);
    OutString(60,0,USetStr(2352),false);
    OutString(100,0,USetStr(2353),false);
    OutString(160,0,USetStr(2354),false);
    OutString(420,0,USetStr(2642),true);
    OutString(480,0,USetStr(2643),true);
    EndFormat;
   end;
   // :EVS
  
  IVCashr.InvDate = RepSpec.sStartDate;
  IVCashr.SerNr = 0;
  if (RepSpec.ArtMode==0 or RepSpec.ArtMode == 2) then begin
    Gray_Divider(0,1);
  end;  
  TrHs = true;
  while (LoopKey("InvDate",IVCashr,2,TrHs)) begin
    if (DateInRange(IVCashr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      testf2 = false;
      wholeinv = true;
      if (nonblank(RepSpec.TransStr)) then begin
        if (RepSpec.TransStr<>IVCashr.PayDeal) then begin
          testf = false; 
          if  (RepSpec.TransStr==IVCashr.PayDeal2) then begin
            testf = true;
          end;
        end;
      end;  
      if nonblank(RepSpec.f4) then begin
        if (IVCashr.Location<> RepSpec.f4) then begin
          testf = false;
        end;
      end;
      if nonblank(RepSpec.f7) then begin
        if (IVCashr.LocalMachineCode<> RepSpec.f7) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVCashr.Objects)==false) then begin
          testf = false;
        end;
      end;
      
      if (nonblank(RepSpec.f5)) then begin
        if (IVCashr.DrawerCode<frdra) then begin testf = false; end;
        if (IVCashr.DrawerCode>todra) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>IVCashr.CustCode) then begin testf = false; end;
      end;  
      if (testf) then begin
        testf = ContactInGroupClass(IVCashr.CustCode,RepSpec.f9,RepSpec.f8,"CUST","","");
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (RepSpec.AccStr<>IVCashr.SalesMan) then begin notinheaderf = true; end;
        if (RepSpec.AccStr<>IVCashr.SalesMan and !showusercolf) then begin testf = false; end;
      end; 
      
      if (RepSpec.flags[4] == 1 and IVCashr.OKFlag != 1) then begin
        testf = false;
      end;
  
      if (afr<>-1) then begin
        if (IVCashr.SerNr<afr) then begin
           testf = false;
        end;
      end;     
      if (ato<>-1) then begin
        if (IVCashr.SerNr>ato) then begin
           testf = false;
        end;
      end; 
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVCashr.Objects)==false) then begin
          testf = false;
        end;
      end;    
//EBS-->
      if testf and RepSpec.vals4>0 then begin
        if GetIVCashCCPaySum(IVCashr)!=RepSpec.vals4 then begin
          testf = false;
        end;
      end;
//EBS<--
      if (testf) then begin
         gps = 0;
         iv = 0;
         rwcnt = MatRowCnt(IVCashr);
         wholeinv = false;
         notinmatrixf = true;
         for (i=0; i<rwcnt; i=i+1) begin
           MatRowGet(IVCashr,i,IVCashrw);
           if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
              skipitem = false;
              if (IVCashrw.ovst!=0) then begin
                skipitem = true; 
              end;
              if (nonblank(RepSpec.FirstAcc)) then begin
                if (RepSpec.FirstAcc<>IVCashrw.ArtCode) then begin 
                  skipitem = true; 
                  wholeinv = false;
                end;
              end;
              if (nonblank(RepSpec.f3)) then begin
                if (SetInSet(RepSpec.f3,IVCashrw.Objects)==false) then begin
                  skipitem = true; 
                  wholeinv = false;
                end;
              end;
              if (nonblank(RepSpec.LastAcc) or nonblank(RepSpec.f6)) then begin
                INr.Code = IVCashrw.ArtCode;
                if (ReadFirstMain(INr,1,true)) then begin
                  if nonblank(RepSpec.LastAcc) then begin 
                    if (RepSpec.LastAcc<>INr.Group) then begin
                      skipitem = true;
                      wholeinv = false;
                    end;
                  end;
                  if (nonblank(RepSpec.f6)) then begin
                    if (SetInSet(RepSpec.f6,INr.DispGroups)==false) then begin
                      skipitem = true;
                      wholeinv = false;
                    end;
                  end;
                end else begin
                  skipitem = true;
                  wholeinv = false;
                end;
              end;
              skipuseritem = false;
              if (showusercolf and ((RepSpec.AccStr != IVCashr.SalesMan and IVCashrw.Salesmen == "") or (!SetInSet(RepSpec.AccStr,IVCashrw.Salesmen) and IVCashrw.Salesmen != ""))) then begin
                skipuseritem = true;
              end else begin
                notinmatrixf = false;
              end;
              if (skipitem==false) then begin
                rowGP = IVCashrw.rowGP;
                if (blank(rowGP)) then begin
                  if (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
                    t = MULRATETOBASE1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
                    FindSalesExVat(TMr,IVCashrw.VATCode,t,IVCashr.InclVAT,IVCashr.NoTAXonVAT,rowinbase);
                    t = IVCashrw.Quant * IVCashrw.BasePrice;
                    if (IVCashrw.PriceFactor!=0) then begin
                      t = t/IVCashrw.PriceFactor;
                    end;
                    rowGP = rowinbase - t;
                  end;
                end;
//EBS-->
//                if DOLIsReturnInvoice(IVCashr,templ) then begin
//                  rowGP = -rowGP;
//                end;
//EBS<--
                gps = gps + rowGP;
                testf2 = true;
                UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
                // EVS: DOL-103
                FindSalesExVat(TMr,IVCashrw.VATCode,IVCashrw.Sum,IVCashr.InclVAT,IVCashr.NoTAXonVAT,rowinbase);
                if (IVCashr.InclVAT == 0) then begin
                  CashInvVat(IVCashrw.stp,IVCashr.InclVAT,IVCashr.NoTAXonVAT,0,IVCashrw.VATCode,IVCashrw.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax); // EVS: DOL-81
                  rowinbase = rowinbase + vatval;
                end else begin
                  rowinbase = MULRATETOBASE1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
                end;
                // :EVS
                iv = iv + rowinbase;//extra
                qty = qty + IVCashrw.Quant;
                if (!skipuseritem) then begin
                  user_iv = user_iv + rowinbase;
                  user_qty = user_qty + IVCashrw.Quant;
                end;
              end;  
          end;
        end;
        skipfr = false;
        if (nonblank(RepSpec.FirstAcc)) then begin
         if (IVCashrw.ArtCode<>RepSpec.FirstAcc) then begin
            skipfr = true; 
            wholeinv = false;
          end;
        end;
        if (nonblank(RepSpec.f3)) then begin
          if (SetInSet(RepSpec.f3,IVCashrw.Objects)==false) then begin
            skipfr = true; 
            wholeinv = false;
          end;
        end; 
        if (nonblank(RepSpec.LastAcc) or nonblank(RepSpec.f6)) then begin
          INr.Code = IVCashrw.ArtCode;
          if (ReadFirstMain(INr,1,true)) then begin
            if (RepSpec.LastAcc<>INr.Group) then begin
              skipfr = true;
              wholeinv = false;
            end;
            if (nonblank(RepSpec.f6)) then begin
              if (SetInSet(RepSpec.f6,INr.DispGroups)==false) then begin
                skipfr = true;
                wholeinv = false;
              end;
            end;  
          end else begin
            skipfr = true;
            wholeinv = false;
          end;
        end;
        if (skipfr==false) then begin
          testf2 = true;
        end;
        if (showusercolf and notinmatrixf and notinheaderf) then begin
          testf2 = false;
        end;
        if (testf2==true) then begin
          if (wholeinv==true) then begin
            iv = MULRATETOBASE1(IVCashr.CurncyCode,IVCashr.Sum1,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            if (IVCashr.InclVAT>0) then begin
              iv = MULRATETOBASE1(IVCashr.CurncyCode,IVCashr.Sum4,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              t = MULRATETOBASE1(IVCashr.CurncyCode,IVCashr.Sum3,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              iv = iv-t;
            end;
          end else begin
            iv = MULRATETOBASE1(IVCashr.CurncyCode,iv,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          end;
          user_iv = MULRATETOBASE1(IVCashr.CurncyCode,user_iv,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          TotSum = iv + TotSum;
          gpsum = gpsum + gps;
          totcsum = totcsum + (iv - gps);
          if (RepSpec.ArtMode==1) then begin
            RepIVCashGP(IVCashr,totquan,totcsum,RepSpec);
            sumquan = sumquan + totquan;
          end;
          if (RepSpec.ArtMode==0) then begin
            // StartFormat(15);
            // tstr =  CreateInvoiceNumber(IVCashr.SerNr,"");
            // OutString(0,"DblIVCashVc",tstr,false);
            // OutDate(60,0,IVCashr.InvDate,false);
            // OutString(140,0,IVCashr.Addr0,false);
            // OutVal(340,0,iv,M4Val,true);
            // gpperc = (gps/iv)*100;
            // OutVal(410,0,gpperc,M4Val,true);
            // OutVal(1,0,gps,M4Val,true);
            // EndFormat;
            if (!totonlyf) then begin
              StartFormat(15);
              tstr = CreateInvoiceNumber(IVCashr.SerNr,"");
              OutString(0,"DblNPTSIVCash",tstr,false);
              OutDate(a_colx[0],0,IVCashr.InvDate,false);
              OutString(a_colx[1],0,IVCashr.Addr0,false);
              if (!remnonperscolsf) then begin
                OutVal(a_colx[2],0,qty,M4Val,true);
              end;
              if (showusercolf) then begin
                OutVal(a_colx[3],0,user_qty,M4Val,true);
              end;
              if (!remnonperscolsf) then begin
                OutVal(a_colx[4],0,iv,M4Val,true);
              end;
              if (showusercolf) then begin
                OutVal(a_colx[5],0,user_iv,M4Val,true);
              end;
              if (!remnonperscolsf) then begin
                OutVal(1,0,gps,M4Val,true);
              end;
              EndFormat;
            end;
            totqty = totqty + qty;
            totuser_iv = totuser_iv + user_iv;
            totuser_qty = totuser_qty + user_qty;
          end;
          // EVS: DOL-5
          if (RepSpec.ArtMode == 2) then begin
            AddToTimeArray_IVCashVc(IVCashr,v_ivcashrec,v_iv,v_gps,iv,gps,a_datelist,v_dateaddedf,v_datetimelen)
          end;
          // :EVS
        end;
        user_iv = blankval;
        user_qty = blankval;
        qty = blankval;
      end;//testf
    end;//while
  end;  
  
  // EVS: DOL-5
  if (a_datelist.length > 0 and RepSpec.ArtMode == 2) then begin
    onstime.hour = 0;
    onstime.minute = 1;
    onstime.second = 0;

    onetime = AddHours(onstime,1);
    onetime.minute = 0;
    
    for (i = 0; i < 24; i = i + 1) begin
      a_stime[i] = onstime;
      a_etime[i] = onetime;
      
      onstime.hour = GetHour(onetime);
      onstime.minute = 1;
      onstime.second = 0;

      onetime = AddHours(onstime,1);
      onetime.minute = 0;
    end;
    
    for (i = 0; i < a_datelist.length; i = i + 1) begin
      StartFormat(15);
      OutString(0,0,a_datelist[i],false);
      EndFormat;
      for (j = 0; j < 24; j = j + 1) begin
        vindex = a_datelist[i] & "|" & a_stime[j] & "|" & a_etime[j];
        for (k = 0; k < v_datetimelen[vindex]; k = k + 1) begin
          IVCashr.SerNr = v_ivcashrec[vindex & "|" & k];
          if (ReadFirstMain(IVCashr,1,true)) then begin
            StartFormat(15);
            OutString(11,0,left(a_stime[j],5) & "-" & left(a_etime[j],5),false);
            OutString(60,"DblIVCashVc",CreateInvoiceNumber(IVCashr.SerNr,""),false);
            OutDate(100,0,IVCashr.InvDate,false);
            OutString(160,0,IVCashr.Addr0,false);
            OutString(420,0,v_iv[vindex & "|" & k],true);
            OutString(480,0,v_gps[vindex & "|" & k],true);
            EndFormat;
          end;
        end;
      end;
    end;
    
  end;
  // :EVS
  
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(2365),false);
  OutVal(124,0,sumquan,M4Qty,true);
  if  (RepSpec.ArtMode==0) then begin
//EBS-->
    // OutVal(340,0,TotSum,M4Val,true);
    // gpperc = (gpsum/TotSum)*100;
    // OutVal(410,0,gpperc,M4Val,true);
    // OutVal(480,0,gpsum,M4Val,true);
    if (!remnonperscolsf) then begin
      OutVal(a_colx[2],0,totqty,M4Val,true);
    end;
    if (showusercolf) then begin
      OutVal(a_colx[3],0,totuser_qty,M4Val,true);
    end;
    if (!remnonperscolsf) then begin
      OutVal(a_colx[4],0,totsum,M4Val,true);
    end;
    if (showusercolf) then begin
      OutVal(a_colx[5],0,totuser_iv,M4Val,true);
    end;
    if (!remnonperscolsf) then begin
      OutVal(1,0,gpsum,M4Val,true);
    end;
//EBS<--
  end;
  if  (RepSpec.ArtMode==1) then begin
    OutVal(350,0,TotSum,M4Val,true);
    OutVal(420,0,totcsum,M4Val,true);
    OutVal(480,0,gpsum,M4Val,true);
  end;
  EndFormat;
  //TotSum = TotSum-gpsum;
  StartFormat(15);
  OutVal(430,0,sumcsum,M4Val,true);
  EndFormat;
  
  return;
end;  

global
procedure PIVGPRn(record RcVc RepSpec)
begin
  string 255 frdra,todra;
  LongInt afr,ato;
  string 255 frcu,tocu;
  integer rw;
  string 255 tstr;
  val posum,posgp;


  StartReportJob(USetStr(2641)); //"GP, Cash Invoices"

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);

  frdra = FirstInRange(RepSpec.f5,5);
  todra = LastInRange(RepSpec.f5,5);

  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0)
  HTNr(1111,1112,afr,ato,tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  HTSaleMan(RepSpec.AccStr,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1)
    rw = rw + 1;
  end;  
  HTArtSel(RepSpec.FirstAcc,RepSpec.LastAcc,tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  HTCusts(frcu,tocu,tstr);
  Header(rw,tstr,1)
  if (HasCategories) then begin
    HTCustCat(RepSpec.f9,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f8,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  rw = rw + 1;
  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  if nonblank(RepSpec. FirstAcc) then begin
    tstr = "Loc.Machine Code " & RepSpec.FirstAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f5)) then begin
    Header(rw,USetStr(12542) & ": " & RepSpec.f5,1);
    rw = rw + 1;
  end;   
  EndHeader;

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);

  frdra = FirstInRange(RepSpec.f5,5);
  todra = LastInRange(RepSpec.f5,5);

  PIVGP1Rn(RepSpec,afr,ato,frcu,tocu,frdra,todra,posum,posgp);

  EndJob;
  return;
end;
