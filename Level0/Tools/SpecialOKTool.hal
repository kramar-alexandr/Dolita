external procedure POQTVc_PasteQuant(var record POQTVc,Integer);
external procedure POVc_PasteQuant(var record POVc,Integer);
external procedure IVSumup(var record IVVc,Boolean);
external procedure IVCashSumup(var record IVCashVc,Boolean);
external function Boolean IVCashDchrsum(record IVCashVc,Integer,Integer);
external procedure IVCashDchsum(record IVCashVc,Integer);
external function Boolean IVCashVc_PasteArtCode(var record IVCashVc,Integer,Boolean,var string,var Integer);
external procedure SplitEclass(string,var Array string);
external function Boolean StockTakeVc_PasteArtCode(var record StockTakeVc,Integer,Integer,var string);
external procedure RecVc_PasteItem(var record RecVc,Integer);
external procedure RecSumup(record RecVc);
external procedure ProdOperationSumup(var record ProdOperationVc);
external procedure ProdOperationVc_PasteItem(var record ProdOperationVc,Integer);
external procedure ProdSumup(var record ProdVc);
external procedure ProdVc_PasteItem(var record ProdVc,Integer);
external function Boolean ORVc_ExplodeRecepy(record INVc,val,record ORVc,string,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure IVDchsum(var record IVVc,Integer);
external procedure ORDchsum(var record ORVc,Integer);
external procedure QTDchsum(record QTVc,Integer);
external function Boolean POQTDchrsum(record POQTVc,Integer);
external function Boolean IntORchrsum(record IntORVc,Integer);
external function Boolean PODchrsum(record POVc,Integer);
external function Boolean QTDchrsum(var record QTVc,Integer,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
external function Boolean ORDchrsum(var record ORVc,Integer);
external function Boolean SDVc_PasteArtCode(var record SDVc,Integer,Integer,var string,var string);
external procedure SDSumUp(var record SDVc);
external function Boolean SRVc_PasteArtCode(var record SRVc,Integer,Boolean,var string);
external procedure SRSumUp(var record SRVc);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure FillMaskVAR(string,string,string,Array string,Array string);
external procedure FillOneItemOneVAR(string,string,string,Array string,var Array string,Integer,Boolean);
external function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external function Boolean ORVc_PasteArtCode(var record ORVc,Integer,var string,var string,Boolean);
external function Boolean POVc_PasteArtCode(var record POVc,Integer,Boolean);
external function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external function Boolean QTVc_PasteArtCode(var record QTVc,Integer,var string,var string);
external function Boolean POQTVc_PasteArtCode(var record POQTVc,Integer,Boolean);
external function Boolean IntORVc_PasteArtCode(var record IntORVc,Integer,Boolean);
external function Boolean StockMovVc_PasteArtCode(var record StockMovVc,Integer,Integer,var array string);
external procedure PUSumUp(var record PUVc);
external procedure ORSumup(var record ORVc);
external procedure POSumup(var record POVc);
external procedure QTSumup(var record QTVc);
external procedure POQTSumup(var record POQTVc);
external procedure SumupIntOR(var record IntORVc,var val);
external procedure StockMovSumUp(var record StockMovVc);
external procedure POVc_PastePrice(var record POVc,Integer);

global
procedure PasteRowsToIVRemote(var record IVVc IVr,var Integer currow,array string incode,array val qty,Integer pos,Boolean TouchScreenLookf)
begin
  row IVVc IVrw;
  Integer i;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;
  Integer sernrf;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(IVr,currow,IVrw);
  for (i=0;i<pos;i=i+1) begin
  IVrw.ArtCode = incode[i];
  IVrw.Quant = qty[i];
  if (i>0 and currow<MatRowCnt(IVr)) then begin
    MatRowInsert(IVr,currow,IVrw);
  end;
  if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
    IVrw.Spec = INr.Name;
  end;
  MatRowPut(IVr,currow,IVrw);
  if (VBr.UseInfoFromRow==0) then begin
    if (IVVc_PasteArtCode(IVr,currow,warning,warning,TouchScreenLookf,sernrf)) then begin end;
  end else begin
    if (IVDchrsum(IVr,currow)) then begin end;
    IVDchsum(IVr,currow);
  end;
  currow = currow + 1;
  end;
  IVSumUp(IVr,true);
  return;
end;

global
procedure PasteRowsToORRemote(var record ORVc ORr,var Integer currow,array string incode,array val qty,Integer pos)
begin
  record INVc INr;
  row ORVc ORrw;
  Integer i;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(ORr,currow,ORrw);
  for (i=0;i<pos;i=i+1) begin
  ORrw.ArtCode = incode[i];
  ORrw.Quant = qty[i];
  if (i>0 and currow<MatRowCnt(ORr)) then begin
    MatRowInsert(ORr,currow,ORrw);
  end;
  if (ReadFirstItem(ORrw.ArtCode,INr,true,true)) then begin
    ORrw.Spec = INr.Name;
  end;
  MatRowPut(ORr,currow,ORrw);
  if (VBr.UseInfoFromRow==0) then begin
    if (ORVc_PasteArtCode(ORr,currow,warning,warning,true)) then begin end;
  end else begin
    if (ORDchrsum(ORr,currow)) then begin end;
    ORDchsum(ORr,currow);
  end;
  MatRowGet(ORr,currow,ORrw);
  if (ReadFirstItem(ORrw.ArtCode,INr,true,false)) then begin
    if ((INr.ExplodeRec!=0) and (nonblank(ORrw.Recepy))) then begin
      INr.Code = ORrw.ArtCode;
      if (ORVc_ExplodeRecepy(INr,ORrw.Quant,ORr,INr.Recepy,currow)) then begin
        MatRowGet(ORr,currow,ORrw);
        ORrw.Recepy = "";
        MatRowPut(ORr,currow,ORrw);
        INr.Code = ORrw.ArtCode;
      end;
    end;
  end;
  currow = currow + 1;
  end;
  ORSumUp(ORr);
  return;
end;

global
procedure PasteRowsToIVCashRemote(var record IVCashVc IVCashr,var Integer currow,array string incode,array val qty,Integer pos)
begin
  record INVc INr;
  row IVCashVc IVCashrw;
  Integer i;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record GeneralOptionBlock GenOptRec;
  Integer sernrf;

  BlockLoad(GenOptRec);
  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(IVCashr,currow,IVCashrw);
  for (i=0;i<pos;i=i+1) begin
  IVCashrw.ArtCode = incode[i];
  IVCashrw.Quant = qty[i];
  if (i>0 and currow<MatRowCnt(IVCashr)) then begin
    MatRowInsert(IVCashr,currow,IVCashrw);
  end;
  if (ReadFirstItem(IVCashrw.ArtCode,INr,false,true)) then begin //EBS edit, so name would be pasted without variety comment
    IVCashrw.Spec = INr.Name;
  end;
  MatRowPut(IVCashr,currow,IVCashrw);
  if (VBr.UseInfoFromRow==0) then begin
    if (IVCashVc_PasteArtCode(IVCashr,currow,false,warning,sernrf)) then begin end;
  end else begin
    if (IVCashDchrsum(IVCashr,currow,GenOptRec.UseDiscount)) then begin end;
    IVCashDchsum(IVCashr,currow);
  end;
  MatRowGet(IVCashr,currow,IVCashrw);
  currow = currow + 1;
  end;
  IVCashSumUp(IVCashr,true);
  return;
end;

global
procedure PasteRowsToStockMovRemote(var record StockMovVc StockMovr,var Integer currow,array string incode,array val qty,Integer pos,var array string aWarning)
begin
  row StockMovVc StockMovrw;
  Integer i;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(StockMovr,currow,StockMovrw);
  for (i=0;i<pos;i=i+1) begin
  StockMovrw.ArtCode = incode[i];
  StockMovrw.OrdQuant = qty[i];
  if (i>0 and currow<MatRowCnt(StockMovr)) then begin
    MatRowInsert(StockMovr,currow,StockMovrw);
  end;
  if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)) then begin
    StockMovrw.Spec = INr.Name;
  end;
  MatRowPut(StockMovr,currow,StockMovrw);
  if (VBr.UseInfoFromRow==0) then begin
    if (StockMovVc_PasteArtCode(StockMovr,currow,1,aWarning)) then begin end;
  end else begin
//    StockMovDchrsum(StockMovr,currow);
//    StockMovDchrum(StockMovr,currow);
  end;
  currow = currow + 1;
  end;
  StockMovSumUp(StockMovr);
  return;
end;

global
procedure PasteRowsToStockTakeRemote(var record StockTakeVc StockTaker,var Integer currow,array string incode,array val qty,Integer pos)
begin
  row StockTakeVc StockTakerw;
  Integer i;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(StockTaker,currow,StockTakerw);
  for (i=0;i<pos;i=i+1) begin
    StockTakerw.ArtCode = incode[i];
    StockTakerw.Qty = qty[i];
    if (i>0 and currow<MatRowCnt(StockTaker)) then begin
      MatRowInsert(StockTaker,currow,StockTakerw);
    end;
    if (ReadFirstItem(StockTakerw.ArtCode,INr,true,true)) then begin
      StockTakerw.Spec = INr.Name;
    end;
    MatRowPut(StockTaker,currow,StockTakerw);
    if (VBr.UseInfoFromRow==0) then begin
      if (StockTakeVc_PasteArtCode(StockTaker,currow,1,warning)) then begin end;
    end else begin
  //    StockTakeDchrsum(StockTaker,currow);
  //    StockTakeDchrum(StockTaker,currow);
    end;
    currow = currow + 1;
  end;
//  StockTakeSumUp(StockTaker);
  return;
end;

global
procedure PasteRowsToQTRemote(var record QTVc QTr,var Integer currow,array string incode,array val qty,Integer pos)
begin
  row QTVc QTrw;
  Integer i;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(QTr,currow,QTrw);
  for (i=0;i<pos;i=i+1) begin
  QTrw.ArtCode = incode[i];
  QTrw.Quant = qty[i];
  if (i>0 and currow<MatRowCnt(QTr)) then begin
    MatRowInsert(QTr,currow,QTrw);
  end;
  if (ReadFirstItem(QTrw.ArtCode,INr,true,true)) then begin
    QTrw.Spec = INr.Name;
  end;
  MatRowPut(QTr,currow,QTrw);
  if (VBr.UseInfoFromRow==0) then begin
    if (QTVc_PasteArtCode(QTr,currow,warning,warning)) then begin end;
  end else begin
    if (QTDchrsum(QTr,currow,0)) then begin end;
    QTDchsum(QTr,currow);
  end;
  currow = currow + 1;
  end;
  QTSumUp(QTr);
  return;
end;

global
procedure PasteRowsToPURemote(var record PUVc PUr,var Integer currow,array string incode,array val qty,Integer pos)
begin
  row PUVc PUrw;
  Integer i;
  string 255 warning,inwarn;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(PUr,currow,PUrw);
  for (i=0;i<pos;i=i+1) begin
  PUrw.ArtCode = incode[i];
  PUrw.Quant = qty[i];
  if (i>0 and currow<MatRowCnt(PUr)) then begin
    MatRowInsert(PUr,currow,PUrw);
  end;
  if (ReadFirstItem(PUrw.ArtCode,INr,true,true)) then begin
    PUrw.Spec = INr.Name;
  end;
  MatRowPut(PUr,currow,PUrw);
// Very special calculations, has to paste...
//  if (VBr.UseInfoFromRow==0) then begin
    if (PUVc_PasteArtCode(PUr,currow,warning,inwarn)) then begin end;
//  end else begin
//    PUDchrsum(PUr,currow);
//  end;
  currow = currow + 1;
  end;
  PUSumUp(PUr);
  return;
end;

// EVS: DOL-1
procedure POVc_PastePlanShipRow(var record POVc POr, Integer rownr)
begin
  row POVc POrw;
  record PlanDeliveryBlock PlanDelRec;
  LongInt week;
  date d;

  BlockLoad(PlanDelRec);
  MatRowGet(POr,rownr,POrw);
  switch (PlanDelRec.FieldType) begin
    case 1:  /* date */
      d = POrw.PlanShipRow;
      POrw.PlanShipRow = d;
    case 2:  /* week number (nn) */
      week = POrw.PlanShipRow;
      POrw.PlanShipRow = week;
    case 3:  /* week number (yynn */
      week = POrw.PlanShipRow;
      POrw.PlanShipRow = week;
      if (len(POrw.PlanShipRow)<4) then begin
        POrw.PlanShipRow = "0" & POrw.PlanShipRow;
      end;
      if (len(POrw.PlanShipRow)>4) then begin
        POrw.PlanShipRow = Left(POrw.PlanShipRow,4);
      end;
  end;
  MatRowPut(POr,rownr,POrw);

  return;
end;
// :EVS

global
procedure EBS_PasteRowsToPORemote(var record POVc POr,var Integer currow,array string incode,array val qty,val price, date plandeldate,Integer pos)
begin
  row POVc POrw;
  row POVc prevPOrw;
  Integer i;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;
  Integer poi,porwcnt;
  Boolean prevrowf;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(POr,currow,POrw);
  if (currow<MatRowCnt(POr)) then begin
    if (currow>0) then begin
      MatRowGet(POr,currow-1,prevPOrw);
      prevrowf = true;
    end;
  end;
  for (i=0;i<pos;i=i+1) begin
    POrw.ArtCode = incode[i];
    POrw.Quant = qty[i];
    if (i>0 and currow<MatRowCnt(POr)) then begin
      MatRowInsert(POr,currow,POrw);
    end;
/*
done in POVc_PasteArtCode
    if (ReadFirstItem(POrw.ArtCode,INr,true,true)) then begin
      POrw.Spec = INr.Name;
    end;
*/
    MatRowPut(POr,currow,POrw);
    if (VBr.UseInfoFromRow==0) then begin
      if (POVc_PasteArtCode(POr,currow,true)) then begin end;
      MatRowGet(POr,currow,POrw);
      POrw.Quant = qty[i];
      MatRowPut(POr,currow,POrw);
      POVc_PasteQuant(POr,currow);
      MatRowGet(POr,currow,POrw);
    end else begin
/*
    if (prevrowf) then begin
      if (POVc_PasteArtCode(POr,currow,true)) then begin end;
      MatRowGet(POr,currow,POrw);
      POrw.Price = prevPOrw.Price;
      MatRowPut(POr,currow,POrw);
      if (PODchrsum(POr,currow)) then begin end;
    end else begin
      if (POVc_PasteArtCode(POr,currow,true)) then begin end;
    end;
*/
      if (POVc_PasteArtCode(POr,currow,true)) then begin end;
      MatRowGet(POr,currow,POrw);
      POrw.Quant = qty[i];
      MatRowPut(POr,currow,POrw);
      POVc_PasteQuant(POr,currow);
      MatRowGet(POr,currow,POrw);
    end;
    // EVS: DOL-1
    if (price != blankval) then begin
      POrw.Price = price;
      MatRowPut(POr,currow,POrw);
      POVc_PastePrice(POr,currow);
      MatRowGet(POr,currow,POrw);
    end;
    if (nonblankdate(plandeldate)) then begin
      POrw.PlanShipRow = plandeldate;
      MatRowPut(POr,currow,POrw);
      POVc_PastePlanShipRow(POr,currow);
    end;
    // :EVS
    currow = currow + 1;
  end;
//  POSumUp(POr);
  return;
end;

global
procedure PasteRowsToIntORRemote(var record IntORVc IntORr,var Integer currow,array string incode,array val qty,Integer pos)
begin
  row IntORVc IntORrw;
  Integer i;
  val v;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(IntORr,currow,IntORrw);
  for (i=0;i<pos;i=i+1) begin
  IntORrw.ArtCode = incode[i];
  IntORrw.Quant = qty[i];
  if (i>0 and currow<MatRowCnt(IntORr)) then begin
    MatRowInsert(IntORr,currow,IntORrw);
  end;
  if (ReadFirstItem(IntORrw.ArtCode,INr,true,true)) then begin
    IntORrw.Spec = INr.Name;
  end;
  MatRowPut(IntORr,currow,IntORrw);
  if (VBr.UseInfoFromRow==0) then begin
    if (IntORVc_PasteArtCode(IntORr,currow,true)) then begin end;
    if (IntORchrsum(IntORr,currow)) then begin end;
  end else begin
    if (IntORchrsum(IntORr,currow)) then begin end;
//    IntORchsum(IntORr,currow);
  end;
  currow = currow + 1;
  end;
  SumupIntOR(IntORr,v);
  IntORr.Total = v;
  return;
end;

global
procedure PasteRowsToPOQTRemote(var record POQTVc POQTr,var Integer currow,array string incode,array val qty,Integer pos)
begin
  row POQTVc POQTrw;
  Integer i;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(POQTr,currow,POQTrw);
  for (i=0;i<pos;i=i+1) begin
    POQTrw.ArtCode = incode[i];
    POQTrw.Quant = qty[i];
    if (i>0 and currow<MatRowCnt(POQTr)) then begin
      MatRowInsert(POQTr,currow,POQTrw);
    end;
    if (ReadFirstItem(POQTrw.ArtCode,INr,true,true)) then begin
      POQTrw.Spec = INr.Name;
    end;
    MatRowPut(POQTr,currow,POQTrw);
    if (VBr.UseInfoFromRow==0) then begin
      if (POQTVc_PasteArtCode(POQTr,currow,false)) then begin end;
      MatRowGet(POQTr,currow,POQTrw);
      POQTrw.Quant = qty[i];
      MatRowPut(POQTr,currow,POQTrw);
      POQTVc_PasteQuant(POQTr,currow);
      MatRowGet(POQTr,currow,POQTrw);
    end else begin
      if (POQTDchrsum(POQTr,currow)) then begin end;
      MatRowGet(POQTr,currow,POQTrw);
      POQTrw.Quant = qty[i];
      MatRowPut(POQTr,currow,POQTrw);
      POQTVc_PasteQuant(POQTr,currow);
      MatRowGet(POQTr,currow,POQTrw);
//    POQTDchsum(POQTr,currow);
    end;
    currow = currow + 1;
  end;
  POQTSumup(POQTr);
  return;
end;

global
procedure PasteRowsToSDRemote(var record SDVc SDr,var Integer currow,array string incode,array val qty,Integer pos)
begin
  row SDVc SDrw;
  Integer i;
  val v;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(SDr,currow,SDrw);
  for (i=0;i<pos;i=i+1) begin
  SDrw.ArtCode = incode[i];
  SDrw.Qty = qty[i];
  if (i>0 and currow<MatRowCnt(SDr)) then begin
    MatRowInsert(SDr,currow,SDrw);
  end;
  if (ReadFirstItem(SDrw.ArtCode,INr,true,true)) then begin
    SDrw.Spec = INr.Name;
  end;
  MatRowPut(SDr,currow,SDrw);
  if (VBr.UseInfoFromRow==0) then begin
    if (SDVc_PasteArtCode(SDr,currow,1,warning,warning)) then begin end;
  end else begin
//    SDDchrsum(SDr,currow);
//    SDDchsum(SDr,currow);
  end;
  currow = currow + 1;
  end;
  SDSumUp(SDr);
  return;
end;

global
procedure PasteRowsToSRRemote(var record SRVc SRr,var Integer currow,array string incode,array val qty,Integer pos)
begin
  row SRVc SRrw;
  Integer i;
  val v;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(SRr,currow,SRrw);
  for (i=0;i<pos;i=i+1) begin
  SRrw.ArtCode = incode[i];
  SRrw.Qty = qty[i];
  if (i>0 and currow<MatRowCnt(SRr)) then begin
    MatRowInsert(SRr,currow,SRrw);
  end;
  if (ReadFirstItem(SRrw.ArtCode,INr,true,true)) then begin
    SRrw.Spec = INr.Name;
  end;
  MatRowPut(SRr,currow,SRrw);
  if (VBr.UseInfoFromRow==0) then begin
    if (SRVc_PasteArtCode(SRr,currow,true,warning)) then begin end;
  end;
  currow = currow + 1;
  end;
  SRSumUp(SRr);
  return;
end;

global
procedure PasteRowsToProdRemote(var record ProdVc Prodr,var Integer currow,string fieldname,array string incode,array val qty,Integer pos)
begin
  row ProdVc Prodrw;
  Integer i;
  val v;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(Prodr,currow,Prodrw);
  for (i=0;i<pos;i=i+1) begin
	  Prodrw.Item = incode[i];
	  switch (fieldname) begin
	    case "InQty": Prodrw.InQty = qty[i];
	    case "OutQty": Prodrw.OutQty = qty[i];
	  end;
	  if (i>0 and currow<MatRowCnt(Prodr)) then begin
	    MatRowInsert(Prodr,currow,Prodrw);
	  end;
	  if (ReadFirstItem(Prodrw.Item,INr,true,true)) then begin
	    Prodrw.Comment = INr.Name;
	  end;
	  MatRowPut(Prodr,currow,Prodrw);
	  if (VBr.UseInfoFromRow==0) then begin
	    ProdVc_PasteItem(Prodr,currow);
	  end else begin
	//    ProdDchrsum(Prodr,currow);
	//    ProdDchsum(Prodr,currow);
	  end;
	  currow = currow + 1;
  end;
  ProdSumup(Prodr);
  return;
end;

global
procedure PasteRowsToProdOperationRemote(var record ProdOperationVc ProdOpr,var Integer currow,string fieldname,array string incode,array val qty,Integer pos)
begin
  row ProdOperationVc ProdOprw;
  Integer i;
  val v;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(ProdOpr,currow,ProdOprw);
  for (i=0;i<pos;i=i+1) begin
	  ProdOprw.Item = incode[i];
	  switch (fieldname) begin
	    case "InQty": ProdOprw.InQty = qty[i];
	    case "OutQty": ProdOprw.OutQty = qty[i];
	  end;
	  if (i>0 and currow<MatRowCnt(ProdOpr)) then begin
	    MatRowInsert(ProdOpr,currow,ProdOprw);
	  end;
	  if (ReadFirstItem(ProdOprw.Item,INr,true,true)) then begin
	    ProdOprw.Comment = INr.Name;
	  end;
	  MatRowPut(ProdOpr,currow,ProdOprw);
	  if (VBr.UseInfoFromRow==0) then begin
	    ProdOperationVc_PasteItem(ProdOpr,currow);
	  end else begin
	//    ProdOpDchrsum(ProdOpr,currow);
	//    ProdOpDchsum(ProdOpr,currow);
	  end;
	  currow = currow + 1;
  end;
  ProdOperationSumup(ProdOpr);
  return;
end;

global
procedure PasteRowsToRecRemote(var record RecVc Recr,var Integer currow,string fieldname,array string incode,array val qty,Integer pos)
begin
  row RecVc Recrw;
  Integer i;
  val v;
  string 255 warning;
  record SysFormatBlock SysFormatRec;
  record VarietyBlock VBr;
  record INVc INr;

  BlockLoad(VBr);
  BlockLoad(SysFormatRec);
  MatRowGet(Recr,currow,Recrw);
  for (i=0;i<pos;i=i+1) begin
	  Recrw.Item = incode[i];
	  switch (fieldname) begin
	    case "InQty": Recrw.InQty = qty[i];
	    case "OutQty": Recrw.OutQty = qty[i];
	  end;
	  if (i>0 and currow<MatRowCnt(Recr)) then begin
	    MatRowInsert(Recr,currow,Recrw);
	  end;
	  if (ReadFirstItem(Recrw.Item,INr,true,true)) then begin
	    Recrw.Comment = INr.Name;
	  end;
	  MatRowPut(Recr,currow,Recrw);
	  if (VBr.UseInfoFromRow==0) then begin
	    RecVc_PasteItem(Recr,currow);
	  end else begin
	//    RecDchrsum(Recr,currow);
	//    RecDchsum(Recr,currow);
	  end;
	  currow = currow + 1;
  end;
  RecSumup(Recr);
  return;
end;

global
function Boolean MATVARINSClassOnOKWindowPaste(var string tstr,var string sepstr,var string msk,var string mskrep,var string varsubset,
                 var Array string maskvar2,var Array string maskvarsz2,var Array string maskvar,var Array string maskvarsz,
                 var Array string varsx,var Array string varsy)
begin
  Boolean res;

  res = false;
  if (FindItemVAR(tstr,sepstr,msk,mskrep,varsubset)) then begin
    FillMaskVAR(tstr,sepstr,msk,maskvar2,maskvarsz2);
    FillMaskVAR(tstr,sepstr,msk,maskvar,maskvarsz);//FillMaskVAR(tstr,sepstr,mskrep,maskvar,maskvarsz); //JJ?? why mskrep here and msk above
    FillOneItemOneVAR(tstr,"",varsubset,maskvar,varsx,1,true);
    FillOneItemOneVAR(tstr,"",varsubset,maskvar,varsy,2,true);
    res = true;
  end;
  MATVARINSClassOnOKWindowPaste = res;
  return;
end;

global
function string 255 UpWindDI_IN2SClass(string subset,Integer topm)
begin
  string 255 res;
  record MainStockBlock MSb;
  Array string 255 ac;
  string 255 tstr;
  record DIVc DIr;

  DIr.Code = subset;
  if (topm==1) then begin
    if (ReadFirstMain(DIr,1,true)) then begin
      SplitEclass(DIr.DispGroups,ac);
      res = ac[0];
    end;
  end;
  if ((blank(res)) or (topm==0)) then begin
    BlockLoad(MSb);
    res = MSb.StartClass;
  end;
  UpWindDI_IN2SClass = res;
  return;
end;

global
procedure IN2SClassOnOKWindowExecute(string subset,var Array string adi,var Integer acnt)
begin
  record DIVc DIr;
  Boolean found;
  string 255 ckey;
  string 255 tstr;

  found = true;
  ckey = "DICode:";
  ckey = ckey & subset;
  while (LoopKey(ckey,DIr,1,found)) begin
    if (found) then begin
      tstr = DIr.Code;
      tstr = tstr & "   ";
      if (nonblank(DIr.Name)) then begin
        tstr = DIr.Name;
      end else begin
        tstr = tstr & DIr.Name;
      end;
     adi[acnt] = tstr;
     acnt = acnt + 1;
    end;
  end;
  return;
end;

global
function string 255 GetSelDI_IN2SClass(string startdi,LongInt Sel,var Array string adi,var Integer acnt)
begin
  string 255 res;
  string 255 ckey;
  string 255 t2;
  record DIVc DIr;
  Integer i;
  Boolean found;

  res = startdi;
  if (Sel<0) then begin
    goto LGetSelDI_IN2SClass;
  end;
  ckey = "DICode:";
  ckey = ckey & startdi;
  found = true;
  while (LoopKey(ckey,DIr,1,found)) begin
    if (Sel==i) then begin
      res = DIr.Code;
      goto LGetSelDI_IN2SClass;
    end;
    i= i + 1;
  end;
LGetSelDI_IN2SClass:;
  if (nonblank(res)) then begin
    IN2SClassOnOKWindowExecute(res,adi,acnt);
  end;
  GetSelDI_IN2SClass = res;
  return;
end;

global
function string 255 UpWindDI_ActType2SClass(string subset,Integer topm)
begin
  string 255 res;

  res = "";
  UpWindDI_ActType2SClass = res;
  return;
end;

global
function string 255 GetSelDI_ActType2SClass(string startdi,LongInt Sel,string seltag)
begin
  string 255 res;
  string 255 ckey;
  string 255 t2;
  record ActTypeGrVc ATGr;
  Integer i;
  Boolean found;

  res = startdi;
  if (Sel<0) then begin
    goto LGetSelDI_ActType2SClass;
  end;
  found = true;

  ATGr.Code = seltag;
  if (ReadFirstKey("Code",ATGr,1,found)) begin
    if (seltag==ATGr.Code) then begin
      res = ATGr.Code;
      goto LGetSelDI_ActType2SClass;
    end;
  end;

LGetSelDI_ActType2SClass:;
  GetSelDI_ActType2SClass = res;
  return;
end;

global
procedure ActType2SClassOnOKWindowDo(string subset,Array string adi,Array string aci,var Integer acnt)
begin
  record ActTypeGrVc ATGr;
  Boolean found;
  string 255 tstr;

  found = true;
  while (LoopKey("Code",ATGr,1,found)) begin
    if (found) then begin
      tstr = ATGr.Code;
      if (nonblank(ATGr.Comment)) then begin
        tstr = tstr & "   ";
        tstr = ATGr.Comment;
      end;
      adi[acnt] = tstr;
      aci[acnt] = ATGr.Code;
      acnt = acnt + 1;
    end;
  end;
  return;
end;

global
function string 255 UpWindDI_Acc2SClass(string subset,Integer topm)
begin
  string 255 res;
  record CYBlock CYb;
  Array string 255 ac;
  string 255 tstr;
  record AccClassVc ACr;

  ACr.Code = subset;
  if (topm==1) then begin
    if (ReadFirstMain(ACr,1,true)) then begin
      SplitEclass(ACr.AccClasses,ac);
      res = ac[0];
    end;
  end;
  if ((blank(res)) or (topm==0)) then begin
    BlockLoad(CYb);
    res = CYb.AccClass;
  end;
  UpWindDI_Acc2SClass = res;
  return;
end;

global
procedure Acc2SClassOnOKWindowDo(string subset,var Array string adi,var Integer acnt)
begin
  record AccClassVc ACr;
  Boolean found;
  string 255 ckey;
  string 255 tstr;

  found = true;
  ckey = "ACCode:";
  ckey = ckey & subset;
  while (LoopKey(ckey,ACr,1,found)) begin
    if (found) then begin
      tstr = ACr.Code;
      tstr = tstr & "   ";
      if (nonblank(ACr.Comment)) then begin
        tstr = ACr.Comment;
      end else begin
        tstr = tstr & ACr.Comment;
      end;
     adi[acnt] = tstr;
     acnt = acnt + 1;
    end;
  end;
  return;
end;

global
function string 255 GetSelDI_Acc2SClass(string startac,LongInt Sel,var Array string adi,var Integer acnt)
begin
  string 255 res;
  string 255 ckey;
  string 255 t2;
  record AccClassVc ACr;
  Integer i;
  Boolean found;

  res = startac;
  if (Sel<0) then begin
    goto LGetSelDI_Acc2SClass;
  end;
  ckey = "ACCode:";
  ckey = ckey & startac;
  found = true;
  while (LoopKey(ckey,ACr,1,found)) begin
    if (Sel==i) then begin
      res = ACr.Code;
      goto LGetSelDI_Acc2SClass;
    end;
    i= i + 1;
  end;
LGetSelDI_Acc2SClass:;
  if (nonblank(res)) then begin
    Acc2SClassOnOKWindowDo(res,adi,acnt);
  end;
  GetSelDI_Acc2SClass = res;
  return;
end;

global
procedure Obj2SClassOnOKWindowDo(string subset,var Array string adi,var Integer acnt)
begin
  record OTVc OTr;
  Boolean found;
  string 255 ckey;
  string 255 tstr;

  found = true;
  OTr.Code = subset;
  while (LoopKey("Code",OTr,1,found)) begin
    if (nonblank(subset)) then begin
      if (OTr.Code!=subset) then begin
        found = false;
      end;
    end;
    if (found) then begin
      tstr = OTr.Code;
      tstr = tstr & "   ";
      if (nonblank(OTr.Comment)) then begin
        tstr = OTr.Comment;
      end else begin
        tstr = tstr & OTr.Comment;
      end;
     adi[acnt] = tstr;
     acnt = acnt + 1;
    end;
  end;
  return;
end;

global
function string 255 GetSelDI_Obj2SClass(string startot,LongInt Sel,var Array string adi,var Integer acnt)
begin
  string 255 res;
  string 255 t2;
  record OTVc OTr;
  Integer i;
  Boolean found;

  res = startot;
  if (Sel<0) then begin
    goto LGetSelDI_Obj2SClass;
  end;
  found = true;
  OTr.Code = startot;
  while (LoopKey("Code",OTr,1,found)) begin
    if (Sel==i) then begin
      res = OTr.Code;
      goto LGetSelDI_Obj2SClass;
    end;
    i= i + 1;
  end;
LGetSelDI_Obj2SClass:;
  Obj2SClassOnOKWindowDo(res,adi,acnt);
  GetSelDI_Obj2SClass = res;
  return;
end;
