external inner function Boolean CompaniesInClientMode();
external inner function Boolean ProductInDemoMode();
remote inner function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable();
external inner function Boolean IsCloudControllerClient();
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner procedure JobRClass_LIT();
external inner function string 60 UserDefined(string,string);
external procedure EBS_ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var boolean,var boolean,var boolean,var array string,var integer); //EBS edit
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
external inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote inner procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote inner procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote inner procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote inner function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();

external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions LIT
external inner function Boolean DisplayLoginKeyPad_LIT();
external inner function string 255 VATZoneEditFieldLabelLIT(Integer);
external inner function real VATZoneButtonsLabelsLIT(real,real,real,real);
external inner procedure LoginButtons2_LIT(Real,Real);
external inner procedure FORMDEF_LIT();
external inner function string 255 DemoMsgWClassTitle_LIT(Boolean,Boolean);
external inner procedure TBEClassDef_LIT();
external inner function string 255 VATZoneNameLIT();
external inner procedure TSERW_LIT();
external inner procedure TSERWNT_LIT();
external inner procedure TSERWTouch_LIT();
external inner procedure TSERWTEST_LIT();
external inner procedure INVFORM_LIT(Boolean);
external inner procedure DisplayRecordDetails_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_LIT(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_LIT();
external inner function string 255 ResMonWClassWindowTitle_LIT();
external inner function string 255 RTMonWClassWindowTitle_LIT();
external inner procedure SetupNightAuditWindowControls_LIT(Boolean);
external inner procedure CURClassDefinitionLIT();
external inner function real DrawPaymentModesButtons_IV_LIT(real);
external inner function real FunctionButtons_LIT(string);
external inner procedure CreditCardWindowHeader_LIT(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_LIT(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_LIT(Real);
external inner procedure CreditCardWindowDeliveryDetail_LIT(Real);
external inner function real DrawPaymentModesButtons_LIT();
external inner procedure DrawBarMenuTiles_LIT(string);
external inner procedure DrawRestPMOtherPay_LIT();
external inner procedure DisplayRecordDetailsRA_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_LIT(var integer,var integer);
external inner procedure OKCancel_LIT();
external inner procedure DefineElearningURLCacheLClass_LIT();
external inner procedure DefineElearningURLCacheDClass_LIT();
external inner function real TravelLogDeductions_LIT(real,real);
external inner procedure LoginButtons_LIT(Real);
external inner procedure FORMDEF2_LIT();
external inner procedure FORMDEF3_LIT();
external inner procedure ARS2RClass_LIT();
external inner procedure ALLVATRClass_LIT();

external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasServerInCloud();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasPaymentGateway();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean UsePostOKButton();
external inner function Boolean HasBankImport();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasWorkFlowOverview();
external inner function Boolean ReadNPTSWindowData(string,string,longint,string,string,Date,Time,var Boolean,var string,var string,var string,var record POSButtonsVc);
external inner procedure DrawPOSInterface2_LIT(string,string,record POSButtonsVc,string,Integer,Integer);

remote procedure DOLGetSalesmen(string, var array string, var integer);

procedure dummy()//##ii
begin//##ii
  SetLangMode(LangLithuanian,"LIT",2);//##ii
  return;//##ii
end;//##ii
//##ii

window ORLClass:3
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos,rn;

  WindowBegin("Užsakymai",ORLClass,CGmlist,-);
  SpawnClass(ORDClass);
  SetWRect(20,80,900,298);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  FormName(PrintORL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Nr.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  pos = 111;
  if (HasModIN) then begin
    RlColKey(pos,pos,"Išs.",ShipMark,false,ShipFlag);
    pos = pos + 32;
  end;
  if (HasModSL) then begin
    RlColKey(pos,pos,"Fakt.",InvMark,false,InvFlag);
    pos = pos + 32;
  end;
  RlCol(pos,pos,"Užd.",Closed,false);
  pos = pos + 32;
  RlColKey(pos,pos,"užs. data",OrdDate,false,OrdDate);
  pos = pos + 80;
  if (HasMultiLocations) then begin
    RlCol   (pos,pos,"Patalpa",Location,false);
    pos = pos + 60;
  end;
  RlColKey(pos,pos,"Pirk. užs. Nr.",CustOrdNr,false,CustOrdNr);
  pos = pos + 80;
//EBS-->
  RlColKey(pos,pos,"Pard.",SalesMan,false,SalesMan);
  pos = pos + 50;
//EBS<--
  RlColKey(pos,pos,"Pirkėjas",CustCode,false,CustCode);
  pos = pos + 60;
  RlColKey(pos,pos,"Pavadinimas",Addr0,false,Name);
  if (IsEnterprise) then begin
    if (AcceptanceStatusColumnTest("ORVc")) then begin
      CalculatedColumn(-240,-240,"Patv.","ORLClassAcceptanceStatus",false);
    end;
    RlColKey(-200,-200,"Klasė",OrderClass,false,OrderClass);
    RlColKey(-155,-155,"Viso",Sum4,true,Sum4);
    RlCol(-75,-75,"Downpaid",DownPaySent,true);
  end else begin
    RlColKey(-55,-55,"Viso",Sum4,true,Sum4);
  end;
  if (HasLimitedAccess) then begin
  BrowseSubsetButton(-40,-15);
  end;
  SearchField("Ieškoti");
  if (GuiType==kGuiMetro) then begin
    rn = 0;
    RowMenuBegin("");
    if (HasModIN) then begin
      RowMenuItem(rn,"Sukurti Siuntimą",'L','L',4300,"SHFromORLsm"); rn = rn + 1;
    end;
    RowMenuItem(rn,"Sukurti Faktūrą",'L','L',4300,"IVFromORLsm"); rn = rn + 1;
    if (HasDownpayments) then begin
      RowMenuItem(rn,"Sukurti Išakst. apm. faktūrą",'o','o',4300,"DownPayFromORLsm"); rn = rn + 1;
    end;
    RowMenuItem(rn,"Užsakymo būklė",'r','r',4300,"ORStatusORLsm"); rn = rn + 1;
    if (HasModPO) then begin
      RowMenuItem(rn,"Sukurti Pirkimo užsakymą",' ',' ',4300,"POFromORLsm"); rn = rn + 1;
    end;
    if (HasModCRM) then begin
      RowMenuItem(rn,"Sukurti veiklą",'c','c',4300,"ActFromORLsm"); rn = rn + 1;
    end;
    if (IsEnterprise) then begin
      RowMenuItem(rn,"Nustatyti užsakymą faktūruojamu",' ',' ',4300,"ORToInvORLsm"); rn = rn + 1;
    end;
    EndRowMenu;
  end else begin
    SpecialMenu("Užsakymo būklė",'r',3,"ORStatusORLsm");
    if (IsEnterprise) then begin
      SpecialMenu("Faktūruoti užsakymą",' ',6,"ORToInvORLsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
		if (HasModIN) then begin
		SpecialMenu("Sukurti siuntimą",'L',0,"SHFromORLsm");
		end;
		SpecialMenu("Sukurti faktūrą",'F',1,"IVFromORLsm");
    if (HasDownpayments) then begin
		SpecialMenu("Sukurti išankstinio apmok. faktūrą",'o',2,"DownPayFromORLsm");
		end;
		if (HasModPO) then begin
		SpecialMenu("Sukurti pirkimo užsakymą",' ',4,"POFromORLsm");
		end;
		if (HasModCRM) then begin
		SpecialMenu("Sukurti veiklą",'c',5,"ActFromORLsm");
		end;
  end;
  EndWindow;
end;

window ORDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs,h5,flipnr,width;
  string 255 label;
  Integer rn;

  WindowBegin("Užsakymas",ORDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  ActiveFieldOnNew("CustCode");
  CommunicateButton;
  Tile(0,100,false,"",CustCode); //EBS edit
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Pirkėjas",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
  EditField(h,vm=(v+=20),125,"Oficialus Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  CheckBox(h4=-80,v,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,vm=(v+=20),0,"OK",OKFlag);
  end;
  ColourPushButton(400,v,400+100,v+50,"DOLORDClassNumpadOpen","Rezervuoti iki",2);
  ColourPushButton(400+120,v,400+120+120,v+50,"DOLORDClassCreateIVCashRec","Sukurti POS faktūrą",2); // EVS: DOL-68
//  CheckBox(h+120,vm,0,"Closed",Closed);
//  CheckBox(h+240,vm,0,"Reserved",Reserved);
  TileButton(1,"Terminai");
  TileButton(2,"Prekės");
  TileButton(3,"Valiuta");
  TileButton(4,"Siunt. terminai");
  TileButton(5,"Kainodara");
  TileButton(6,"Fakt. adr.");
  TileButton(7,"Siunt. adr.");
  Tile(1,110,false,"1",OrdDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Data",Normal,OrdDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Mok. terminas",Normal,PayDeal,false,PDSClass);
  EditField(h1,v+=vs,82,"Plan. siuntimas",Normal,PlanShip,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Siuntimo data",Normal,DespatchDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Siuntimo laikas",Normal,DespatchTime,false,PasteCurTime);
  EditField(h2,v=vm,135,"Mūsų nuor.",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Perspėjimas",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Nuoroda",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Pirk. užs. Nr.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
//EBS-->
  // if (StandardHansa==false) then begin
  // EditField(h3,v+=vs,80,"Projektas",Normal,PRCode,false,PRSClass);
  // end;
  EditField(h3,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
//EBS<--
  EditField(h3,v+=vs,80,"Užsak. klasė",Normal,OrderClass,false,OrderClassSClass);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Užsak. tipas",Normal,OrderType,false,SetSClass);
    EditField(h3,v+=vs,80,"Pard. sutartis",Normal,ORCONr,false,ORCOSClass);
  end;
  CheckBox(h4,v=6,0,"Uždarytas",Closed);
  CheckBox(h4,v+=16,0,"Rezervuotas",Reserved);
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(55,-41,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  if (UseTaxTemplatesforTaxCalc==false) then begin
  if (UserCanAction("ViewCostPrice",true)) then begin
    EditField(160,-41,70,"BP %",Normal,GPProc,true,0);
    EditField(160,-21,70,"Viso BP",ViewOnly,TotGP,true,0);
  end;
  EditField(290,-41,70,"Mok. 2",ViewOnly,TAX2Sum,true,0);
  EditField(290,-21,70,"Pap. Mok.",ViewOnly,TAX1Sum,true,0);
  EditField(410,-41,100,"PVM",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(290,-41,70,"BP %",Normal,GPProc,true,0);
      EditField(290,-21,70,"Viso BP",ViewOnly,TotGP,true,0);
    end;
    EditField(410,-41,100,"Mok.",ViewOnly ,Sum3,true,0);
  end;
  EditField(410,-21,100,"Suma",ViewOnly,BaseSum4,true,0);
  EditField(-150,-41,100,"Tarp. suma",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,100,"VISO",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-49,-,200);
  MatTypedRow(stp);
  flipnr = 0;
  Flip(flipnr); flipnr = flipnr + 1;
  MatText(t=9,32,"Tarp. suma",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-80,"Suma",0,-1,ViewOnly,0,Sum,true,0);
  MatText(t=17,32,"Antraštė",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t=1,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Kiekis",0,Quant,true,0);
  t = 1;
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0);
  end;
    EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=10,32,"Spausdinant, ši ir toliau einančios eilutės bus paslėptos",false);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Percepcijos mok.",true);
  MatCol(t,132,"",0,Region,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(t=1,194,"Aprašymas",0,Spec,false,0);
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vieneto kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"sąsk.",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Objektas",0,Objects,false,ObjSClass);
    MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-184,"sąsk.",0,SalesAcc,false,AccSClass);
    MatCol(t,-124,"Objektas",0,Objects,false,ObjSClass);
    MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"sąsk.",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Objektas",0,Objects,false,ObjSClass);
    MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-184,"sąsk.",0,SalesAcc,false,AccSClass);
    MatCol(t,-124,"Objektas",0,Objects,false,ObjSClass);
    MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,344,"Užsakymo tipas",0,OrderType,false,SetSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Savikaina",0,BasePrice,true,0);
    MatCol(t,-70,"BP",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Vieneto kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
    if (UserCanAction("ViewCostPrice",true)) then begin
     MatCol(t,-245,"Vnt. kaina",0,Price,true,0);
     MatCol(t,-175,"%",0,vRebate,true,0);
     MatCol(t,-140,"Savikaina",0,BasePrice,true,0);
     MatCol(t,-70,"BP",0,rowGP,true,0);
   end else begin
    MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Apraš.",0,Spec,false,0);
  MatCol(t,-300,"Pardavėjas",0,Salesmen,false,UserSClass);
  MatCol(t,-236,"Siunt. 1",0,Shipd1,true,0);
  MatCol(t,-184,"Siunt. 2",0,Shipd2,true,0);
  MatCol(t,-132,"Faktūruota",0,Invd,true,0);
  MatCol(t,-80,"Ruošinys",0,Recepy,false,RecSClass);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraš.",0,Spec,false,0);
  MatCol(t,-290,"Siunt. 1",0,Shipd1,true,0);
  MatCol(t,-220,"Siunt. 2",0,Shipd2,true,0);
  MatCol(t,-150,"Faktūruota",0,Invd,true,0);
  MatCol(t,-80,"Ruošinys",0,Recepy,false,RecSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-290,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. siunt.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Kainos faktorius",0,PriceFactor,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-290,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. siunt.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Kainos faktorius",0,PriceFactor,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Siuntimo pažyma",0,ShipNote,false,0);
  MatCol(t,-210,"Patalpa",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-145,"Pozicija",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Šaltinis",0,Source,true,SourceSClass);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Siuntimo žinutė",0,ShipNote,false,0);
  MatCol(t,-210,"Patalpa",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-145,"Pozicija",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Šaltinis",0,Source,true,SourceSClass);
  if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Surink. data",0,PickingDate,false,PasteCurDate);
  MatCol(t,-390,"Surink. laik.",0,PickingTime,false,PasteCurTime);
  MatCol(t,-320,"Pakr. data",0,InloadingDate,true,PasteCurDate);
  MatCol(t,-230,"Pakr. laikas",0,InloadingTime,true,PasteCurTime);
  MatCol(t,-160,"Iškr. data",0,DespatchRowDate,true,PasteCurDate);
  MatCol(t,-70,"Iškr. laikas",0,DespatchRowTime,true,PasteCurTime);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Atsi. data",0,PickingDate,false,PasteCurDate);
  MatCol(t,-390,"Atsi. laikas",0,PickingTime,false,PasteCurTime);
  MatCol(t,-320,"Pakr. data",0,InloadingDate,true,PasteCurDate);
  MatCol(t,-230,"Pakr. laikas",0,InloadingTime,true,PasteCurTime);
  MatCol(t,-160,"Siunt. data",0,DespatchRowDate,true,PasteCurDate);
  MatCol(t,-70,"Siunt. laikas",0,DespatchRowTime,true,PasteCurTime);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vnt.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vnt. egz. kaina",0,UnitFactPrice,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vienetas",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Vieneto kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vieneto kaina",0,UnitFactPrice,true,0);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės paieška",'I','I',0,"ItemStatusORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Ankstesnė pardavimo kaina",' ',' ',0,"ORLastSPrsm");
  end;
  RowMenuItem(0,"Pridėti antraštės eilutę",' ',' ',0,"ORAddHeaderLine");
  RowMenuItem(0,"Pridėti paslėptą liniją",' ',' ',0,"ORAddHidLine");
  RowMenuItem(0,"Pridėti tarpinę sumą",' ',' ',0,"SubtotalORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Manager's Discount Override",' ',' ',0,"MgrsDiscOverrideORDsm"); //!!TRANSLATE
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  if (StandardHansa==false) then begin
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,8,"H");
  end;
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
  EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Siuntimo term.",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Sintimo būdas",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Maršrutas",Normal,Sorting,false,DelRouteSClass);
  end;
  // EditField(h1,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass); //EBS
  EditField(h1,v+=vs,80,"Projektas",Normal,PRCode,false,PRSClass); //EBS
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Filialas",Normal,BranchID,false,AllCUSClass);
  end;
  EditField(h2,v=vm,80,"Viso kiekis",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Viso svoris",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Viso tūris",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Frachtas",Normal,FrPrice,true,0);
  EditField(h2,v+=vs,80,"Intrastat kodas",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v,80,"Frahto PVM kd.",Normal,FrVATCode,true,VATCodeSClass);
  end;
  CheckBox(473,v=vm,0,"Faktūros prieš siuntimą",InvBeforeShip);
  Tile(5,130,false,"5",PriceList);
    h3 = 530;
  EditField(h1,v=vm,80,"Kainoraštis",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Nuolaidų lentelė",ViewOnly,RebCode,false,0);
//  EditField(h2,v+=vs,80,"Disc %",ViewOnly,DiscPerc,false,0);
//  EditField(h2,v+=vs,80,"Disc Amnt",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Faktūra kam",Normal,InvoiceToCode,false,CUSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Kreditinė kortelė",Normal,CreditCard,false,CreditCardSClass);
  EditField(h1,v+=vs,80,"Autorizacija",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,-20,"Komentaras",Normal,Comment,false,0);
  v = vm;
  if (HasSalesGroup) then begin
    EditField(h2,v,80,"Pardavimų grupė",Normal,SalesGroup,false,SalesGroupSClass);
    v = v + vs;
  end;
  EditField(h2,v,80,"Kalba",Normal,LangCode,false,LangSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Komisiniai",Normal,Commision,true,0);
    EditField(h2,v+=vs,80,"Viso įtr. komisinius",ViewOnly,SumIncCom,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v=vm,80,"TREO nr.",Normal,TREONr,false,0);
  EditField(h3,v+=vs,80,"TREO galioj. data",Normal,TREOExpDate,false,PasteCurDate);
  end;
  Tile(6,250,false,"6",Addr1);
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Šalis",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Faktūra",Normal,BankCode,false,BankSClass);
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255); //!!TRANSLATE
/*
		ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Patvirtinimo būklė");
		RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalauta",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);
*/
		v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelslit(h3=290,v=vm+20,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"PVM Reg. Nr.",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Faksas",Normal,Fax,false,0);
  Tile(7,170,false,"7",ShipAddr0);
  if (StandardHansa==false) then begin
  EditField(h1,v=6,80,"Adreso kd.",Normal,DelAddrCode,false,DelAddr3SClass);
  EditField(h1,v+=vs,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  end;
  EditField(h1,v+=vs,-20,"Adresas",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Šalis",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
    h5 = -170;
    width = -20;
  end;
  EditField(h2,v,150,"Siuntimo GLN",ViewOnly,DelRecipientGLN,false,0);
//  EditField(h1+200,v,80,"#VAT Code#",Normal,CustVATCode,false,0);
  EnterSkip(OrdDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Užsakymo būklė",'r',5,"ORInfoRnORDsm");
    SpecialMenu("Prekės būklė",'I',2,"ItemStatusORDsm");
    SpecialMenu("Sukurti Siuntimą",'L',0,"SHFromORDsm");
    SpecialMenu("Sukurti faktūrą",'F',1,"IVFromORDsm");
    SpecialMenu("Pridėti tarp. sumą",' ',14,"SubtotalORDsm");
/*
email not working yet
    SpecialMenu("Create E-Mail",'m',11,"CreateMailFromORDsm");
*/
  end else begin
  SpecialMenu("Perskaičiuoti nuolaidą",' ',11,"RecalcDiscountORDsm");
  if (StandardHansa==false) then begin
  SpecialMenu("Perskaičiuoti svorį ir tūrį",' ',10,"RecalculateWeightORDsm");
  end;
  SpecialMenu("Atnaujinti valiutinių kainoraščių prekes",' ',7,"UpdatePricesORDsm");
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Užsakymo būklė",'r',5,"ORInfoRnORDsm");
  if (StandardHansa==false) then begin
  	SpecialMenu("Spausdinti vidinį užsakymą",' ',4,"Or2FormORDsm");
  end;
  SpecialMenu("Rezervacijos",' ',15,"OrderReservORDsm");
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Parašas",' ',10,"SignORDsm");
  end;

  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//  SpecialMenu("Sukurti veiklą",'c',9,"CreateActFromORDsm");
  SpecialMenu("Sukurti siuntimą",'L',0,"SHFromORDsm");
  if (HasDownpayments) then begin
  SpecialMenu("Sukurti išankstinio apmok. faktūrą",' ',3,"DownPayFromORDsm");
  end;
  if (HaseMail) then begin
  	SpecialMenu("Sukurti el. laišką",'m',11,"CreateMailFromORDsm");
	end;
  SpecialMenu("Sukurti faktūrą",'F',1,"IVFromORDsm");
  if (HasModTS) then begin
  SpecialMenu("Sukurti projektą",' ',9,"CreatePRFromORDsm");
  SpecialMenu("Sukurti projekto biudžetą",' ',10,"CreateTBBUFromORDsm");
    end;
  if (HasModPO) then begin
    SpecialMenu("Sukurti pirkimo užsakymą",' ',4,"POFromORDsm");
  end;
  SpecialMenu("Sukurti grąžinimą",'B',6,"RetFromORsm");
  SpecialMenu("Sukurti sandėlio perkėlimą",' ',8,"StockMovFromORDsm");
  if (HasApprovals) then begin
    SpecialMenu("Užklausos patvirtinimas",' ',6,"ORSendforAcceptanceORDsm"); //!!TRANSLATE
    SpecialMenu("Atšaukti užklausos patvirtinimą",' ',2,"CancelApprovalRequestDsm"); //!!TRANSLATE
  end;
  SpecialMenu("Pridėti pirkėją",' ',0,"AddCustomerORDsm");
  SpecialMenu("Pridėti prekę",' ',0,"AddItemORDsm");
  end;
  EndWindow;
end;

window CULClass:10
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Kontaktai",CULClass,CGmlist,-);
  SpawnClass(CUDClass);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,880,300);
  end else begin
    SetWRect(20,80,860,300); //EBS edit
  end;
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
//  FormName(CustRn);  // Crash in multiuser
//  h = 20; HalPushButton(h,v=3,h=h+100,v+vs,"VEList","#Suppliers#");
//  HalPushButton(h=h+50,v=3,h=h+100,v+vs,"CUList","Pirkėjai");
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Nr.",Code,false,Code);
  RlColKey(96,96,"Trumpas",SearchKey,false,SearchKey);
  RlColKey(145,140,"Kateg.",CustCat,false,Group);
  RlColKey(190,190,"Pavadinimas",Name,false,Name);
  if (HasJewelleryInterface) then begin
    RlColKey(-480,-480,"Telefonas",Phone,false,Phone);
    RlColKey(-380,-380,"Mobilus",Mobile,false,Mobile);
    RlCol(-280,-280,"E-paštas",eMail,true);
    RlCol(-150,-150,"Adresas 1",InvAddr0,false);
  end else begin
    RlColKey(-520,-520,"Įmonės kd.",RegNr1,false,RegNr1); //EBS
    RlColKey(-420,-420,"Telefonas",Phone,false,Phone);
    RlColKey(-325,-325,"Kontaktas",Person,false,Person);
    RlColKey(-215,-215,"Skyrius",Department,false,Department);
    if (CUVATNrColumn) then begin
      RlColKey(-125,-125,"#PVM Reg. Nr.#",VATNr,false,VATNr);
    end else begin
      RlColKey(-125,-125,"#Reg. Nr.#",RegNr1,false,RegNr1);
    end;
    RlColKey(-50,-50,"Banko sąsk.",BankAccount,false,BankAccount);
  end;
  SearchField("Ieškoti");
  if (HasMetroTestFeatures or GUIType!=kGUIMetro) then begin
  CommunicateButton;
  end;
  if (HasLimitedAccess) then begin
  BrowseSubsetButton(-40,-15);
  end;
  if (UserCanReport("CustPSRn","",true)) then begin
  SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusCULsm");
  end;
  if (UserCanReport("VEPSRn","VendPSRClass",true)) then begin
  SpecialMenu("Tiekėjo būklė",'u',2,"VEStatusLsm");
  end;
  SpecialMenu("Pakeisti slaptažodį",' ',1,"ChangePasswdCULsm");
  SpecialMenu("Ieškoti",'F',3,"CUSearchLsm");
  if (GuiType==kGuiCocoa) then begin
    SpecialMenu("Importuoti adresų knygą",' ',5,"ImportAddressbooksm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Sukurti veiklą",'c',4,"NewActCULsm");
  EndWindow;
end;

window CUSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","android,computer,iPad,iPhone")
begin
  Integer pos;

  WindowBegin("Įstatyti pirkėją",CUSClass,CGslist,-);
  SetWRect(20,80,700,298); //EBS edit
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
  SpawnClass(CUDClass);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Nr.",Code,false,ActCode);
  pos = 96;
  if (HasCustomerSearchKey) then begin
    RlColKey(pos,pos,"Trumpas",SearchKey,false,SearchKey);
    pos = pos + 50;
  end;

  if (HasCategories) then begin
    RlColKey(pos,pos,"Kat.",CustCat,false,ActGroup);
    pos = pos + 50;
  end;
  if (IsStandardProduct) then begin
      if (HasLocalization("FIN,POL")) then begin
        RlColKey(pos,pos,"PVM reg. nr.",VATNr,false,VATNr);
        pos = pos + 120;
      end;
    end;
  RlColKey(pos,pos,"Pavadinimas",Name,false,ActName);   //!!TRANSLATE
  RlColKey(-280,-280,"Įmonės kd.",RegNr1,false,ActRegNr1); //EBS
  if (HasDepartments) then begin
    RlColKey(-180,-180,"Skyrius",Department,false,ActDepartment);
  end;
  if (HasStandardCommunicator) then begin
    if (CUVATNrColumn) then begin
      RlColKey(-80,-80,"PVM įm. kd.",VATNr,false,ActVATNr);
    end else begin
      RlColKey(-80,-80,"Reg. nr.",RegNr1,false,ActRegNr1);
    end;
  end;
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SearchField("Ieškoti");
  if (GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
    if (HasStandardCRM or HasStandardCommunicator or HasModCO) then begin
    SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusCUSsm");
  end;
  end;
  SpecialMenu("Ieškoti",'F',1,"CUSearchLsm");
  EndWindow;
end;

window VESClass:4
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,android,iPad,iPhone")
begin
  Integer pos;

  WindowBegin("Įstatyti tiekėją",VESClass,CGslist,-);
  SetWRect(20,80,780,298); //EBS edit
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
  SpawnClass(CUDClass);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"N_r.",Code,false,VEActCode);
  pos = 96;
  if (HasCustomerSearchKey) then begin
    RlColKey(pos,pos,"Trumpas",SearchKey,false,VEActSearchKey); //!!TRANSLATE
    pos = pos + 50;
  end;
  if (HasCategories) then begin
    RlColKey(pos,pos,"Kateg.",CustCat,false,VEActGroup); //!!TRANSLATE
    pos = pos + 50;
  end;
  if (IsStandardProduct) then begin
    if (HasLocalization("FIN,POL")) then begin
      RlColKey(pos,pos,"#VAT Reg. No.#",VATNr,false,VEActVATNr); //!!TRANSLATE
      pos = pos + 120;
    end;
  end;
  RlColKey(pos,pos,"Pavadinimas",Name,false,VEActName);   //!!TRANSLATE
  RlColKey(-360,-360,"Įmonės kd.",RegNr1,false,VEActRegNr1); //EBS
  if (HasDepartments) then begin
    RlColKey(-260,-260,"Skyrius",Department,false,VEActDepartment); //!!TRANSLATE
  end;
  if (HasStandardCommunicator) then begin
  if (CUVATNrColumn) then begin
    RlColKey(-160,-160,"PVM mok. kd.",VATNr,false,VEActVATNr);
  end else begin
    RlColKey(-160,-160,"Įmonės kd.",RegNr1,false,VEActRegNr1);
  end;
  RlColKey(-70,-70,"Banko sąsk.",BankAccount,false,ActBankAccount);
  end;
  SearchField("Ieškoti");
  if (HasLimitedAccess) then begin
  BrowseSubsetButton(-40,-15);
  end;
  if (HasModPL) then begin
  SpecialMenu("Tiekėjo būklė",'u',0,"VEStatusLsm");
  end;
  SpecialMenu("Ieškoti",'F',1,"VESearchSsm");
  EndWindow;
end;

window ItemSettingTClass:3
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Prekės parametrai",ItemSettingTClass,CGSbl,ItemSettingType);
  SetWRect(64,80,580,520); //EBS edit
  SetBlid(ItemSettingBlock);
  v = 6; vs = 20; h = 200;
  EditField(h,v,60,"Pagr. prekės grupė",Normal,DefIGroup,false,ITSClass);
  if (HasModSVO) then begin
    if (StandardHansa==false) then begin
  EditField(h,v+=vs,60,"Garantijos galiojimas",Normal,WarrantyLength,false,0);
    end;
  EditField(h,v+=vs,60,"Vienetas",Normal,Unittext,false,UnitSCLass);
  end;
  EditField(h,v+=vs,60,"Brūkšn. kodo ilgis (be čekio sumos)",Normal,BarCodeLength,false,0);
  if (IsEnterprise and StandardHansa==false) then begin
  EditField(h+=40,v+=vs,120,"Priskirtas brūkšn. kodo nr.",Normal,YourBarCodeDef,false,0);
  EditField(h,vm=(v+=vs),120,"Pradėti brūkšn. kodą nuo",Normal,BarCodeStartFrom,false,0);
  EditField(h,vm=(v+=vs),120,"Prekės pav. iš klasių tipu",Normal,DescrClassTypes,false,CTypeSClass); //EBS
  EditField(h,vm=(v+=vs),120,"Brandas klasifikacijos tipas",Normal,ItemLabelCTypeCode,false,CTypeSClass); //EBS // Etiketės Spausdinimo Klasifikacijos Tipas EVS DOL-122 rename
  end else begin
    v = v+vs;
    vm = v;
  end;
  CheckBox(h=35,vm=(v=vm+25),0,"Unikalus barkodas",UniqueBarCode);
  if (IsEnterprise) then begin
  CheckBox(h,v+=16,0,"Rodyti galiojimo laiką",BestBefore);
  CheckBox(h,v+=16,0,"Rodyti siuntos būklė",BatchStatus);
  CheckBox(h,v+=16,0,"Rodyti prekės būklė",ShowItemStatus);
  end;
  if (HasExtTax) then begin
  CheckBox(h,v+=16,0,"Skaičiuoti percepcinius mokesčius",Perceptions);
  end;
  if (HasWithholdingTax) then begin
  CheckBox(h,v+=16,0,"Skaičiuoti sulaikymo mokesčius",Withholdings);
  end;
  if (IsEnterprise) then begin
  CheckBox(h,v+=16,0,"Keičiant datą atnaujinti kainas įrašuose su valiuta",UpdCurPrWithDate);
  CheckBox(h=250,v=vm,0,"Neleisti bazinės kainos pakeitimo",NoBasePriceChange);
    if (StandardHansa==false) then begin
  CheckBox(h,v+=16,0,"Prekės formulė",ItemFormulaeInclVAT);
    end;
  CheckBox(h,v+=16,0,"Leisti kiekio skaičiavimą",EnCalcDimQty);
  CheckBox(h,v+=16,0,"Reikalauti prekės grupės",DemandItemGroup);
    if (StandardHansa==false) then begin
  CheckBox(h,v+=16,0,"Naudoti supersesijos prekes",UseSupersessionIN);
    end;
  //CheckBox(h,v+=16,0,"Naudoti kelių pirk. nuolaidą",MultiBuyDiscount);
    if (StandardHansa==false) then begin
  ButtonFrame(h=35,vm=(v+=76),173,4,"Pagrindinis prekės tipas");
    end else begin
      ButtonFrame(h=35,vm=(v+=76),173,3,"Pagrindinis prekės tipas");
    end;
  RadioButton(h,v,0,0,"Paprasta",DefItemType);
  RadioButton(h,v+=16,1,0,"Sandėliuojama",DefItemType);
  RadioButton(h,v+=16,2,0,"Struktūrinė",DefItemType);
    if (StandardHansa==false) then begin
  RadioButton(h,v+=16,3,0,"Paslauga",DefItemType);
  ButtonFrame(h,v+=40,173,3,"Serijinio nr. kontrolė");
    end else begin
      ButtonFrame(h,v+=57,173,3,"Serijinio numerio kontrolė");
    end;
  RadioButton(h,v,0,0,"Nėra",SerNrf);
  RadioButton(h,v+=16,1,0,"Vieneto",SerNrf);
  RadioButton(h,v+=16,2,0,"Siuntos",SerNrf);
  ButtonFrame(h=250,v=vm,200,4,"Atnaujinti savikainą patvirtinus gavimą");
  RadioButton(h,v,0,0,"Nr.",UpdateCost);
  RadioButton(h,v+=16,1,0,"Paskutinė pirkimų kaštai(su pap. kašt.)",UpdateCost);
  RadioButton(h,v+=16,2,0,"Svertinis vidurkis",UpdateCost);
  RadioButton(h,v+=16,3,0,"Pask. pirk. kaštai(be pap. kašt.)",UpdateCost);
  ButtonFrame(h,v+=40,200,3,"Atnaujinti savik. Sand. perkainavimuose");
  RadioButton(h,v,0,0,"Neatnaujinti",SRUpdateCost);
  RadioButton(h,v+=16,1,0,"Paskutinio perkainavimo savik.",SRUpdateCost);
  RadioButton(h,v+=16,2,0,"Svertinis vidurkis",SRUpdateCost);
  end else begin
    CheckBox(h,v+=16,0,"Neleisti bazinių kainų keitimo",NoBasePriceChange);
    CheckBox(h,v+=16,0,"Prekės formulė",ItemFormulaeInclVAT);
    CheckBox(h,v+=16,0,"Reikalauti Prekės grupės",DemandItemGroup);
  end;
  EndWindow;
end;

window ItemStatusSettTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Prekės būklės parametrai",ItemStatusSettTClass,CGSbl,-);
  SetWRect(64,80,420,220);
  SetBlid(ItemStatusSettBlock);
  v = 6; vs = 20;
  CheckBox(h=35,v=6,0,"Turimas kiekis",InStock);
  CheckBox(h,v+=18,0,"Kiekis pard. Užsakym.",OrddOut);
  CheckBox(h,v+=18,0,"Kiekis pirk. Užsakym.",POQty);
  CheckBox(h,v+=18,0,"Galimas pristatyti kiekis",Shpble);
  CheckBox(h,v+=18,0,"Nerezerv. kiekis",NotRsrvd);
  CheckBox(h,v+=18,0,"Galima pristatymo data",LeadDate);
  CheckBox(h,v+=18,0,"Savikaina",InPrice);
  CheckBox(h,v+=18,0,"Klasės",INClassf); //EBS
  CheckBox(h,v+=18,0,"Patalpų likučiai",LocBalf); //EBS
  CheckBox(h,v+=18,0,"Patalpų likučiai",LocTOf); //EBS
  CheckBox(h2=185,v=6,0,"BP",GP);
  CheckBox(h2,v+=18,0,"BP %",GPPrc);
  CheckBox(h2,v+=18,0,"Kaina su nuol.",DiscUPr);
  CheckBox(h2,v+=18,0,"Turimas kiekis 2",Instock2);
  CheckBox(h2,v+=18,0,"Įvairovių ataskaita",Var);
  CheckBox(h2,v+=18,0,"Ateities istorijos ataskaita",Statf);
  CheckBox(h2,v+=18,0,"Patalpos būklės ataskaita",Loc);
  EditField(h2+40,v+=25,60,"Patalpų klasė",Normal,LocClass,false,LocClSClass); //EBS
  EndWindow;
end;

window ItemStatUserDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm;
  WindowBegin("Prekės būklės parametrai",ItemStatUserDClass,CGview,-);
  UseView(ItemStatUserVc);
  SetWRect(64,80,535,250);
  EditField(h=40,v=6,82,"Asmuo",Normal,Signature,false,UserSClass);
  CheckBox(h,vm=(v+=32),0,"Kiekis sandėlyje",InStock);
  CheckBox(h,v+=18,0,"Kiekis pard. Užsakym.",OrddOut);
  CheckBox(h,v+=18,0,"Kiekis pirk. Užsakym.",POQty);
  CheckBox(h,v+=18,0,"Siunčiamas kiekis",Shpble);
  CheckBox(h,v+=18,0,"Nerezerv. kiekis",NotRsrvd);
  CheckBox(h,v+=18,0,"Galima prist. data",LeadDate);
  CheckBox(h,v+=18,0,"Savikaina",InPrice);
  CheckBox(h,v+=18,0,"Klasės",INClassf); //EBS
  CheckBox(h,v+=18,0,"Patalpų likučiai",LocBalf); //EBS
  CheckBox(h,v+=18,0,"Patalpų likučiai",LocTOf); //EBS
  CheckBox(h2=190,v=vm,0,"BP",GP);
  CheckBox(h2,v+=18,0,"BP %",GPPrc);
  CheckBox(h2,v+=18,0,"Vieneto kaina su nuol.",DiscUPr);
  CheckBox(h2,v+=18,0,"Kiekis sandėlyje vnt. 2",Instock2);
  CheckBox(h2,v+=18,0,"Įvairovių ataskaita",Var);
  CheckBox(h2,v+=18,0,"Ateities istorijos atask.",Statf);
  CheckBox(h2,v+=18,0,"Patalpos būklės atask.",Loc);
  EditField(h2+40,v+=25,60,"Patalpų klasė",Normal,LocClass,false,LocClSClass); //EBS
  ButtonFrame(h=350,v=vm,123,3,"Prekės būklė");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",ShowItemStatus);
  RadioButton(h,v+=16,1,0,"Rodyti",ShowItemStatus);
  RadioButton(h,v+=16,2,0,"Nerodyti",ShowItemStatus);
  EndWindow;
end;

window ArtStatIClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  boolean Colourf,DiscUPrf,GPPrcf,GPf,InStockf,Instock2f,LeadDatef,Locsf,NotRsrvdf,OrddOutf,POQtyf,Shpblef,Statf,Varf,CostPricef;
  real h,hs,l,v,h2; //EBS edit
  boolean ItemClassf,LocBalf,LocTOf; //EBS
  array string 255 arrLocNames;
  integer size,i; //EBS
  val t; //EBS

  WindowBegin("Prekės būklė",ArtStatIClass,CGother,RcType);
  DynamicWindow;
  EBS_ItemStatusUserSettings(CurrentUser,InStockf,OrddOutf,POQtyf,Shpblef,GPf,NotRsrvdf,GPPrcf,DiscUPrf,Instock2f,Varf,LeadDatef,Statf,Locsf,CostPricef,ItemClassf,LocBalf,LocTOf,arrLocNames,size);
  l = 1300;//1040; //EBS edit
  if (!ItemClassf) then begin l = l - 100; end;
  if (!InStockf) then begin l = l - 80; end;
  if (!OrddOutf) then begin l = l - 80; end;
  if (!POQtyf) then begin l = l - 80; end;
  if (!Shpblef) then begin l = l - 80; end;
  if (!NotRsrvdf) then begin l = l - 80; end;
  if (!GPf) then begin l = l - 80; end;
  if (!GPPrcf) then begin l = l - 80; end;
  if (!DiscUPrf) then begin l = l - 80; end;
  if (!Instock2f) then begin l = l - 80; end;
  if (!LeadDatef) then begin l = l - 90; end;
  if (!Varf) then begin l = l - 60; end;
  if (!Locsf) then begin l = l - 60; end;
  if (!Statf) then begin l = l - 60; end;
  if (!CostPricef) then begin l = l - 60; end;
//EBS-->
  h2 = 189;
  if !LocBalf then begin
    h2 = h2 - 20;
  end;
  if !LocTOf then begin
    h2 = h2 - 20;
  end;
  if !LocBalf and !LocTOf then begin
    h2 = h2 - 20;
  end;
  SetWRect(3,80,l,h2);
  // SetWRect(3,80,l,129);
//EBS<--
  Modality(2);
  if (IsWebClient) then begin
    v = 37;
    h = 1;
    hs = 70;
  end else begin
    v = 15;
    h = 20;
    hs = 80;
  end;
  StaticText(h,v,  "Prekė",false);
//EBS-->
  if (ItemClassf) then begin
    StaticText(h+=(hs+6),v,"Klasės",false);
  end;
//EBS<--
  if (InStockf) then begin
//    StaticText(h+=(hs+10),v,  "Stock",false);
    ColourPushButton(h+=(hs+6),v-12,h+67,v+3,"ArtStatIClassSL","Turima",1001);
  end;
  if (OrddOutf) then begin
//    StaticText(h+=hs,v,  "Order",false);
    ColourPushButton(h+=(hs+2),v-12,h+62,v+3,"ArtStatIClassOS","Par.Užs",1001);
  end;
  if (POQtyf) then begin
//    StaticText(h+=hs,v,  "Purch.Ord",false);
    ColourPushButton(h+=(hs-1),v-12,h+62,v+3,"ArtStatIClassPOS","Pir.Užs",1001);
  end;
  if (Shpblef) then begin
    StaticText(h+=hs,v,  "Siunčiama",false);
  end;
  if (NotRsrvdf) then begin
    StaticText(h+=hs,v,  "Nerezervuota",false);
  end;
  if (GPf) then begin
    StaticText(h+=hs,v,  "BP",false);
  end;
  if (GPPrcf) then begin
    StaticText(h+=hs,v,  "BP %",false);
  end;
  if (DiscUPrf) then begin
    StaticText(h+=hs,v,  "Kain. su nuol.",false);
  end;
  if (Instock2f) then begin
    StaticText(h+=hs,v,  "Sand. 2",false);
  end;
  if (LeadDatef) then begin
    StaticText(h+=hs,v,  "Data",false);
  end;
  if (CostPricef) then begin
    StaticText(h+=hs,v,  "Savik.",false);
  end;
  if (IsWebClient) then begin
    h = 1;
  end else begin
    h = 20;
  end;
  EditFieldTL(h,v+=10, 70,"",M4UStr,ViewOnly,20,f1,false,0);
//EBS-->
  if (ItemClassf) then begin
    EditFieldTL(h+=hs,v,80,"",M4Str,ViewOnly,20,faxno,false,0);
  end;
//EBS<--
  if (InStockf) then begin
    EditFieldTL(h+=(hs+10),v, 60,"",M4Str,ViewOnly,20,f2,true,0);
  end;
  if (OrddOutf) then begin
    EditFieldTL(h+=hs,v ,60,"",M4Str,ViewOnly,20,f3,true,0);
  end;
  if (POQtyf) then begin
    EditFieldTL(h+=hs,v ,60,"",M4Str,ViewOnly,20,LastAcc,true,0);
  end;
  if (Shpblef) then begin
    EditFieldTL(h+=hs,v ,60,"",M4Str,ViewOnly,20,FirstAcc,true,0);
  end;
  if (NotRsrvdf) then begin
    EditFieldTL(h+=hs,v ,60,"",M4Str,ViewOnly,20,Stext,true,0);
  end;
  if (GPf) then begin
    EditFieldTL(h+=hs,v ,60,"",M4Str,ViewOnly,20,AccStr,true,0);
  end;
  if (GPPrcf) then begin
    EditFieldTL(h+=hs,v ,60,"",M4Str,ViewOnly,20,ObjStr,true,0);
  end;
  if (DiscUPrf) then begin
    EditFieldTL(h+=hs,v ,60,"",M4Str,ViewOnly,20,TransStr,true,0);
  end;
  if (Instock2f) then begin
    EditFieldTL(h+=hs,v ,60,"",M4Str,ViewOnly,20,f4,true,0);
  end;
  if (LeadDatef) then begin
    EditFieldTL(h+=hs,v ,70,"",M4Date,ViewOnly,0,d1,true,0);
  end;
  if (CostPricef) then begin
    EditFieldTL(h+=hs,v ,70,"",M423Val,ViewOnly,0,vals4,true,0);
  end;
  if (IsWebClient) then begin
    h = h - 200;
    v = 1;
  end else begin
    v = 20;
  end;
  if (Varf) then begin
    ColourPushButton(h+=87,v,h+58,v+26,"DoVARMaskStock","Įvairovės",1001);
    //HalPushButton(h+=87,20,h+43,40,"DoVARMaskStock","Var");
    Colourf = true;
  end;
  if (Locsf) then begin
    if (Colourf) then begin
      ColourPushButton(h+=62,v,h+58,v+26,"DoLocationItem","Patalpos",1001);
    end else begin
      ColourPushButton(h+=87,v,h+58,v+26,"DoLocationItem","Patalpos",1001);
    end;
    //HalPushButton(h+=47,v,h+43,40,"DoLocationItem","Loc");
    Colourf = true;
  end;
  if (Statf) then begin
    if (Varf) then begin
      if (Colourf) then begin
        ColourPushButton(h+=62,v,h+58,v+26,"DoFutureStockHist","Ateitis",1001);
      end else begin
        ColourPushButton(h+=87,v,h+58,v+26,"DoFutureStockHist","Ateitis",1001);
      end;
      //HalPushButton(h+=47,v,h+43,40,"DoFutureStockHist","Future");
    end else begin
      if (Colourf) then begin
        ColourPushButton(h+=62,v,h+58,v+26,"DoFutureStockHist","Ateitis",1001);
      end else begin
        ColourPushButton(h+=87,v,h+58,v+26,"DoFutureStockHist","Ateitis",1001);
      end;
      //HalPushButton(h+=47,20,h+43,40,"DoFutureStockHist","Future");
    end;
    Colourf = true;
  end;
//EBS-->
  v=v+40; h = 36;
  if LocBalf or LocTOf then begin
    for(i=0;i<size;i=i+1)begin
      if i<=9 then begin
        StaticText(h+=hs,v,arrLocNames[i],false);
      end;
    end;
    if size>0 then begin
      StaticText(h+=hs,v,USetStr(1000078),false);
    end;
  end;

  if LocBalf then begin
    StaticText(h=30,v+=20,  "Kiekis",false);
    for(i=0;i<size;i=i+1)begin
      switch(i) begin
        case 0: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,searchstr,true,0);
        case 1: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,Period2Str2,true,0);
        case 2: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,f7,true,0);
        case 3: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,f8,true,0);
        case 4: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,f9,true,0);
        case 5: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,f10,true,0);
        case 6: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,f11,true,0);
        case 7: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,f12,true,0);
        // case 8: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,shortname,true,0);
      end;
    end;
    if size>0 then begin
      EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,shortname,true,0);
    end;
  end;


  if LocTOf then begin
    StaticText(h=30,v+=20,  "Viso pard.",false);
    for(i=0;i<size;i=i+1)begin
      switch(i) begin
        case 0: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,repname,true,0);
        case 1: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,Period2Str,true,0);
        case 2: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,5,ObjType,true,0);
        case 3: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,Comment,true,0);
        case 4: EditFieldTL(h+=hs,v-13,60,"",M4Str,ViewOnly,20,critname,true,0);
        case 5: EditFieldTL(h+=hs,v-13,60,"",M4UVal,ViewOnly,0,vals0,true,0);
        case 6: EditFieldTL(h+=hs,v-13,60,"",M4UVal,ViewOnly,0,vals1,true,0);
        case 7: EditFieldTL(h+=hs,v-13,60,"",M4UVal,ViewOnly,0,vals2,true,0);
        // case 8: EditFieldTL(h+=hs,v-13,60,"",M4UVal,ViewOnly,0,vals3,true,0);
      end;
    end;
    if size>0 then begin
      EditFieldTL(h+=hs,v-13,60,"",M4UVal,ViewOnly,0,vals3,true,0);
    end;
  end;
//EBS<--
  EndWindow;
end;

window CashSimpleInDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs;
  real v3,hm,l; //EBS
  WindowBegin("Pajamos",CashSimpleInDClass,CGview,-);
  AutoSizeWindow(false);
  SetWRect(64,80,650,400); //EBS edit
  UseView(CashVc);
  vs = 20; h = 100; h2 = 260; h3 = 350;
  EditField(h,v=6,-40,"Komentaras",Normal,Comment,false,0);
    EditField(h,v=v+vs,70,"Stalčius",Normal,Drawer,false,DrawerSClass);
  MatrixBegin(h,v+=40,h+150,-30,-,99); //EBS edit
  MatCol(1,24,"Mok. būdas",0,PMCode,false,PMSClass);
  MatCol(1,-75,"Suma",0,Amount,false,0);
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  EditField(h+80,-20,70,"Viso",Normal,Total,true,0); //EBS edit
  CheckBox(20,-45,0,"No N/L trans.",DoNotMakeTR); //EBS
  CheckBox(20,-20,0,"OK",OKFlag);
//EBS-->
  v = 40; h2 = 55; v3 = 48; vs = 52; hm = 320; l = 57;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad3","3_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPadMinus","-_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad6","6_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+(v3*3+8),"CashToolKeyPadOK","OK_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPadDelete","Del",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"CashToolKeyPadPoint",".",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+2*h2,v+v3,"CashToolKeyPadEnter","Įvesti",2);
  h = h+(2*h2)+2; ColourPushButton(h,v,h+2*h2,v+v3,"CashToolKeyEnterSave","OK ir išsaugoti",2);
//EBS<--
  EndWindow;
end;

window MATVARINSClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  array string 255 axlabels,aylabels;
  integer pos,xpos,ypos,ylabellen,starth,i;
  real h,v,matheightbase;
  string 255 label;
  integer wn,mwn;
  boolean powinf;
  boolean nextbutf,prevbutf;
  integer spos,pgnum;

  WindowBegin("Įvairovių lentelės įvedimas",MATVARINSClass,CGother,VarMatrxEntryView);
  DynamicWindow;
  xpos = CntVarietyCode(1,axlabels);

  // EVS: DOL-1
  wn = CurWindow;
  if (wn > 0) then begin
    mwn = MotherWindow(wn);
    if (mwn > 0) then begin
      if (GetWindowClass(mwn) == "PODClass") then begin
        powinf = true;
      end;
      if (GetWindowClass(mwn)!="EBS_ChangeINVarVClass") then begin
        
      ypos = CntVarietyCode(2,aylabels);
			for (pos=1;pos<=ypos;pos=pos+1) begin
				label = aylabels[pos];
				if (ylabellen<len(label)) then begin
					ylabellen = len(label);
				end;
			end;  
        
      end;
    end;
  end;
  // :EVS

  // EVS: DOL-57
  spos = 1;
  pgnum = StringToInt(GetWindowString(wn,"$pagenum"));
  if (pgnum == 1) then begin
    if (xpos > 18) then begin
      xpos = 18;
      nextbutf = true;
      prevbutf = false;
    end;
  end else begin

    if (pgnum > 1) then begin
      prevbutf = true;

      spos = (18*(pgnum-1))+1;
      if (xpos >= spos + 17) then begin
        xpos = spos + 17;
        nextbutf = true;
      end;
    end;
    if (pgnum == 0) then begin
      if (xpos > 18) then begin
        xpos = 18;
      end;
    end;
  end;
  // :EVS

  starth = 7*ylabellen;
  if (starth<70) then begin starth = 70; end;
  if (powinf) then begin // EVS: DOL-1
    SetWRect(80,80,200+(xpos*50)+(starth-70),165+(ypos*17)+70); //EBS edit
  end else begin
    SetWRect(80,80,200+(xpos*50)+(starth-70),165+(ypos*17)+70); //EBS edit
  end;
  UseView(VarMatrxEntryVc);
  h = 10; v = -40;
  if (WindowStyle("MasterWClass")==kWindowStyleWindows8Desktop) then begin
    matheightbase = 86; //EBS edit
  end else begin
    matheightbase = 83; //EBS edit
  end;
//EBS-->
  v = starth;
//  for (pos=spos;pos<=xpos;pos=pos+1) begin
  for (pos=1;pos<=(xpos-spos)+1;pos=pos+1) begin
    ColourPushButtonTag(v+=3,10,v+=47,40,"TouchMATVARPlusButton","+",2,pos); // todo
  end;
  v = -50;
//EBS<--

  MatrixBegin(starth,88,-32,matheightbase+ypos*17+18,VarMatrxEntryRowType,ypos); //EBS edit

//  for (pos=spos;pos<=xpos;pos=pos+1) begin
  for (pos=1;pos<=(xpos-spos)+1;pos=pos+1) begin
    if (pgnum == 1) then begin
      label = axlabels[pos];
    end else begin
      label = axlabels[pos + ((pgnum-1)*18)];
    end;
    switch (pos) begin
      case 1: MatCol(1,v+=50,label,0,A,false,0); //EBS edit width for all cols
      case 2: MatCol(1,v+=50,label,0,B,false,0);
      case 3: MatCol(1,v+=50,label,0,C,false,0);
      case 4: MatCol(1,v+=50,label,0,D,false,0);
      case 5: MatCol(1,v+=50,label,0,E,false,0);
      case 6: MatCol(1,v+=50,label,0,F,false,0);
      case 7: MatCol(1,v+=50,label,0,G,false,0);
      case 8: MatCol(1,v+=50,label,0,H,false,0);
      case 9: MatCol(1,v+=50,label,0,I,false,0);
      case 10: MatCol(1,v+=50,label,0,J,false,0);
      case 11: MatCol(1,v+=50,label,0,K,false,0);
      case 12: MatCol(1,v+=50,label,0,L,false,0);
      case 13: MatCol(1,v+=50,label,0,M,false,0);
      case 14: MatCol(1,v+=50,label,0,N,false,0);
      case 15: MatCol(1,v+=50,label,0,O,false,0);
      case 16: MatCol(1,v+=50,label,0,P,false,0);
      case 17: MatCol(1,v+=50,label,0,Q,false,0);
      case 18: MatCol(1,v+=50,label,0,R,false,0);
      case 19: MatCol(1,v+=50,label,0,S,false,0);
      case 20: MatCol(1,v+=50,label,0,T,false,0);
      case 21: MatCol(1,v+=50,label,0,U,false,0);
      case 22: MatCol(1,v+=50,label,0,V,false,0);
      case 23: MatCol(1,v+=50,label,0,W,false,0);
      case 24: MatCol(1,v+=50,label,0,X,false,0);
      case 25: MatCol(1,v+=50,label,0,Y,false,0);
      case 26: MatCol(1,v+=50,label,0,Z,false,0);
    end;
  end;
  EndMatrix;
  v = 17;
  for (pos=1;pos<=ypos;pos=pos+1) begin
    label = aylabels[pos];
    StaticText(starth-5,v+=17,label,true);
  end;

  // EVS: DOL-1
  if (powinf) then begin
    EditField(120,100,100,"Kaina",Normal,Price,true,0);
    EditField(120,122,100,"Plan. siunt. data",Normal,PlanDelDate,false,PasteCurDate);
  end;
  // :EVS

  // EVS: DOL-57
  if (prevbutf) then begin
    ColourPushButton(350,100,450,150,"DOLMATVARINSClassPrevPage","Ankstesnis psl.",2);
  end;
  if (nextbutf) then begin
    ColourPushButton(470,100,570,150,"DOLMATVARINSClassNextPage","Sekantis psl.",2);
  end;
  // :EVS

  EndWindow;
end;

window GCDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs;
  WindowBegin("Išleistas dovanų čekis",GCDClass,CGview,-);
  SetWRect(64,80,550,200);
  UseView(GCVc);
  FormName(GCForm);
  v = 6; vs = 20; h = 80; h2 = 240;
  EditField(h,vm=v, 55,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(h2,v, 70,"Suma",Normal,Amount,true,0);
  CheckBox(-90,v,0,"OK",OKFlag);
  EditField(h,v+=vs, 70,"Oper. data",Normal,TransDate,false,PasteCurDate);
  EditField(h2,v, 70,"Galioja iki",Normal,ExpiryDate,false,PasteCurDate);
  EditField(h,v+=vs, -20,"Komentaras",Normal,Comment,false,0);
  EditField(h,v+=vs, 100,"Barkodas",Normal,BarCode,false,0);
  EditField(h,v+=vs, 100,"Patalpa",Normal,Location,false,LocationSClass);
  EndWindow;
end;

window GiftVoucherSalesTouchScreenDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real h,h2,v,vs,hm,v3,l; //EBS edit
  WindowBegin("Parduoti dov. kuponą",GiftVoucherSalesTouchScreenDClass,CGother,RcType);
//  Modality(kModalityGlobal);
  UseView(RcVc);
  SetWRect(80,200,400,300);
  switch (GuiType) begin
    case kGuiiPhone: PopoverWindow; h = 150; h2 = 250; vs=70;
    otherwise
      h = 120; h2 = 50; vs=55;
  end;
  EditFieldTL(h,v=6, 100,"Dovanų kupono nr.",M4Str,Normal,100,f1,false,0); //EBS removed ctrl + enter window
  if (GuiType==kGuiiPhone) then begin
    ColourPushButton(h2,v+=vs,h2+100,v+35,"CancelCCPayTouchScreenDClass","Atšaukti",20);
    ColourPushButton(h2+=130,v,h2+100,v+35,"ProceedGiftVoucherSalesTouchScreenDClass","Tęsti",20);
  end else begin
    ColourPushButton(h2,v+=vs,h2+100,v+35,"CancelCCPayTouchScreenDClass","Atšaukti<BR>F2",20);
    ColourPushButton(h2+=130,v,h2+100,v+35,"ProceedGiftVoucherSalesTouchScreenDClass","Tęsti<BR>F1",20);
//EBS-->
    // ColourPushButton(h=240,v=3,h+70,v+50,"CashPayTouchScreenKeypad","Klaviatūra<BR>F3",2);
    ColourPushButton(h=240,v=3,h+70,v+50,"GiftVoucherSalesToolList","Dov. Kup. sąrašas<BR>F3",2);
    v = v + 150; h2 = 55; v3 = 48; vs = 52; l = 57; hm=50;
    h = hm;  ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad1","1_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad2","2_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad3","3_",2);
    v = v+vs;
    h = hm;  ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad4","4_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad5","5_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad6","6_",2);
    v = v+vs;
    h = hm;  ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad7","7_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad8","8_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad9","9_",2);
    v = v+vs;
    h = hm;  ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPadDelete","Del",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPad0","0_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"GiftVoucherSalesToolKeyPadPoint",".",2);
//EBS<--
  end;
  EndWindow;
end;

window CrossINDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Parduodama prekė",CrossINDClass,CGview,-);
  SetWRect(64,100,600,210);
  UseView(CrossINVc);
  h = 120; h2 = 300; v = 6; vs = 20;
  EditField(h,v,150,"Prekė",Normal,ItemCode,false,ForSaleINSClass);
  EditField(h+230,v,100,"arba Grupė",Normal,ItemGroup,false,ITSClass); // EVS: DOL-2
  EnterSkip("CrossItemCode");
  EditField(h,v+=vs,-40,"Aprašymas",Normal,ItemName,false,0);
  EditField(h,v+=vs+6,150,"Parduodama prekė",Normal,CrossItemCode,false,ForSaleINSClass);
  EditField(h,v+=vs,-40,"Aprašymas",Normal,CrossItemName,false,0);
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Sukurti atvirkštinį ryšį",'r',0,"ReverseCrossINsm");
  EndWindow;
end;

window VarEnqRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Įvairovių užklausa",VarEnqRClass,CGRcW,RcType);
  SetWRect(20,80,390,250);
  v = 6; vs = 20; h = 120;
  PeriodField(h,v,"Periodas");
  EditFieldTL(h,v+=vs,150,"Prekė",M4UStr,Normal,20,f4,false,INSClass);
  EditFieldTL(h,v+=vs,150,"Tiekėjo prekė",M4UStr,Normal,20,f5,false,PISClass);
  EditFieldTL(h,v+=vs,150,"Patalpos",M4UStr,Normal,21,f2,false,LocationSClass);
  CheckBox(h,v+=30,0,"Patalpai",flags[2]);
  CheckBox(h,v+=16,0,"Tik su lik.",flags[3]); // EVS: DOL-6
  ButtonFrame(h,v+=40,123,2,"Rodyti");
  RadioButton(h,v,0,0,"Turimi",flags[1]);
  RadioButton(h,v+=16,1,0,"Parduoti",flags[1]);
  EndWindow;
end;

window VIDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  record CYBlock CYb;
  string 255 label;
  Integer tilenr;
  Integer f,flipnr;
  Integer pos;

  WindowBegin("Pirkimo faktūros",VIDClass,CGview,-);
  SetWRect(20,80,800,460); //EBS edit
  if (IsEnterprise==false) and (HasModNL==false) then begin
  end else begin
  Sizeable(-1,-1,0,0);
  end;
  UseView(VIVc);
//  FormName(PrintVID);
  ActiveFieldOnNew("VECode");
  if (IsEnterprise==false) then begin
    if (IsBooks and IsStandardProduct==false) then begin
      AutoSizeWindow(false);
    end;
    v = 6; h = 90; h2 = 260; h3 = 460; h4=-120; vs = 20;
    if (HasVATZone or ((HasMultiCurrency or HasBase2) and (HasModNL or HasIncomeAndExpenseBook))) then begin
      Tile(0,74,false,"",VECode);
    end;
    if (HasNumberSeries) then begin
      EditField(h,v,80,"Nr.",Normal,SerNr,false,TSerSClass);
    end else begin
      EditField(h,v,80,"Nr.",Normal,SerNr,false,0);
    end;
    EditField(h2,v,-40,"Name",Normal,VEName,false,0);

    EditField(h,vm=(v+=20),80,"Tiekėjas",Normal,VECode,false,VESClass);
    EditField(h2,v,80,"Faktūros data",Normal,InvDate,false,PasteCurDate);
    CheckBox(-80,v,0,"OK",OKFlag);
    if (HasModNL) then begin
      EditField(h3,v,-100,"Nuoroda",Normal,RefStr,false,0);
    end;
    if (HasVATZone) then begin
      tilenr = 1;
      TileButton(tilenr,"Terminai"); tilenr = tilenr + 1;
      TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1;
      if (HasMultiCurrency or HasBase2) then begin
        TileButton(tilenr,"Valiutos"); tilenr = tilenr + 1;
      end;
      TileButton(tilenr,"Įvarūs"); tilenr = tilenr + 1;
      tilenr = 1;
      Tile(tilenr,100,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
      v = 6;
    end else begin
      if (HasMultiCurrency or HasBase2) and (HasModNL or HasIncomeAndExpenseBook) then begin
        tilenr = 1;
        TileButton(tilenr,"Terminai"); tilenr = tilenr + 1;
        TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1;
        TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
        tilenr = 1;
        Tile(tilenr,100,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
        v = 6;
      end else begin
        v = v + vs;
      end;
    end;
    vm = v;
    EditField(h,v,80,"Tiek. fak. nr.",Normal,InvoiceNr,false,0);
    EditField(h,v+=vs,80,"VISO",Normal,PayVal,true,0);
    EditField(h,v+=vs,80,"PVM",Normal,VATVal,true,0);
    EditField(h2,v=vm,22,"Mok. sąl.",Normal,PayDeal,false,PDSClass);
    if (HasModNL or HasIncomeAndExpenseBook) then begin
    	EditField(h2,v+=vs,80,"Op. data",Normal,TransDate,false,PasteCurDate);
    end;
    EnterSkip(Math);
    EditField(h2,v+=vs,80,"Apmok. data",Normal,DueDate,false,0);
    v = vm;
    EditField(h3,v,90,"Faktūros kred.",Normal,CredInv,false,APSClass);
    if (HasLanguages) then begin
      EditField(h4,v,80,"Kalba",Normal,LangCode,false,LangSClass);
    end;
    EditField(h3,v+=vs,90,"Trumpieji kodai",Normal,SortCode,false,0);
    if (HasObjects) then begin
      EditField(h4,v,80,"Objektai",Normal,Objects,false,ObjSClass);
    end;
    EditField(h3,v+=vs,-40,"Banko sąskaita",Normal,BankAcc,false,0);
    if (HasLocalization("POL")) then begin
      EditField(h2,v+=vs,80,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
    end;
    EditField(h2,v+=vs,-40,"Komentaras",Normal,Comment,false,0);
    if (HasModNL or HasIncomeAndExpenseBook or HasModTS) then begin
      if (HasVATZone or HasMultiCurrency or HasBase2) then begin
        Tile(tilenr,330,false,tilenr,Math); tilenr = tilenr + 1;
        v = 6;
      end else begin
        v = v + 2*vs;
      end;
      BlockLoad(CYb);
      if (HasAdvancedStock or HasModTS or HasModPO) then begin
        MatrixBegin(10,v,-50,-32,-,99);
      end else begin
        MatrixBegin(10,v,-27,-32,-,99);
      end;
      MatTypedRow(stp);
      MatOverStrike(ovst);
      flipnr = 0;
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kInvoiceRowTypeNormal,24,"Sąskaita",0,AccNumber,false,AccSClass);
      Flip(flipnr); flipnr = flipnr + 1;
      if (HasObjects) then begin
        MatCol(t=kInvoiceRowTypeNormal,90,"Objektai",0,Objects,false,ObjSClass);
        MatCol(t,180,"Aprašymas",0,Comment,false,0);
    end else begin
        MatCol(t,90,"Aprašymas",0,Comment,false,0);
      end;
      MatCol(t,-130,"Kiekis",0,Sum,true,0);
      if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
        MatCol(t,-35,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
      end else begin
        MatCol(t,-35,"PVM kd.",0,VATCode,false,VATCodeSClass);
      end;

      MatText(t=kInvoiceRowTypePrepayment,24,"Avanso numeris",true);
      MatCol(t,208,"",0,PrepayNr,false,APPay3SClass);
      MatCol(t,-266,"",0,Comment,false,0);
      MatCol(t,-160,"",0,PrepayAmount,true,0);/* Price holds the #VAT# sum, Recipe holds the date of prepaym. */
      MatCol(t,-70,"",0,VATVal,true,0);

      MatText(t=kInvoiceRowTypeEmployee,24,"Sumokėti darbuotojui",true);
      MatCol(t,208,"",0,UserCode,false,UserSClass);
      MatCol(t,-406,"",0,AccNumber,false,0);
      MatCol(t,-306,"",0,Objects,false,0);
      MatCol(t,-206,"",0,Comment,false,0);

      if (HasAdvancedStock or HasModTS or HasModPO) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        pos = 140;
        t = kInvoiceRowTypeNormal;
        if (HasAdvancedStock) then begin
          MatCol(t,pos,"Užsk. tipas",0,OrderType,false,0);
          MatCol(t,-360,"Sand. tipas",0,StockType,false,SetSClass);
        end else begin
          MatCol(t=1,pos,"Aprašymas",0,Comment,false,0);
        end;
        MatCol(t,-260,"Suma",0,Sum,true,0);
        MatCol(t,-190,"Prekė",0,Item,false,INSClass);
        MatCol(t,-130,"Kiekis",0,qty,true,0);
        if (HasModTS) then begin
          MatCol(t,-100,"Projektas",0,PRCode,false,PRSClass);
        end;
        if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
          MatCol(t,-30,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
        end else begin
          MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
        end;
        MatText(3,270,"",true);
      end;
      InsertRowTest;
      DeleteRowTest;
      RowMenuBegin("");
      RowMenuItem(0,"Balansuoti",'=','=',0,"BalanceVIDsm");
      EndRowMenu;
      EndMatrix;
      vs = 20;
//      v = 18;//canoot be set to 18 on windows
      if (flipnr>2) then begin
        for (f=1;f<flipnr;f=f+1) begin
          VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
          v = v + vs;
        end;
      end;
      EditField(-140,-20,-40,"Skaičiuoti PVM",ViewOnly,CalcVATVal,true,0);
      if (HasMultiCurrency or HasBase2) then begin
        Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
        h1 = h + 20;
        v = 6;
        EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
        if (HasMultiCurrency) then begin
          if (HasBase2) then begin
            EditField(h1,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
          end else begin
            EditField(h1,v+vs,50,"Bazinė valiuta",Normal,BaseRate1,true,0);
          end;
          if (HasBase2) then begin
            EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
          end;
          EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
          if (HasBase2) then begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
            RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
          end else begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
          end;
        end else begin
          EditField(h1,v+=vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
          EditField(h1,v+=vs,50,"Baz. val. 2",Normal,BaseRate2,true,0);
        end;
      end;
      if (HasVATZone) then begin
        Tile(tilenr,120,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
        v = 20;
        v = VATZoneButtonsLabelslit(h,v,170,16);
      end;
      SpecialMenu("Balansuoti",'=',0,"BalanceVIDsm");
      SpecialMenu("Pirkimų faktūros būklė",'r',2,"VIInfoVIDsm");
      if (HasIntegratedNL) then begin
        SpecialMenu("Atidaryti D/K operacijas",'t',5,"OpenTRFromVI");
      end;
      if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
        SpecialMenu("Susieti su išankstiniu apmokėjimu",' ',6,"ConnectToPrepayVIDsm");
      end;
      SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
      if (HasModCL) then begin
        SpecialMenu("Sukurti kasos išlaidas",' ',1,"DoCLOutFromVID");
      end;
    end else begin
      if (HasMultiCurrency or HasBase2) then begin
        EditField(h,v+=vs,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
        if (HasMultiCurrency) then begin
          if (HasBase2) then begin
            EditField(h,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
          end else begin
            EditField(h,v+vs,50,"Baz. val.",Normal,BaseRate1,true,0);
          end;
          if (HasBase2) then begin
            EditField(h,v+(vs*2),50,"Baz. Val. 2",Normal,BaseRate2,true,0);
          end;
          EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
          if (HasBase2) then begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
            RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
          end else begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);
          end;
        end else begin
          EditField(h,v+=vs,50,"Baz. Val. 1",Normal,BaseRate1,true,0);
          EditField(h,v+=vs,50,"Baz. Val. 2",Normal,BaseRate2,true,0);
        end;
      end;
    SpecialMenu("Faktūros būklė",'r',2,"VIInfoVIDsm");
    if (HasIntegratedNL) then begin
      SpecialMenu("Atidaryti D/K operaciją",'t',5,"OpenTRFromVI");
    end;
    if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
      SpecialMenu("Prijungti prie išankstinio",' ',6,"ConnectToPrepayVIDsm");
      end;
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    SpecialMenu("Sukurti kredito pažymą",' ',15,"CreateCreditNoteVIDsm");
    if (HasModCL) then begin
      SpecialMenu("Sukurti kasos išlaidas",' ',8,"DoCLOutFromVID");
    end;
    if (HasModNL and HasMultiCurrency) then begin
      SpecialMenu("Sukurti vidinę faktūrą",' ',12,"IntIVFromVIDsm");
    end;
    if (HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) and (HasModNL) then begin
      SpecialMenu("Sukurti PVM koregavimą pirkim. kn.",' ',9,"VATCorrectionVIsm");
    end;
    SpecialMenu("Add Supplier",' ',0,"AddSupplierVIDsm"); //!!TRANSLATE
  end else begin
    BlockLoad(CYb);
    vs = 20;
  Tile(0,94,false,"",InvDate);
    if (IsEnterprise) then begin
      h = 75; h2 = 260; h3 = 530;
    end else begin
      h = 90; h1 = 90; h2 = 270; h3 = 470; h4=-110;
    end;
    if (HasNumberSeries) then begin
      EditField(h,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
    end else begin
      EditField(h,vm=(v=6),95,"Nr.",Normal,SerNr,false,0);
    end;
  EditField(h,v+=vs,95,"Tiekėjas",Normal,VECode,false,VESClass);
  EnterSkip(PayVal);
  EditField(h2,v=vm,-40,"Pavadinimas",Normal,VEName,false,0);
    if (IsEnterprise) then begin
  EditField(h2,vm=(v+=20),95,"Sulaik. suma",Normal,HoldSum,true,0);
    end else begin
      EditField(h2,v+=vs,80,"Faktūros data",Normal,InvDate,false,PasteCurDate);
      EditField(h3,v,90,"Nuoroda",Normal,RefStr,false,0);
    end;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
    if (IsEnterprise) then begin
  EditField(h,v+=vs,95,"Viso",Normal,PayVal,true,0);
  EditField(h2,v,95,"PVM",Normal,VATVal,true,0);
    end;
    tilenr = 1;
    TileButton(tilenr,"Terminai"); tilenr = tilenr + 1;
    TileButton(tilenr,"Kaštai"); tilenr = tilenr + 1;
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
    if (IsEnterprise) then begin
      if (HasLocalization("UKR")) then begin
      TileButton(tilenr,"PVM kursas"); tilenr = tilenr + 1;
      end;
      TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1;
      TileButton(tilenr,"Sąskaitos"); tilenr = tilenr + 1;
      TileButton(tilenr,"Fakt. adresas"); tilenr = tilenr + 1;
    end;
    tilenr = 1;
    Tile(tilenr,90,false,tilenr,InvDate); tilenr = tilenr + 1;
    if (IsEnterprise) then begin
			vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
			EditField(h1,vm=(v=6),82,"Fakt. data",Normal,InvDate,false,PasteCurDate);
			EditField(h1,v+=vs,25,"Mok. terminas",Normal,PayDeal,false,PDSClass);//PDSClass
			EditField(h1,v+=vs,82,"Operacijos data",Normal,TransDate,false,PasteCurDate);
			EditField(h1,v+=vs,82,"Apmokėti iki",Normal,DueDate,false,0);
      if (HasLocalization("POL")) then begin
        EditField(h1,v+=vs,82,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
      end;
    end else begin
      EditField(h,v=6,80,"Tiek. fakt. nr.",Normal,InvoiceNr,false,0);
      EditField(h,v+=vs,80,"VISO",Normal,PayVal,true,0);
      EnterSkip(PayDeal);
      EditField(h,v+=vs,80,"PVM",Normal,VATVal,true,0);
    end;
    if (IsEnterprise) then begin
  EditField(h2,v=vm,135,"Tiek. fakt. nr.",Normal,InvoiceNr,false,0);
  EditField(h2,v+=vs,135,"Pasirašo",Normal,OKPersons,false,UserSClass);
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Nuoroda",Normal,RefStr,false,0);
    end else begin
      EditField(h2,v=6,22,"Mok. sąl.",Normal,PayDeal,false,PDSClass);
      EnterSkip(Math);
      EditField(h2,v+=vs,80,"Op. data",Normal,TransDate,false,PasteCurDate);
      EditField(h2,v+=vs,80,"Apmok. data",Normal,DueDate,false,0);
    end;
    if (IsEnterprise) then begin
  EditField(h3,v=vm,82,"Gavimo data",Normal,RcvDate,false,PasteCurDate);
  EditField(h3,v+=vs,82,"Nuol. data",Normal,RebDate,false,PasteCurDate);
  EditField(h3,v+=vs,82,"Nuolaida",Normal,RebVal,true,0);
  EditField(h3,v+=vs,82,"Faktūros kreditas",Normal,CredInv,false,APSClass);
  EditField(h3+150,v,-20,"Priežastis",Normal,StandProblemCode,false,StandProblemsSClass); //EBS
    end else begin
      EditField(h3,v=6,90,"Faktūros kreditas",Normal,CredInv,false,APSClass);
      EditField(h3,v+=vs,90,"Banko sąskaita",Normal,BankAcc,false,0);
      EditField(h3,v+=vs,90,"Trumpas kodas",Normal,SortCode,false,0);
      v = 6;
      if (HasLanguages) then begin
        EditField(h4,v,90,"Kalba",Normal,LangCode,false,LangSClass);
        v = v + vs;
      end;
      if (HasObjects) then begin
        EditField(h4,v,90,"Objektai",Normal,Objects,false,ObjSClass);
        v = v + vs;
      end;
    end;
  EnterSkip(Math);
    if (HasAdvancedAccounting) then begin
  CheckBox(h4,v=6,0,"Sulaikyti",Closed);
      if (StandardHansa==false) then begin
  CheckBox(h4,v+=16,0,"Prel. Užsak.",PrelBook);
      end;
    end;
    Tile(tilenr,130,true,tilenr,Math); tilenr = tilenr + 1;
  EditField(140,-21,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasWithholdingTax) then begin
      if (StandardHansa==false) then begin
  EditField(270,-20,70,"Su. mok.",Normal,WithHoldingTax,true,0);
      end;
    end;
    if (HasExtTax) then begin
  EditField(410,-20,70,"Be. mok.",ViewOnly,TAX1Sum,true,0);
    end;
  EditField(-120,-20,70,"Skaičiuoti PVM",ViewOnly,CalcVATVal,true,0);
//  SoftEditField(-144,-21,70,"Subtotal",ViewOnly,"NettVal",true,0,M4Val,255);
  EnterSkip(Math);
//  CheckBox(20,-21,0,"OK",OKFlag);
  h=4;
    if (HasModNL) then begin
    if (IsEnterprise) then begin
  MatrixBegin(h,v=24,-50,-24,-,299);
    end else begin
      MatrixBegin(h,v=24,-27,-24,-,99);
    end;
  MatTypedRow(stp); //??
  MatOverStrike(ovst);
    flipnr = 0;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kInvoiceRowTypeNormal,32,"Sąsk.",0,AccNumber,false,AccSClass);
    if (HasObjects) then begin
      MatCol(t,90,"Objektai",0,Objects,false,ObjSClass);
    end;
  MatText(t=6,32,"Išankstinio numeris",true);
      MatCol(t,208,"",0,PrepayNr,false,APPay3SClass);
      MatCol(t,-266,"",0,Comment,false,0);
  MatCol(t,-160,"",0,PrepayAmount,true,0);/* Price holds the VAT sum, Recipe holds the date of prepaym. */
  MatCol(t,-70,"",0,VATVal,true,0);

      MatText(t=kInvoiceRowTypeEmployee,32,"Sumokėti darbuotojui",true);
      MatCol(t,158,"",0,UserCode,false,UserSClass);
      MatCol(t,-406,"",0,AccNumber,false,0);
      MatCol(t,-306,"",0,Objects,false,0);
      MatCol(t,-206,"",0,Comment,false,0);

      MatText(t=kInvoiceRowTypeDownpayment,32,"Avansas",true);
      MatColTL(t,122,"",0,-1,ViewOnly,0,Item,true,0);
      MatColTL(t,208,"",0,-1,ViewOnly,0,qty,true,0);
      MatCol(t,268,"",0,Comment,false,0);
//      MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
//      MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);
      MatColTL(t,-170,"",0,-1,Normal,0,Sum,true,0);
      if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
        MatCol(t,-100,"",0,AccNumber,false,AccSClass);
        MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
      end else begin
        MatCol(t,-90,"",0,AccNumber,false,AccSClass);
        MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
      end;

    MatText(t=kInvoiceRowTypeRetention,32,"Mokėjimo atidėjimas",true);
  MatCol(t,100,"",0,Comment,false,0);
      if (HasModTS) then begin
  MatCol(t,-340,"Projektas",0,PRCode,false,PRSClass);
      end;
  MatCol(t,-210,"Sąskaita",0,AccNumber,false,AccSClass);
  MatCol(t,-110,"Suma",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(t,-30,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Sulaikymo mok.",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,AccNumber,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Comment,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
      t = 1; pos = 180;
      if (HasAdvancedAccounting) then begin
        MatCol(t,pos,"Trumpas",0,ACShort,false,ACShortSClass);
        pos = pos + 60;
      end;
      MatCol(t,pos,"Aprašymas",0,Comment,false,0);
  MatCol(t,-120,"Suma",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(t,-30,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  //  MatCol(t,-30,"TT",0,TaxTemplateCode,false,VATCodeSClass);
      if (HasAdvancedStock or HasModTS or HasModPO) then begin
      Flip(flipnr); flipnr = flipnr + 1;
        pos = 140;
        t=1;
        if (HasAdvancedStock) then begin
          MatCol(t,pos,"Užsakymo tipas",0,OrderType,false,0);
          MatCol(t,-360,"Sandėlio tipas",0,StockType,false,SetSClass);
        end else begin
          MatCol(t=1,pos,"Aprašymas",0,Comment,false,0);
        end;
  MatCol(t,-260,"Suma",0,Sum,true,0);
  MatCol(t,-190,"Prekė",0,Item,false,INSClass);
  MatCol(t,-130,"Kiekis",0,qty,true,0);
        if (HasModTS) then begin
  MatCol(t,-100,"Projektas",0,PRCode,false,PRSClass);
        end;
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(t,-30,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatText(3,270,"",true);
      end;
      if (HasSimAccruals) then begin
      Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kInvoiceRowTypeNormal,140,"Aprašymas",0,Comment,false,0);
  MatCol(t,-260,"Suma",0,Sum,true,0);
  MatCol(t,-180,"Sukaupta",0,PeriodCode,false,AutSimPerSClass);
  MatCol(t,-80,"PVM",0,VATVal,true,0);
      end;
      if (HasAdvancedStock or HasSerialNumbers) then begin
      Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kInvoiceRowTypeNormal,140,"Aprašymas",0,Comment,false,0);
  MatCol(t,-350,"Prekė",0,Item,false,INSClass);
        if (HasSerialNumbers) then begin
  MatColTL(t,-250,"Serij. nr.",0,-1,ViewOnly,-1,SerialNr,false,0);
        end;
  MatCol(t,-130,"Kiekis",0,qty,true,0);
        if (HasAdvancedStock) then begin
  MatColTL(t,-70,"Kainos pokytis",0,-1,ViewOnly,-1,VarianceAmount,false,0);
        end;
      end;
      if (HasModAT2) then begin
      Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kInvoiceRowTypeNormal,140,"Aprašymas",0,Comment,false,0);
  MatCol(t,-300,"Inventorinis Nr.",0,InventoryNr,false,AT2UnitSClass);
  MatCol(t,-150,"Turto oper. tipas",0,AssetTransType,false,SetSClass);
    end;
      InsertRowTest;
      DeleteRowTest;
//      RowMenuBegin("");
//      EndRowMenu;
      EndMatrix;
  vs = 20;
    v = 18;
    if (flipnr>2) then begin
      for (f=1;f<flipnr;f=f+1) begin
        VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
        v = v + vs;
        end;
      end;
    end;

    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
  vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
  EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
    if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
    end else begin
        EditField(h1,v+vs,50,"Baz. valiuta",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Baz. val. 2",Normal,BaseRate2,true,0);
    end;
    if (IsEnterprise) then begin
      if (HasLocalization("SVK,UKR")) then begin
      Tile(tilenr,70,false,tilenr,VATFrRate); tilenr = tilenr + 1;
  vs = 20;
        EditField(h=110,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
        EditField(h,v+vs,50,"Baz. val. 1",Normal,VATBaseRate1,true,0);
        EditField(h,v+(vs*2),50,"Baz. val. 2",Normal,VATBaseRate2,true,0);
        EditField(h2=295,v,50,"#PVM# kursas",Normal,VATFrRate,true,0);
        RateField(h3=360,v,50,":",Normal,"VATToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
        RateField(h3,v+=vs,50,":",Normal,"VATToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
      end;
      Tile(tilenr,110,false,tilenr,PRCode); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 550; h4 = -100;
      if (StandardHansa==false) then begin
  EditField(h1,v=vm,82,"Faktoringas",Normal,VEFactoring,false,VESClass);
        EditField(h1,v+=vs,82,"Filialas",ViewOnly,BranchID,false,0);
      end else begin
        EditField(h1,v=vm,82,"Filialas",ViewOnly,BranchID,false,0);
      end;
  EditField(h1,v+=vs,82,"Tiek. Val. Suma",Normal,SupCurVal,false,0);
  EditField(h1,v+=20,82,"Statist. vertė",Normal,StatVal,true,0);
  EditField(h1,v+=vs,-20,"Komentaras",Normal,Comment,false,0);
  EditField(h2,v=vm,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
      if (HasSalesGroup) then begin
  EditField(h2,v+=vs,80,"Pard. grupė",Normal,SalesGroup,false,SalesGroupSClass);
    EditField(h2+160,v,80,"Org. Tiek.",ViewOnly,OrgVE,false,0);
      end;
  EditField(h2,v+=vs,80,"Kalba",Normal,LangCode,false,LangSClass);
  EditField(h2,v+=vs,80,"Kredit. sąsk.",Normal,APAcc,false,AccSClass);
  CheckBox(h3,v=6,0,"Tiek. info. operac.",APonTR);
      if (HasLocalization("PRT")==false) then begin
        CheckBox(h3,v+=16,0,"Self Billing",SelfBilling);
      end;
      CheckBox(h3,v+=16,0,"Siųsti mokėj. PVM",OPBookVAT);
      if (HasLocalization("ARG")) then begin
        CheckBox(h3,v+=16,0,"Fiscal Invoice",FiscalFlag);
      end;
      Tile(tilenr,90,false,tilenr,POSerNr); tilenr = tilenr + 1;
  EditField(h1,v=vm,82,"P/Užsak. Nr.",ViewOnly,POSerNr,false,0);
      if (StandardHansa==false) then begin
  EditField(h1,v+=vs,82,"P/U Proceso Nr.",Normal,POCQStatNr,false,POCQStatSClass);
  EditField(h1,v+=vs,82,"Pasl. Siunt. Data",Normal,ServiceDelDate,false,PasteCurDate);
        if (HasLocalization("ARG")) then begin
  EditField(h1,v+=vs,82,"CAE galiojimas",Normal,CAEExpiry,false,PasteCurDate);
        end;
      end;
  EditField(h2,v=vm,135,"Banko kd.",Normal,BankCode,false,BankSClass);
  EditField(h2,v+=vs,135,"Banko sąsk.",Normal,BankAcc,false,VEBankAccSClass);
  EditField(h2,v+=vs,135,"Trump. kd.",Normal,SortCode,false,0);
      if (HasLocalization("ARG")) then begin
        EditField(h2,v+=vs,135,"CAE",Normal,CAE,false,0);
      end;
      v = vm;
      if (HasLocalization("ARG,BOL")) then begin
        EditField(h3,v,-20,"Tax Authority ID",Normal,TaxAuthID,false,0);
        EditField(h3,v+=vs,-20,"Valdymo kodas",Normal,TaxAuthIDCC,false,0);
      end;
      EditField(h3,v+=vs,-20,"Barkodas",Normal,BarCode,false,0);
      EditField(h3,v+=vs,-20,"Mok. kodas",Normal,PaymentCode,false,PaymentCodeSClass);
  /*
  EditField(h2,v,30,"Sup. VAT-Code",Normal,VEVatCode,false,VATCodeSClass);
  EditField(h3,v,80,"Official Ser. No.",Normal,OfficialSerNr,false,0);
*/
      Tile(tilenr,250,false,tilenr,Addr1); tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Faktūra"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Šalis",Normal,InvCountry,false,CountrySClass);
      if (HasApprovals) then begin
        SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255); //!!TRANSLATE
/*
  ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalauta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);
*/
        v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
      end else begin
        v = VATZoneButtonsLabelslit(h3=290,v=vm+20,170,16);
      end;
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"PVM Reg. Nr.",Normal,VATNr,false,0);
      if (HasLocalization("HRV,SVN")) then begin
      EditField(h2,v+=vs,50,"Legali forma",ViewOnly,VELegalForm,false,0);
      end;
  EditField(h2,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Faksas",Normal,Fax,false,0);
    end;
  SpecialMenu("Subalansuoti",'=',0,"BalanceVIDsm");
    if (HasIntegratedNL) then begin
  SpecialMenu("Faktūros būklė",'r',2,"VIInfoVIDsm");
    end;
    if (HasModTS) then begin
  SpecialMenu("Pridėti išskaitymus",' ',25,"RetentionLineVIDsm");
    end;
    if (HasWithholdingTax) then begin
  SpecialMenu("Pridėti sulaikymo mokestį",' ',26,"WithholdingLineVIDsm");
    end;
    if (HasEInvoicing) then begin
  SpecialMenu("Atidaryti E-Pirkimo faktūros pdf",' ',13,"OpenVEIVPDFDsm");
    end;
    if (HasModNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',5,"OpenTRFromVI");
    end;
    if (HasAdvancedAccounting) then begin
  SpecialMenu("Atidaryti pleminarią DK oper.",' ',13,"OpenTRFromVI2");
    end;
    if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
  SpecialMenu("Prijungti prie išankstinio",' ',6,"ConnectToPrepayVIDsm");
  end;
	if (HasModIN and HasAdvancedAccounting) then begin
		if (StandardHansa==false) then begin
			SpecialMenu("Nesuderintas POS",' ',11,"PUNotReconVIDsm");
		end;
		SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
	end;
    if (HasTaxMatrix) then begin
      SpecialMenu("Atidaryti mokesčių matricą",' ',25,"OpenVatMatrixVIDsm");
    end;
		if (HasModCL) then begin
			SpecialMenu("Spausdinti kasos pajamas/išlaidas",' ',3,"PrintCashInOutVIDsm");
    end;
    if (HasApprovals) then begin
      SpecialMenu("Patvirtinimo užklausa",' ',6,"VISendforAcceptanceVIDsm");
      SpecialMenu("Atšaukti patvirtinimo užklausą",' ',2,"CancelApprovalRequestDsm");
		end;
		SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModCRM) then begin
//  		SpecialMenu("Sukurti veiklą",'c',4,"ActFromVIDsm");
    end;
    if (HasModAT2) then begin
  		SpecialMenu("Sukurti turtą ",' ',7,"CreateAT2FromVI");
    end;
    if (HasModCL) then begin
  		SpecialMenu("Sukurti išmokėjimą",' ',8,"DoCLOutFromVID");
  	end;
  	SpecialMenu("Sukurti kredito pažymą",' ',15,"CreateCreditNoteVIDsm");
    if ((HasModNL and HasMultiCurrency) and (StandardHansa==false)) then begin
  		SpecialMenu("Sukurti vidinę faktūrą",' ',12,"IntIVFromVIDsm");
    end;
    if (HasLocalization("UKR")) then begin
  		SpecialMenu("Sukurti First Event",' ',10,"FirstEventVIDsm");
    end;
    if (HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) and (HasIntegratedNL) then begin
  		SpecialMenu("PVM koregavimas pirk. kn.",' ',9,"VATCorrectionVIsm");
    end;
  end;
  EndWindow;
end;

window PIVGPRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("BP, POS faktūros",PIVGPRClass,CGRcW,RcType);
  SetWRect(20,80,450,300);
  vs = 20;
  PeriodField(h=155,v=6,"Periodas");
  EditFieldTL(h,v+=vs, 150,"Faktūros nr.",   M4Str,Normal,30,f1,false,0);
  EditFieldTL(h,v+=vs ,150,"Pirkėjas",M4UStr,Normal,50,f2,false,CUSClass);
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=vs,150,"Pirkėjo klasė",M4UStr,Normal,30,f8,false,CClassSClass);
  end;
  if (HasCategories) then begin
    EditFieldTL(h,v+=vs,50,"Pirkėjo kategorija",M4UStr,Normal,5,f9,false,CCatSClass);
  end;
  EditFieldTL(h,v+=vs ,100,"Pardavėjas",M4UStr,Normal,10,AccStr,false,UserSClass);
  EditFieldTL(h,v+=vs ,150,"Prekė",M4UStr,Normal,20,FirstAcc,false,INSClass);
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=vs ,80,"Prekės grupė",M4UStr,Normal,5,LastAcc,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs ,150,"Prekės klasė",M4UStr,Normal,200,f6,false,DISClass);
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=vs ,150,"Objektas",M4UStr,Normal,60,ObjStr,false,ObjSClass);
    EditFieldTL(h,v+=vs ,150,"Objektas iš eilutės (Detaliai)",M4UStr,Normal,60,f3,false,ObjSClass);
  end;
  EditFieldTL(h,v+=vs ,50,"Mokėjimo tipas",M4UStr,Normal,5,TransStr,false,PDSClass);
  EditFieldTL(h,v+=vs,50,"Lokalus kompiuteris",M4UStr,Normal,5,f7,false,0);
  EditFieldTL(h,v+=vs,80,"Patalpa",M4UStr,Normal,5,f4,false,LocationSClass);
  EditFieldTL(h,v+=vs,50,"Stalčius",M4UStr,Normal,5,f5,false,DrawerSClass);
  ButtonFrame(h,vm=(v+=41),140,5,"Funkcija");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode);
  RadioButton(h,v+=16,2,0,"Peržiūra per valandą",ArtMode); // EVS: DOL-5
  RadioButton(h,v+=16,4,0,"Peržiūra per pardavėją",ArtMode); // EVS: DOL-76
  RadioButton(h,v+=16,3,0,"Tik Viso",ArtMode); // EVS: DOL-61
  RadioButton(h,v+=16,1,0,"Detaliai",ArtMode);
  CheckBox(h+15,v+=16,0,"Tik su Nuol.",flags[3]); // EVS: DOL-5
  EndFrame;
  CheckBox(h,v+=20,0,"Tik patvirtintas",flags[4]); // EVS: DOL-61
  EndWindow;
end;

window INDClass:8
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;

  WindowBegin("Prekė",INDClass,CGview,-);
  SetWRect(20,80,830,400);
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Image"); //!!TRANSLATE
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code);
  end else begin
  Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433;
  EditField(h,v, 150,"Nr.",Normal,Code,false,0);
  EditField(h2,v,80,"Grupė",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-40,"Aprašymas",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,150,"Alternatyvus kodas",Normal,AlternativeCode,false,0);
  end;
  tilenr = 1;
  TileButton(tilenr,"Kainos"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"Jewellery"); tilenr = tilenr + 1;
    TileButton(tilenr,"Watch"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Atsargos"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  TileButton(tilenr,"Sandėlis"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Gamyba"); tilenr = tilenr + 1;
  TileButton(tilenr,"Sąsk."); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Paveiksliukas"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Įvairovės"); tilenr = tilenr + 1;
  TileButton(tilenr,"Tekstas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Savik. sk."); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  TileButton(tilenr,"Vart. laukai"); tilenr = tilenr + 1;
  end;
    TileButton(tilenr,"Žinutės"); tilenr = tilenr + 1;
  if (HasCharts) then begin
  TileButton(tilenr,"BI"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Shopify"); tilenr = tilenr + 1;
  tilenr = 1;
  CheckBox(h,v+=vs,0,"Uždaryta",Terminated);
  CheckBox(h2-30,v,0,"Neparduodama",NotForSales); //EBS edit
  CheckBox(h2+140,v,0,"Neatnaujinti prekės pavadinimo",DoNotUpdName); //EBS
  Tile(tilenr,249,false,tilenr,Unittext); tilenr = tilenr + 1; //EBS edit tile height
  EditField(h,v=6 ,100,"Vienetas",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Cost Price",Normal,InPrice,true,0);
  end;
  EditField(h,v+=vs,100,"Pradinė kaina",Normal,InitPrice,true,0); //EBS
  EditField(h,v+=vs,100,"Nuolaida %",Normal,InitDisc,true,0); //EBS
  EditField(h,v+=vs,100,"Kaina",Normal,UPrice1,true,0);
  EditField(h,v+=vs,100,"Shopify Kaina",Normal,ShopifyPrice,true,0); // EVS: DOL-167
  EditField(h,v+=vs,100,"Kainos pasikeitimas",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Kainos faktorius",Normal,PriceFactor,true,0);
  EditField(h,v+=vs,100, "Prekės formulė",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Antkainio %",Normal,Markup,true,0);
  EditField(h,v+=vs,100,"Premijos %",Normal,Bonus,true,0);
  EditField(h,v+=vs,-240,"Objektai",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
  EditField(h,v+=vs,-240,"Klasės",Normal,DispGroups,false,DISClass);
  end;
  if (StandardHansa==false) then begin
  ButtonFrame(h1,v=24,120,4,"Prekės tipas");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Prekės tipas");
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Paprasta",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"Sandėliuojama",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Struktūrinė",ItemType);
  if (StandardHansa==false) then begin
  RadioButton(h1,v+=16,kItemTypeService,0,"Paslauga",ItemType);
  end;
  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Pridėti pav.");
  end;
  if (StandardHansa==false) then begin
  CheckBox(h1,v+=32,0,"Prekė - projekto medžiaga",ItemMaterial);
  end;
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Metal",Normal,Metal,false,0);
    EditField(h,v+=vs, 140,"Weight",Normal,RowWeight,false,0);
    EditField(h,v+=vs, 140,"Size",Normal,Size,false,0);
    EditField(h,v+=vs, 140,"Length",Normal,Length,false,0);
    EditField(h,v+=vs, 140,"Reference",Normal,Reference,false,0);
    v = 6;
    EditField(h5,v, 140,"Major Stone Detail",Normal,MajStoneDet,false,0);
    EditField(h5,v+=vs, 140,"Colour",Normal,Colour,false,0);
    EditField(h5,v+=vs, 140,"Clarity",Normal,Clarity,false,0);
    EditField(h5,v+=vs, 140,"Certificate",Normal,Cert,false,0);
    EditField(h5,v+=vs, 140,"Minor Stone Detail",Normal,MinStoneDet,false,0);
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Watch Brand",Normal,WatchBrand,false,0);
    EditField(h,v+=vs, 140,"Style Name",Normal,StyleName,false,0);
    EditField(h,v+=vs, 140,"Watch Metal",Normal,WatchMetal,false,0);
    EditField(h,v+=vs, 140,"Movement",Normal,Movement,false,0);
    v = 6;
    EditField(h5,v, 140,"Bracelet/Strap",Normal,BrcStr,false,0);
    EditField(h5,v+=vs, 140,"Gender",Normal,Gender,false,0);
    EditField(h5,v+=vs, 140,"Other",Normal,Other,false,0);
    EditField(h5,v+=vs, 140,"Other2",Normal,Other2,false,0);
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Serijinio nr. kontrolė");
  RadioButton(h1,v,0,0,"Nėra",SerNrf);
  RadioButton(h1,v+=16,1,0,"Vnt.",SerNrf);
  RadioButton(h1,v+=16,2,0,"Siuntos",SerNrf);
    CheckBox(h1+200,v,0,"Nereikalauti siuntos nr. POS faktūrose",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Min. lygis",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Maks. lygis",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Skyrius",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Lentynos kodas",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Šaltinis, nenur. kitaip",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Aplinkos aps. mokestis/kg.",Normal,RepaPricePerWeight,true,0);
  EditField(h6=650,v ,80,"Pagrindinis Užsk. tipas",Normal,DefOrderType,false,SetSClass);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Rizikos lygis",Normal,HazLevCode,false,HazLevSClass);
  EditField(h5,v ,50,"Alkoholio %",Normal,AlcPrc,true,0);
  end;
  EditField(h,v+=vs ,100,"Vnt. 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Konversija 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Vnt. koeficientas",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Konversija 2",Normal,Conversion2,true,0);
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Prekės plotis",Normal,Width,true,0);
    EditField(h4,v ,50,"Aukštis",Normal,Height,true,0);
    EditField(h5,v ,50,"Gylis",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Prekės tūris",Normal,Volume,true,0);
    EditField(h4,v ,50,"Tankumas",Normal,Density,true,0);
    EditField(h5,v ,50,"Svoris",Normal,Weight,true,0);
  end;
  if (StandardHansa==false) then begin
  Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6) ,100,"Pagrindinė paletės prekė",Normal,DefPalletItem,true,INSClass);
  EditField(h5,v ,80,"Pakrovimo sritis",Normal,PickArea,false,LocAreaSClass);
  EditField(h,v+=vs ,100,"Pagr. patalpos sritis",Normal,LocArea,false,LocAreaSClass);
  EditField(h5,v ,50,"Palečių pakrov. srityje",Normal,PalletsInPickArea,true,0);
  EditField(h,v+=vs ,50,"Maks. kiekis paletėje",Normal,QtyonPallet,true,0);
  EditField(h4,v ,50,"Paletės sl.",Normal,PalletLayers,true,0);
  EditField(h5,v ,50,"Kiekis sluoksnyje",Normal,QtyonPalletLayer,true,0);
  EditField(h,v+=vs ,50,"Pal. plotis",Normal,PalletWidth,true,0);
  EditField(h4,v ,50,"Pal. aukštis",Normal,PalletHeight,true,0);
  EditField(h5,v ,50,"Pal. gylis",Normal,PalletDepth,true,0);
  EditField(h,v+=vs ,50,"Viet. plotis",Normal,DefPosWidth,true,0);
  EditField(h4,v ,50,"Viet. aukštis",Normal,DefPosHeight,true,0);
  EditField(h5,v ,50,"Viet. gylis",Normal,DefPosDepth,true,0);
  EditField(h,v+=vs ,50,"Plotis",Normal,Width,true,0);
  EditField(h4,v ,50,"Aukštis",Normal,Height,true,0);
  EditField(h5,v ,50,"Gylis",Normal,Depth,true,0);
  EditField(h,v+=vs ,50,"Tūris",Normal,Volume,true,0);
  EditField(h4,v ,50,"Tankis",Normal,Density,true,0);
  EditField(h5,v ,50,"Neto svoris",Normal,NetWeight,true,0);
  EditField(h5,v+=vs ,50,"Svoris",Normal,Weight,true,0);
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),100,"Savikaina",Normal,InPrice,true,0);
  if (StandardHansa==false) then begin
  EditField(h5,v,70,"Savik. pasikeitimas",ViewOnly,LastPriceChange,true,0);
  end else begin
    EditField(h3,v,70,"Savik. pasikeitimas",ViewOnly,LastPriceChange,true,0);
  end;
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Savik. bazine val. 2",Normal,InPriceB2,true,0);
  ButtonFrame(h1,v+=24,200,4,"Savik. atnaujinimas po gavimo");
  end else begin
    ButtonFrame(h1,v+=40,210,4,"Savik. atnaujinimas po gavimo");
  end;
  RadioButton(h1,v,0,0,"Nėra",UpdateCost);
  RadioButton(h1,v+=16,1,0,"Paskutinio pirkimo kaštai(su pap. kašt.)",UpdateCost);
  RadioButton(h1,v+=16,2,0,"Svertinis vidurkis",UpdateCost);
  RadioButton(h1,v+=16,3,0,"Paskutinio pirkimo kaštai(be pap. kašt.)",UpdateCost);
  ButtonFrame(h5=540,v=v-3*16,200,3,"Atnaujinti savik. Sand. perkainavimuose");
  RadioButton(h5,v,0,0,"Neatnaujinti",SRUpdateCost);
  RadioButton(h5,v+=16,1,0,"Paskutinio perkainavimo savik.",SRUpdateCost);
  RadioButton(h5,v+=16,2,0,"Svert. vidurkis",SRUpdateCost);
  if (StandardHansa==false) then begin
  EditField(h,v=vm+2*vs,100,"Papildomi kaštai",Normal,ExtraCost,true,0);
  end else begin
    EditField(h,v=vm+vs,100,"Papildomi kaštai",Normal,ExtraCost,true,0);
  end;
  EditField(h,v+=vs ,100,"Svertinis vid.",Normal,WeighedAvPrice,true,0);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Svertinis vid. bazine val. 2",Normal,WeighedAvPriceB2,true,0);
  end;
  EditField(h,v+=vs ,100,"Pask. pirkimo kaštai(su pap. kašt.)",Normal,LastPurchPrice,true,0);
  EditField(h,v+=vs ,100,"Pask. pirkimo kaina(be. pap. kašt.)",Normal,LastPurchPrice2,true,0);
  EditField(h,v+=vs ,100,"Pask. pirkimo val.",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,100,"Fiksuotas frachtas",Normal,FixedFreight,true,0);
  CheckBox(h1,v,0,"Įtraukti fiksuotą prekės frachtą",InclItemFreight);
  CheckBox(h5,v,0,"Turi akcizą",HasExcise);
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Ruošinys",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Rodyti komponentus dokumentuose",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Faktūros ruošinys",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Brūkšn. kodas",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Kontrakto prekė",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Prek. nuom. kd.",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Nuomos faktūravimas",Normal,RentalItem,false,INSClass);
  end;
  EditField(h2,v,150,"ECN kodas",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Produktų ir paslaugų klasės",Normal,CPSCode,false,0);
  end;
  EditField(h,v+=vs ,120,"Garantija mėn.",Normal,WarrantyLength,true,0);
  EditField(h2,v,150,"Spalva",Normal,colnr,false,SetSClass);
  EditField(h,v+=vs,-40,"Alt. kodas",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Perspėjimas",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"Vietinė pard. sąsk.",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameLIT & "Pardavimų sąsk.",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Ne ES pard. sąsk.",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs,55,"Pasl. fakt. pard sąsk.",Normal,SVOInvbleSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Pasl. garant. pard. sąsk.",Normal,SVOWarrantySalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Pasl. sut. pard. sąsk.",Normal,SVOContractSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Pasl. Goodwill pard sąsk.",Normal,SVOGoodwillSalesAcc,false,AccSClass);//?
  end;
  EditField(h,v+=vs,55,"Komponentų panaudojimas",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Proj. medžiagų pan. sąsk.",Normal,ProjMaterialsUsageAcc,false,AccSClass);

  EditField(h2=360,v=vm,55,"Viet. savik. sąsk.",Normal,CostAcc,false,AccSClass);
 EditField(h2,v+=vs,55,VATZoneNameLIT & "Savikainos sąsk.",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Ne ES savik. sąsk.",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  EditField(h2,v+=vs,55,"Pasl. fakt. savik. sąsk.",Normal,SVOInvbleCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. garant. savik. sąsk.",Normal,SVOWarrantyCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. sut. savik. sąsk.",Normal,SVOContractCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. Goodwill savik. sąsk.",Normal,SVOGoodwillCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Viešb. WIP sąsk.",Normal,HotelWIPAcc,false,AccSClass);
  end;
  EditField(h2=530,v=vm,20,"Viet. PVM kd.",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,20,VATZoneEditFieldLabelLIT(1) & "PVM kodas",Normal,VATCodeEU,false,VATCodeSClass);
  EditField(h2,v+=vs,20,"Ne ES PVM kd.",Normal,VATCodeExp,false,VATCodeSClass);
  CheckBox(h2,v+=20,0,"Skaičiuoti percepc.mokesčius",Perceptions);
  if (StandardHansa==false) then begin
   CheckBox(h2,v+=16,0,"Skaičiuoti sulaikymo mokesčius",Withholdings);
  EditField(h2=670,v=vm,50,"Viet. mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
  EditField(h2,v+=vs,50,VATZoneEditFieldLabelLIT(1) & "Mok. šabl.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
  EditField(h2,v+=vs,50,"Eksp. mok. šabl.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Įvairovių šablonas",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Ataskaitos eilė",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Poaibiai",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Kalba",0,LangCode,false,LangSClass);
  MatCol(1,94,"Tekstas",0,Text,false,0);
  EndMatrix;
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Pirminis savikainos modelis");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Įsigijimo kaina",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _nuo bazinės kainos",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Svertinis vidurkis",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Eilė",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"Jokio",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Eilės savikainos modelis");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Savikaina serijiniams nr.");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Savikaina ne serijiniams nr.",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Savikaina serijiniams nr.",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Eilės modelis pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Eilė ne pagal patalpą",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Eilė pagal patalpą",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"Svertinis vid. pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"Svert. vid. ne pagal patalpą",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"Svert. vid. pagal patalpą",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Savikaina patalpai");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Savikaina ne pagal patalpą",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Savikaina patalpai",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
  h = 180; v = 6;
  label = UserDefined("INVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
  end;
  label = UserDefined("INVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
  end;
  label = UserDefined("INVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
  end;
  label = UserDefined("INVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
  end;
  label = UserDefined("INVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
  end;
  label = UserDefined("INVc","UserVal1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
  end;
  label = UserDefined("INVc","UserVal2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
  end;
  label = UserDefined("INVc","UserVal3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
  end;
  label = UserDefined("INVc","UserDate1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
  end;
  label = UserDefined("INVc","UserDate2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
  end;
  label = UserDefined("INVc","UserDate3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
  end;
  end;
  Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Žinutė",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
  end;
  // EVS: DOL-166
  Tile(tilenr,400,false,tilenr,ShopifyID); tilenr = tilenr + 1;
  EditField(h,v=20,120,"Shopify ID",Normal,ShopifyID,false,0);
  // :EVS
  if (UserCanReport("INInfoRn","",true)) then begin
  SpecialMenu("Prekės būklės ataskaita",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Perskaičiuoti kainoraštį",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
  SpecialMenu("Prekės istorija",'h',3,"INrsRn_INSm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Prekės patalpoje būklė",' ',4,"LocItemStatDsm");
  SpecialMenu("(-",' ',0,"");
  SpecialMenu("Update Item Stock in Shopify",' ',0,"DOLUpdItemStockDsm"); // EVS: DOL-166
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status per Alternative Code",'S',5,"ItemStatusAltINDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Sukurti perkamą prekė",' ',1,"PIFromINDsm");
  SpecialMenu("Sukurti ruošinį",' ',2,"RecFromINDsm");
  //SpecialMenu("Show",' ',2,"RecFromINDsm");
  EndWindow;
end;

window AvailVarsRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Įvairovių užklausa",AvailVarsRClass,CGRcW,RcType);
  SetWRect(20,80,450,280);
  v = 6; vs = 20; h = 120;
  EditFieldTL(h,v, 150,"Prekės nr.",   M4UStr,Normal,50,f1,false,INSClass);
  EditFieldTL(h,v+=vs, 150,"Alternatyvus kodas",M4Str,Normal,20,TransStr,false,0);
  EditFieldTL(h,v+=vs, 150,"Grupė",   M4UStr,Normal,5,f3,false,ITSClass);
  EditFieldTL(h,v+=vs, 150,"Patalpa",   M4UStr,Normal,10,f2,false,LocationSClass);
  EditFieldTL(h,v+=vs, 150,"Įvairovės",   M4UStr,Normal,60,ObjStr,false,VARSClass);
  RadioButton(h+180,v,0,0,"arba",flags[22]);
  RadioButton(h+240,v,1,0,"ir",flags[22]);
  EditFieldTL(h,v+=vs, 150,"Praleisti įvairoves",   M4UStr,Normal,60,LastAcc,false,VARSClass);
  RadioButton(h+180,v,0,0,"arba",flags[25]);
  RadioButton(h+240,v,1,0,"ir",flags[25]);
  ButtonFrame(h,v+=40,120,4,"Funkcija");
  RadioButton(h,v,0,0,"Pagal prekė",flags[23]);
  RadioButton(h,v+=16,1,0,"Pagal patalpą",flags[23]);
  RadioButton(h,v+=16,2,0,"Pagal grupę",flags[23]);
  RadioButton(h,v+=16,3,0,"POS",flags[23]); // EVS: DOL-75
  CheckBox(h,v+=40,0,"Vertės - dviejų dešimtųjų tikslumus",flags[16]);
  CheckBox(h,v+=16,0,"Tik su lik.",flags[21]); // EVS: DOL-6
  EndWindow;
end;

window GiftVoucherTouchScreenDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs,v4;
  WindowBegin("Dovanų kupono apmokėjimas",GiftVoucherTouchScreenDClass,CGother,RcType);
  AutoSizeWindow(false);
//  Modality(kModalityGlobal);
  UseView(RcVc);
  SetWRect(20,200,660,540); //EBS edit
  h = 180; h2 = 170; v=40;

  EditFieldTLX(h+30,v=6,180,"Dovanų kup. Nr.",M4Str,Normal,100,25,patM4black,f1,false,GCSSClass); //EBS edit  // JP: DOL-63
  EditFieldTLX(h+30,v+=35,180,"Suma EUR",M4Val,Normal,100,25,patM4black,vals0,true,0);  // JP: DOL-63

  h2 = 55; v3 = 48; vs = 52;
  if (GuiType==kGuiiPhone or GuiType==kGuiMetro) then begin
    PopoverWindow;
  end;
  if (GuiType==kGuiiPhone) then begin
    h3 = -570; h4 = -400;
    v4 = v + 270;
  end else begin
    h3 = -520; h4 = -350;
    v = -385;
    v4 = -60;
  end;
  if (GuiType==kGuiiPhone) then begin
  ColourPushButton(h3,v4,h3+3*h2,v4+v3,"CancelGiftVoucherTouchScreenDClass","Atšaukti<BR>F2",20); //EBS edit
  ColourPushButton(h4,v4,h4+3*h2,v4+v3,"ProceedGiftVoucherTouchScreenDClass","Tęsti<BR>F1",20);
  end else begin
    ColourPushButton(h3,v4,h3+3*h2,v4+v3,"CancelGiftVoucherTouchScreenDClass","Atšaukti<BR>F2",20); //EBS edit
    ColourPushButton(h4,v4,h4+3*h2,v4+v3,"ProceedGiftVoucherTouchScreenDClass","Tęsti<BR>F1",20);
  end;

  hm = -170;   // JP DOL-63
  h2 = 80; v3 = 33; vs = 37; h3 = 210; h4 = 400;

  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;
  if (GuiType!=kGuiiPhone) then begin
    v = v +65; //EBS edit
  h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"ListGVTouchScreenDClass","Dov. kup. Sąrašas",2); //EBS
  v = v+vs; //EBS
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolKeyPadPoint",".",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"NPTSPaymentToolKeyEnter","Įvesti",2);

  end;
  EndWindow;
end;

window NPTSSearchItemRClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs,v4,v5;
  string 255 ButtonLabelCancel,ButtonLabelProceed;
  WindowBegin("Ieškoti prekės",NPTSSearchItemRClass,CGOther,RcType);
  SetWRect(64,80,585,410);
  UseView(RcVc); // EVS: DOL-17
  switch (GuiType) begin
    case kGuiAndroid: goto LLkGuiiPhone;
    case kGuiiPhone: PopoverWindow;
      LLkGuiiPhone:;
           vs = 40; v4 = -550; v5 = -380; ButtonLabelCancel = "Atšaukti"; ButtonLabelProceed = "Tęsti";
    otherwise
      vs = 20; v4 = -350; v5 = -180; ButtonLabelCancel = "Atšaukti<BR>F2"; ButtonLabelProceed = "Tęsti<BR>F1";
  end;

  hm = 20; l = 57; h2 = 55; v3 = 33; vs = 37; v = 20;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"RestAccToolKeyPadPoint",".",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyC","C",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyV","V",2);

  h = 270; v = 10; vs = 25;    // JP DOL-65
  EditFieldTL(h,v ,200,"Ieškoma prekė",M4Str,Normal,40,f1,false,0);
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs,200,"Klasė",M4Str,Normal,40,f2,false,0); //EBS removed Ctrl-enter window
  end;
  if (GuiType==kGuiiPhone) then begin
    v = v + 20;
  end;
  ButtonFrame(h,v+=50,123,6,"Ieškoti kur");
  ColourPushButton(h+140,v,h+215,v+50,"DOLOpenPSNPTSSearchItemRClass","Klasės",20); // EVS: DOL-17
  RadioButton(h,v,2,0,"Aprašymas",ArtMode);
  RadioButton(h,v+=16,1,0,"Nr.",ArtMode);
  if (HasItemGroups) then begin
  RadioButton(h,v+=16,3,0,"Grupė",ArtMode);
  end;
  if (IsEnterprise) then begin
  RadioButton(h,v+=16,4,0,"Alt. kodas",ArtMode);
  end;
  if (HasModIN) then begin
  RadioButton(h,v+=16,5,0,"Bazinė kaina",ArtMode);
  end;
  RadioButton(h,v+=16,0,0,"Visi",ArtMode);
  EndFrame;
  v3 = 33; vs = 37; h3 = 210; h4 = 400; hm = 330;

  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;

  v = -20;

  ColourPushButton(v4,v+4*vs,v4+3*h2,v+4*vs+v3,"CancelAndOverrideLogout",ButtonLabelCancel,20);
  ColourPushButton(v5,v+4*vs,v5+3*h2,v+4*vs+v3,"ProceedNPTSSearchItemRClass",ButtonLabelProceed,20);

  EndWindow;
end;

/*window INNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad,iPhone")
begin
  real h;

  if (GuiType!=kGuiCocoa) then begin
    // EVS: DOL-17
    WindowBegin("Įstatyti prekę",INNPTSSClass,CGother,HBlRecType);
  //  ToolBar;
  //  h = -216;

  //  EndToolBar;
    SetWRect(140,80,700,398);
    Sizeable(-1,-1,0,0);
  //  StringList2(9,9,-25,-10);
    ColourPushButton(-210,5,-120,45,"NPTSSearchItemCancel","Nutraukti",20);
    ColourPushButton(-100,5,-10,45,"NPTSSearchItemOnceMore","Pakartotinė paieška",20);
    DataList(9,55,-22,-6,"NPTSItemSearch");
    DataListColumn(1,6,90,AdjLeft,"ArtCode","Prekė",M4Code);
    DataListColumn(1,96,-105,AdjLeft,"ArtName","Pavadinimas",M4Str); //EBS edit pos
    DataListColumn(1,-100,-23,AdjLeft,"ArtPrice","Kaina",M423Val); //EBS AdjLeft
    EndWindow;
    // :EVS
  end else begin
    WindowBegin("Įstatyti prekę",INNPTSSClass,CGother,HBlRecType);
    ToolBar;
    h = -216;
    ColourPushButton(h,5,h+90,45,"NPTSSearchItemCancel","Nutraukti",20);
    ColourPushButton(-100,5,-10,45,"NPTSSearchItemOnceMore","Pakartotinė paieška",20);
    EndToolBar;
    SetWRect(240,80,700,398);
    Sizeable(-1,-1,0,0);
  //  StringList2(9,9,-25,-10);
    DataList(9,20,-22,-6,"NPTSItemSearch");
    DataListColumn(1,6,90,AdjLeft,"ArtCode","Prekė",M4Code);
    DataListColumn(1,96,-105,AdjLeft,"ArtName","Pavadinimas",M4Str); //EBS edit pos
    DataListColumn(1,-100,-23,AdjLeft,"ArtPrice","Kaina",M423Val); //EBS AdjLeft
    EndWindow;
  end;

end;*/


window INNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad,iPhone")
begin
  real h;

  WindowBegin("Įstatyti prekę",INNPTSSClass,CGother,HBlRecType);
  UseView(RcVc);
  //ToolBar;
  h = -216;
  //EndToolBar;
  ColourPushButton(h,5,h+90,65,"NPTSSearchItemCancel","Nutraukti",20);
  ColourPushButton(-100,5,-10,65,"NPTSSearchItemOnceMore","Pakartotinė paieška",20);
  //EndToolBar;
  SetWRect(140,80,700,398);
  SoftEditField(60,20,100,"Ieškoti",Normal,"f1",false,0,M4Str,255); 
  Sizeable(-1,-1,0,0);
//  StringList2(9,9,-25,-10);
  DataList(9,85,-22,-6,"NPTSItemSearch");
  DataListColumn(1,6,120,AdjLeft,"ArtCode","Prek. kd.",M4Code);
  DataListColumn(1,96,-105,AdjLeft,"ArtName","Pavadinimas",M4Str); //EBS edit pos
  DataListColumn(1,-100,-23,AdjLeft,"ArtPrice","Kaina",M423Val); //EBS AdjLeft
  EndWindow;
end;


window NPTSIVCashDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  date td;
  integer acnt,wn;
  longint bm,lt,rt,tp,page;
  real h,h2,h3,h4,v,fntszfct,fntsz1,fntsz2;
  record IVCashVc IVCashr;
  record LocalMachineBlock LMb;
  record POSButtonsVc POSBr;
  string 255 bc1,bc2,compname,lmc,nr,sessdesc,sm;
  time tt;
  Boolean sessionopenedf;

  BlockLoad(LMb);
  WindowBegin("POS Faktūra",NPTSIVCashDClass,CGview,-);
  WindowHasNoToolbar; // EVS: DOL-78
    wn = CurWindow;
    GetScreenSize(wn,tp,lt,bm,rt);
    switch (GuiType) begin
      case kGuiCocoa:
        bm = bm - 80;
      case kGuiWindowsDesktop:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiGDI:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiWPF:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
    end;

    page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
    if (page<1) then begin
      page = 1;
    end;
    //stopalert("about to call ReadPOSButtons, page:" & page);
  wn = CurWindow;
  if (wn>0) then begin
    switch (GetWindowClass(wn)) begin
      case "NPTSIVCashDClass":
        GetWindowRecord(wn,IVCashr);
    end;
  end;
  td = IVCashr.TransDate;
  if (blankdate(td)) then begin td = CurrentDate; end;
  tt = IVCashr.TransTime;
  if (blanktime(tt)) then begin tt = CurrentTime; end;
  lmc = IVCashr.LocalMachineCode;
  if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
  sm = IVCashr.SalesMan;
  if (blank(sm)) then begin sm = CurrentUser; end;
	
  ReadNPTSWindowData("NPTSIVCashDClass",LMb.POSButtonGroup,page,IVCashr.LocalMachineCode,IVCashr.DrawerCode,CurrentDate,CurrentTime,sessionopenedf,bc1,bc2,compname,POSBr);  
//  ReadPOSButtons("",LMb.POSButtonGroup,page,bc1,bc2,compname,POSBr,acnt);    
    SetWRect(lt,tp,rt,bm); //    SetWRect(0,100,860,760);
//    AbsoluteWindowSize;
    if (TestEnablerFile("EnNoFullscreenWindow")==false) then begin 
      FullscreenWindow;
    end;
    BrowseButtons(false);
    Sizeable(-1,-1,0,0);
    BrowseButtons(false);
    DynamicWindow;
    UseView(IVCashVc);
    ActiveFieldOnNew("ivcashcommand");
  if (GuiType==kGuiWindowsDesktop or GuiType==kGuiWPF) then begin
    if (UserRegisterAccess("POSButtonsVc") and CompanyProgramMode!=kProgramModeLiveSync) then begin  
      if (GetWindowString(CurWindow,"NPTSIVCashEditMode")=="false" or blank(GetWindowString(CurWindow,"NPTSIVCashEditMode"))) then begin
        ColourPushButton(400,10,400+120,40,"NPTSIVCashEditModeDsm","Redaguoti mygtukus",kButtonColourGreen);
      end else begin
        ColourPushButton(400,10,400+120,40,"NPTSIVCashEditModeDsm","Baigti redagavimą",kButtonColourGreen);
      end;
    end;
  end else begin
    ToolBar;
    if (UserRegisterAccess("POSButtonsVc") and CompanyProgramMode!=kProgramModeLiveSync) then begin  
      if (GetWindowString(CurWindow,"NPTSIVCashEditMode")=="false" or blank(GetWindowString(CurWindow,"NPTSIVCashEditMode"))) then begin
        ColourPushButton(10,10,h+120,30,"NPTSIVCashEditModeDsm","Redaguoti mygtukus",kButtonColourGreen);
      end else begin
        ColourPushButton(10,10,h+120,30,"NPTSIVCashEditModeDsm","Baigti redagavimą",kButtonColourGreen);
      end;
    end;
    EndToolBar;
  end;

    v = 20;
    h = -300; h2 = -150; h3 = -70; h4 = -10;

   // nr = "Faktūra: ";
    nr = "Kvitas: "; // EVS: DOL-20
    if (IVCashr.SerNr>0) then begin
      nr = nr & IVCashr.SerNr;
    end;
    if (nonblank(IVCashr.OfficialSerNr)) then begin
      if (HasOfficialSerNr) or (HasFiscalPrinter and HasLocalization("SVN")) then begin
        nr = "Oficialus nr: " & IVCashr.OfficialSerNr;
      end;
    end;

  if (IsEnterprise or BuildProductCode=="PAYYAPERP") then begin
/*  
      if (IsSessionOpen(IVCashr.LocalMachineCode,IVCashr.DrawerCode,CurrentDate,CurrentTime)) then begin
      sessdesc = "POS Sesija atidaryta";  
    end else begin
      sessdesc = "*** POS Sesija uždaryta ***";  
    end;
*/    
    if (sessionopenedf) then begin
        sessdesc = "POS Sesija atidaryta";
      end else begin
        sessdesc = "*** POS Sesija uždaryta ***";
      end;
    end;

    // StopAlert("IsSessionOpen(" & IVCashr.LocalMachineCode & "," & IVCashr.DrawerCode & "," & IVCashr.TransDate & "," & IVCashr.TransTime & "); -> " & sessdesc);

    DisplayRecordDetails_LIT(10,26,compname,td,tt,lmc,sm,nr,IVCashr.CustCode,IVCashr.Addr0,
      IVCashr.Addr1,IVCashr.Addr2,IVCashr.Addr3,"",IVCashr.Objects,
      IVCashr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,IVCashr.Bagger,IVCashr.Supervisor,
      IVCashr.DiscountCardNr,IVCashr.DiscountFwdBal,sessdesc,IsStandardProduct==false,IVCashr.OfficialSerNr,
      IVCashr.TaxAdminServSeal);

    fntszfct = 1.0;
    if (GuiType==kGuiWindowsDesktop or GuiType==kGuiWPF) then begin
      if ((rt-lt)<1200) then begin
        fntszfct = 1.0 - ((1200.0-(rt-lt))/600.0);
        if (fntszfct<0.3) then begin
          fntszfct = 0.3;
        end;
      end;
    end;
    if (bm<650) then begin
      fntsz1 = LMb.IVCashPOSDisplayFontSize1;
      if (fntsz1<=0) then begin fntsz1 = 20; end;
      fntsz2 = LMb.IVCashPOSDisplayFontSize2;
      if (fntsz2<=0) then begin fntsz2 = 30; end;

      SoftEditFieldTLX(420,6,h4,"",M4Str,ViewOnly,100,fntsz1*fntszfct,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(420,(fntsz1+16)*fntszfct,h4,"",M4Str,ViewOnly,100,fntsz2*fntszfct,patM4black,"CustomerDisplayData_Line2",true,0); 
    end else begin
      fntsz1 = LMb.IVCashPOSDisplayFontSize1;
      if (fntsz1<=0) then begin fntsz1 = 30; end;
      fntsz2 = LMb.IVCashPOSDisplayFontSize2;
      if (fntsz2<=0) then begin fntsz2 = 50; end;

      SoftEditFieldTLX(520,6,h4,"",M4Str,ViewOnly,100,fntsz1*fntszfct,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(520,(fntsz1+16)*fntszfct,h4,"",M4Str,ViewOnly,100,fntsz2*fntszfct,patM4black,"CustomerDisplayData_Line2",true,0); 
    end;

    switch (LMb.POSButtonsPosition) begin
      case kPOSButtonsPositionLeft:
        SoftEditField(110,-22,200,"Prekė/Komanda"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
      case kPOSButtonsPositionRight:
        StaticText(10,155+13,"Prekės kodas",false);
        SoftEditField(-260,-22,200,"Prekė/Komanda"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
    end;
    SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);

    /*
      if (WindowState(wn)==Rs_Insert) then begin
        StaticText(h2,v,CurrentDate,false);
        StaticText(h3,v,Left(CurrentTime,5),false);
        StaticText(h,v+=20,"Faktūra: ",false); 
        StaticText(h2,v,"Kasa: " & LMb.LocalMachineCode,false); 
        StaticText(h3,v,CurrentUser,false);
      end else begin
        StaticText(h2,v,IVCashr.TransDate,false);
        StaticText(h3,v,Left(IVCashr.TransTime,5),false);
        StaticText(h,v+=20,"Faktūra: " & IVCashr.SerNr,false); 
        StaticText(h2,v,"Kasa: " & IVCashr.LocalMachineCode,false); 
        StaticText(h3,v,IVCashr.SalesMan,false);
      end;
    */
  DrawPOSInterface2_LIT(bc1,bc2,POSBr,"",110,bm); // Edit ************************** BPI Ukraine - KramarAlexandr - 02, 02 04 2019 y. at 11:02:46 AM
  //DrawPOSInterface_LIT(bc1,bc2,POSBr,acnt,"",100);
  //BottomBar;
    EndWindow;
end;

window NPTSPaymentTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  array integer apaymenttype;
  array string 255 acrncy,alabel,apaymentmode;
  boolean CCRequireAuthCodef,DontShowButtonsf;
  integer acrncnt,i,paymodes,paymodesLimit,fldtyp;
  real f,h,h2,h3,h4,hm,l,v,v3,vm,vs,xc,xc1,yc,yc1,vrt,hz,butvert;
  record LocalMachineBlock LMb;
  string 255 ButtonLabelProceed,ButtonLabelCancel;

  vrt = 500;
  hz = 720;
  if ((IsStandardProduct and HasLocalization("CAN,USA")) or GuiType==kGuiiPhone) then begin
    DontShowButtonsf = true;
    butvert = 135;
  end;
  BlockLoad(LMb);
  WindowBegin("Mišrus Mokėjimas",NPTSPaymentTClass,CGother,RcType);  // JP DOL-64
  AutoSizeWindow(false);
  DynamicWindow;
  if (GuiType==kGuiiPhone or GuiType==kGuiMetro) then begin
    PopoverWindow;
  end;
  CntNPTSPaymentCurrencies(alabel,acrncy,apaymenttype,apaymentmode,acrncnt);
  for (i=0;i<acrncnt;i=i+1) begin
    switch (apaymenttype[i]) begin
      case kInvoiceRowTypeChequePayment:
        CCRequireAuthCodef = true;
      case kInvoiceRowTypeCreditCardPayment:
        CCRequireAuthCodef = true;
    end;
  end;
  if (LMb.CCRequireAuthCode!=0) then begin
    CCRequireAuthCodef = true;
  end;
  //EBS-->
  if (LMb.CCRequireAuthCode==0) then begin
    CCRequireAuthCodef = false;
  end;
  //EBS<--
  if (DontShowButtonsf==false) then begin vrt = vrt + 215-(acrncnt*45);  end;
  UseView(RcVc);
  SetWRect(80,200,hz,vrt+acrncnt*40);
  v=40; vs = 30;
  v = 10;
  h = 50; f = 160;
  fldtyp = M4Str;
  if (GuiType==kGuiiPhone) then begin
    fldtyp = M4Val;
  end;
  h2 = h+130; h3 = h2+260;
  StaticText(h,v+25,"Viso Suma EUR",false);  // JP DOL-64
  SoftEditFieldTLX(h2,v,f,"",fldtyp,ViewOnly,100,30,patM4blue,"NPTSPaymentTClassTotalDue",true,0);
  StaticText(h,v+=70,"Mokėjimo būdas",false);
  StaticText(h2+(f/2),v,"Kiekis",true); //EBS edit
  v=v+10;
  paymodes = 0;
  paymodesLimit = 10; //change it to have more paymodes on the screen
  for (i=0;i<acrncnt;i=i+1) begin
    switch (apaymenttype[i]) begin
      case kInvoiceRowTypeChequePayment:
//        SoftEditField(h2,v,f,"",Normal ,"NPTSPaymentTClassChequeAmount" & apaymentmode[i],true,0,M4Str,255);
        SoftEditFieldTLX(h2,v,f,"",fldtyp,Normal,100,25,patM4yellow,"NPTSPaymentTClassChequeAmount" & apaymentmode[i],true,0);
        StaticText(h,v+20,alabel[i],false);
        if (CCRequireAuthCodef) then begin
//          SoftEditField(h3,v,90,"",Normal ,"NPTSPaymentTClassChequeNr" & apaymentmode[i],true,0,M4Str,255);
          SoftEditFieldTLX(h3,v,f,"",M4Str,Normal,100,25,patM4yellow,"NPTSPaymentTClassChequeNr" & apaymentmode[i],true,0);
          if (LMb.CCRequireAuthCode!=0 or CCRequireAuthCodef) then begin
            StaticText(h3-10,v+20,"#Cheque# No.",true);  //!!TRANSLATE
          end;
        end else begin
//          v=v+23;
//          SoftEditField(h2,v,f,"",Normal ,"NPTSPaymentTClassChequeNr" & apaymentmode[i],true,0,M4Str,255);
          SoftEditFieldTLX(h3,v,f,"",M4Str,Normal,100,25,patM4yellow,"NPTSPaymentTClassChequeNr" & apaymentmode[i],true,0);
          StaticText(h3-10,v+20,"Čekio nr.",true);
        end;
        butvert = v + 40;
        paymodes = paymodes + 1;
      case kInvoiceRowTypeGiftVoucherPayment:
        SoftEditFieldTLX(h2,v,f,"",fldtyp,ViewOnly,100,25,patM4yellow,"NPTSPaymentTClassGVPAmount" & apaymentmode[i],true,0);
        StaticText(h,v+20,alabel[i],false);
        paymodes = paymodes + 1;
      case kInvoiceRowTypeCreditCardPayment:
//        SoftEditField(h2,v,f,"",Normal ,"NPTSPaymentTClassAmount" & apaymentmode[i],true,0,M4Str,255);
        SoftEditFieldTLX(h2,v,f,"",fldtyp,Normal,100,25,patM4yellow,"NPTSPaymentTClassAmount" & apaymentmode[i],true,0);
        StaticText(h,v+20,alabel[i],false);
        if (CCRequireAuthCodef) then begin
//          SoftEditField(h3,v,90,"",Normal ,"NPTSPaymentTClassAuthorizationCode" & apaymentmode[i],true,0,M4Str,255);
          SoftEditFieldTLX(h3,v,f,"",M4Str,Normal,100,25,patM4yellow,"NPTSPaymentTClassAuthorizationCode" & apaymentmode[i],true,0);
          StaticText(h3-10,v+20,"Auth. Code",true); butvert = v + 40; //!!TRANSLATE
        end;
        paymodes = paymodes + 1;
      case kInvoiceRowTypeGiftVoucherPayment:
          v=v-35;
      otherwise
//        SoftEditField(h2,v,f,"",Normal ,"NPTSPaymentTClassAmount" & apaymentmode[i],true,0,M4Str,255);
        SoftEditFieldTLX(h2,v,f,"",fldtyp,Normal,100,25,patM4yellow,"NPTSPaymentTClassAmount" & apaymentmode[i],true,0);
        StaticText(h,v+20,alabel[i],false);
        paymodes = paymodes + 1;
    end;
    v=v+35;
    if paymodes==paymodesLimit then begin
      i = acrncnt;
      StaticText(h,v+20,"Tik " & paymodesLimit & " first Local Machine Payment Modes could be shown",false);
      v = v + 20;
    end;
  end;
  v=v+10;
  SoftEditFieldTLX(h2,v,f,"",fldtyp,Normal,100,25,patM4yellow,"NPTSPaymentTClassBase1ReceivedAmount",true,0);
  StaticText(h,v+25,"Viso gauta",false);
  SoftEditFieldTLX(h2,v+=43,f,"",fldtyp,ViewOnly,100,25,patM4yellow,"NPTSPaymentTClassAmountDue",true,0);
  StaticText(h,v+22,"Mokėtina suma",false);
  SoftEditFieldTLX(h2,v+=43,f,"",fldtyp,ViewOnly,100,25,patM4red ,"NPTSPaymentTClassBase1ChangeAmount",true,0);
  StaticText(h,v+25,"Grąža",false);
  v = v + 10;

   h2 = 55; v3 = 48; vs = 52;
  switch (GuiType) begin
    case kGuiAndroid: goto LLkGuiiPhone;
    case kGuiiPhone:
        LLkGuiiPhone:;
          xc = -570; yc = v +90; xc1 = -400; ButtonLabelCancel = "Atšaukti";  ButtonLabelProceed = "Tęsti";
    otherwise
        v = -385; xc = -520; yc = -60; xc1 = -350;
        ButtonLabelCancel = "Atšaukti<BR>F2";  ButtonLabelProceed = "Tęsti<BR>F1";
  end;

  ColourPushButton(xc-40,yc,xc+3*h2-40,yc+v3,"CancelNPTSCashPaymentTClass",ButtonLabelCancel,20); //EBS edit pos
  ColourPushButton(xc1-40,yc,xc1+3*h2-40,yc+v3,"ProceedNPTSPaymentTClass",ButtonLabelProceed,20); //EBS edit pos

  h2 = 80; v3 = 33; vs = 37; h3 = 210; h4 = 400;
  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;

  if (DontShowButtonsf) then begin
  end else begin
    hm = h3+f + 67; v = butvert;
    v = v+20; //EBS
    h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"NPTSPaymentTClasRestCCBtn","Likutį į Kred. Kort.",2); //EBS
    v = v+vs; //EBS
    h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"NPTSPaymentTClasGiftVoucherListBtn","Dov. kup. sąrašas",2); //EBS
    v = v+vs; //EBS
    h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
    v = v+vs;
    h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
    v = v+vs;
    h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
    v = v+vs;
    h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolKeyPadPoint",".",2);
    v = v+vs;
    h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"NPTSPaymentToolKeyEnter","Įvesti",2);
    end;
  EndWindow;
end;

window AmendLineNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs,v4,v5,v6;
  Integer wn,mwn;
  Boolean testf;

  wn = CurWindow;
  if (wn>0) then begin
    mwn = MotherWindow(wn);
  end;
  WindowBegin("Taisymo eilutė",AmendLineNPTSSClass,CGother,RcType);
//  Modality(kModalityGlobal);
  UseView(RcVc);
  SetWRect(80,200,730,520);
  switch (GuiType) begin
    case kGuiiPhone: PopoverWindow; vs = 40; v4 = -480 ; v5 = -310; v6 = -120;
    otherwise
      vs = 20; v4 = -610; v5 = -440; v6 = -80;
  end;

  EditFieldTL(h=100,v=6,70,"Prekė",M4UStr,ViewOnly,20,AccStr,false,0);
  EditFieldTL(h,v+=vs,-20,"Pavadinimas",M4Str,ViewOnly,255,f1,false,0); // EVS: DOL-21 Normal
  EditFieldTL(h,v+=vs,70,"Kiekis",M423Val,Normal,0,vals0,true,0);
  EditFieldTL(h,v+=vs,70,"Kaina",M4Val,ViewOnly,0,vals1,true,0); // EVS: DOL-21 Normal
  EditFieldTL(h,v+=vs,70,"Nuolaida",M41Val,Normal,0,vals2,true,0);
  EditFieldTL(h,v+=vs,70,"Suma",M4Val,ViewOnly,0,vals3,true,0); // EVS: DOL-21 Normal
  EditFieldTL(h,v+=vs,70,"PVM kodas",M4Code,ViewOnly,10,f2,false,VATCodeSClass);  // EVS: DOL-21 Normal
  testf = false;
  if (mwn>0) then begin
    switch (GetWindowClass(mwn)) begin
      case "IVDClass":
        EditFieldTL(h,v+=vs,70,"Patalpa",M4Code,Normal,10,f3,false,LocationSClass);
      case "RestAccDClass":
        EditFieldTL(h,v+=vs,70,"Valgis",M4Str,Normal,255,f11,false,MealCourseSClass);
        EditFieldTL(h,v+=vs,70,"Vietos nr.",M4Str,Normal,255,f12,false,0);
    end;
  end;

  v = -385; h2 = 55; v3 = 48; vs = 52;
  if (GuiType==kGuiiPhone) then begin
  ColourPushButton(v4,v6,v4+3*h2,v6+v3,"CancelAndOverrideLogout","CancelAndOverrideLogout",20);
  ColourPushButton(v5,v6,v5+3*h2,v6+v3,"ProceedAmendLineNPTSSClass","Tęsti",20);
  end else begin
    ColourPushButton(v4,v6,v4+3*h2,v6+v3,"CancelAndOverrideLogout","Nutraukti<BR>F2",20);
    ColourPushButton(v5,v6,v5+3*h2,v6+v3,"ProceedAmendLineNPTSSClass","Tęsti<BR>F1",20);
  end;

//  ColourPushButton(h=10,v=-50,h+100,v+40,"CancelAndOverrideLogout","Atšaukti<BR>F2",20);
//  ColourPushButton(h+=120,v,h+100,v+40,"ProceedAmendLineNPTSSClass","Tęsti<BR>F1",20);
//  ColourPushButton(h+=120,v,h+100,v+40,"CashPayTouchScreenKeypad","Keypad<BR>F3",2);

  if (GuiType!=kGuiiPhone) then begin
  hm = 393;

  h2 = 80; v3 = 33; vs = 37; h3 = 210; h4 = 400;

  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;
  v = v + 117+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
  h = h+l+10; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
  h = h+l+10; ColourPushButton(h,v,h+h2,v+3*v3+8,"NPTSPaymentToolKeyEnter","OK",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPM","+/-",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolKeyPadPoint",".",2);
  end;

/*
  EditFieldTL(h,v+=300,70,"Price Factor",M4Val,ViewOnly,0,vals4,true,0);
  SoftEditField(h,v+=20,70,"Base Price",ViewOnly ,"BasePrice",false,0,M4Str,255);

  EditFieldTL(h,v+=20,70,"Currncy",M4UStr,ViewOnly,5,CurncyCode,true,0);
  EditFieldTL(h,v+=20,70,"Pay Mode",M4UStr,ViewOnly,10,FirstAcc,true,0);
*/
  EndWindow;
end;

window SalesAssistantVClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  real hm,v2,v3,l,h2,vm; //EBS
  record LocalMachineBlock lmb;
  integer i,usrcnt;
  array string 20 a_usrcodes;

  BlockLoad(lmb);
  DOLGetSalesmen(lmb.POSGroup,a_usrcodes,usrcnt);

  WindowBegin("Pardavimų asistentas",SalesAssistantVClass,CGOther,RcType);
  SetWRect(64,80,709,210); //EBS edit
  UseView(RcVc); //EBS needed for kaypad to work

  v3 = 48; v = 16;
  //two button columns needed
  for (i = 0; i < usrcnt; i = i + 2) begin
    ColourPushButtonTag(50,v+=25,215,v+v3,"DOLEnterSalesmanNPTSOClassPasteUser",a_usrcodes[i],7,a_usrcodes[i]);
    if ((i+1)<usrcnt) then begin //for last row
      ColourPushButtonTag(230,v,395,v+=v3,"DOLEnterSalesmanNPTSOClassPasteUser",a_usrcodes[i+1],7,a_usrcodes[i+1]);
    end;
  end;

  vs =20;h=140;//v=5;
  EditFieldTL(h+30,11,100,"Pardavimų asistentas",M4UStr,Normal,10,f1,false,0); //EBS edit
  ColourPushButton(h=50,v+=75,h+165,v+48,"CancelCCPayTouchScreenDClass","Nutraukti<BR>F2",20);
  ColourPushButton(h+=180,v,h+165,v+48,"ProceedSalesAssistantVClass","Tęsti<BR>F1",20);
//EBS-->
  if (GuiType!=kGuiiPhone) then begin
  hm = 410;
  h2 = 80; v3 = 33; vs = 37;
  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;
  v = 20;
  h = hm; ColourPushButton(h,v,h+h2*3,v+v3,"SalesAssistantVClassUserListBtn","POS grupė",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
  end;
//EBS<--
  EndWindow;
end;

window LocalMachineTClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vm2,vs;
  string 255 label;
  Integer tilenr;

  WindowBegin("Lokalus kompiuteris",LocalMachineTClass,CGSbl,-);
  SetWRect(64,80,750,580);
  SetBlid(LocalMachineBlock);
  vs = 20;
  Tile(0,50,false,"",LocalMachineCode);
  EditField(h=200,v=6,60,"Kodas",Normal,LocalMachineCode,false,LocalMachineSClass);
  tilenr = 1;
  TileButton(tilenr,"Pagr."); tilenr = tilenr + 1;
  TileButton(tilenr,"Fontai"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  	if (HasHotelInterface) then begin // Hotel
    	TileButton(tilenr,"Viešbutis"); tilenr = tilenr + 1;
  	end else begin
    	TileButton(tilenr,"Išteklių plan."); tilenr = tilenr + 1;
    end;
  end;
  TileButton(tilenr,"Integracija"); tilenr = tilenr + 1;
  TileButton(tilenr,"Vartotojo apibrėžti"); tilenr = tilenr + 1;
  TileButton(tilenr,"POS"); tilenr = tilenr + 1;
  tilenr = 1;
  Tile(tilenr,475,false,tilenr,DefLocation); tilenr = tilenr + 1;
  v = 6; h2=400;
  EditField(h,v,60,"Pagrindinis pirkėjas",Normal,DefCustCode,false,CUSClass);
  EditField(h2,v,60,"Filialas",Normal,BranchID,false,ContactCUSClass);
  EditField(h,v+=vs,60,"Pagrindinė patalpa",Normal,DefLocation,false,LocationSClass);
  EditField(h2,v,60,"Pagr. grąž. patalpa",Normal,DefReturnLocation,false,LocationSClass);
  EditField(h,v+=vs,120,"Pagr. spausd.",Normal,DefPrinter,false,0);
  EditFieldTL(h,v+=vs,180,"Pagr. eksporto kodavimas",M4StrSet,Normal,89,DefExpCodepage,false,StrSetSClass);
//  EditField(h,v+=vs,100,"Printer",Normal,FiscalPrinter,false,SetSClass); used difrent way now afaik ,jj
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,60,"GMT ofsetas",Normal,GMTOffset,false,0);
  end;
  ButtonFrame(h2=30,vm=(v+=40),153,4,"Įstatyti prekę");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",ItemPasteSpecial);
  RadioButton(h2,v+=16,1,0,"Be klasės",ItemPasteSpecial);
  RadioButton(h2,v+=16,2,0,"Su klase",ItemPasteSpecial);
  RadioButton(h2,v+=16,3,0,"Be Coverflow",ItemPasteSpecial);

  ButtonFrame(h2=30,v+=40,153,3,"Veikl. klasės įstatymas");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",AccClassPasteSpecial);
  RadioButton(h2,v+=16,1,0,"Be klasės",AccClassPasteSpecial);
  RadioButton(h2,v+=16,2,0,"Su klase",AccClassPasteSpecial);

  ButtonFrame(h2=220,v=vm,153,4,"Pašto dėžutės įstatymas");
  RadioButton(h2,v,3,0,"Kontakto ryšiai",MailboxPasteSpecial);
  RadioButton(h2,v+=16,1,0,"Pirkėjai",MailboxPasteSpecial);
  RadioButton(h2,v+=16,2,0,"Tiekėjai",MailboxPasteSpecial);
  RadioButton(h2,v+=16,0,0,"Pašto dėž./Konferencijos",MailboxPasteSpecial);

  if (StandardHansa==false) then begin
  	ButtonFrame(h2,v+=40,153,3,"Veiklos tipo įst. lang.");
  	RadioButton(h2,v,0,0,"Sistem. pagr.",ActTypePastePerClass);
  	RadioButton(h2,v+=16,1,0,"Veikl. tip. veikl. klasei",ActTypePastePerClass);
  	RadioButton(h2,v+=16,2,0,"Naudingi veikl. tipai",ActTypePastePerClass);
  end;
  if (HasObjects) then begin
    ButtonFrame(h2=30,v+=40,153,3,"Objekto įstatymas");
    RadioButton(h2,v,0,0,"Pagal nutylėjimą",ObjectPasteSpecial);
    RadioButton(h2,v+=16,1,0,"Be tipo",ObjectPasteSpecial);
    RadioButton(h2,v+=16,2,0,"Su tipu",ObjectPasteSpecial);
  end;


  CheckBox(h=400,v=vm,0,"Perspėti trinant",WarnOnDelete);
  CheckBox(h,v+=17,0,"Nerodyti Tool Tips",NoToolTips);
  CheckBox(h,v+=17,0,"Be fono",NoBackGround);
  CheckBox(h,v+=17,0,"Plati slankiojimo juosta",WideScrollBars);
  CheckBox(h,v+=17,0,"Neįjungti serverio režimo nesinaudojant",NoServerModeIdle);
  if (StandardHansa==false) then begin
    CheckBox(h,v+=17,0,"E-pašto sinch. fone",BackgroundMailSync);
    CheckBox(h,v+=17,0,"Auto. pirk. būklės atask. atidarymas atsiliepiant",CustPSOnCall);
    CheckBox(h,v+=17,0,"Patvirtinimo tipo veiklos langas",ApprovalTypeActDClass);
  end;

  if (GuiType==kGuiiPhone) then begin
    ButtonFrame(h2=30,v+=40,153,3,"Matrix Editing"); //!!TRANSLATE
    RadioButton(h2,v,0,0,"Inline",MatEditing); //!!TRANSLATE
    RadioButton(h2,v+=16,1,0,"Expanding",MatEditing); //!!TRANSLATE
    //RadioButton(h2,v+=16,2,0,"On Account A/C",MatEditing);
  end;

  Tile(tilenr,70,false,tilenr,entryFont); tilenr = tilenr + 1;
  v = 6; h = 210;
  EditField(h,v,-20,"Taisymo šriftas",Normal,entryFont,false,FontNameSClass);
  EditField(h,v+=vs,-20,"Ataskaitų šriftas",Normal,reportFont,false,FontNameSClass);
  EditField(h,v+=vs,50,"Ataskaitų šrifto dydis",Normal,reportFontSize,false,0);
  if (GuiType==kGuiiPhone) then begin
    EditField(h,v+=vs,50,"Prietaiso svarstyklių faktorius",Normal,TabletScaleFactor,false,0);
  end;
  v = 6;
  if (StandardHansa==false) then begin
  	if (HasHotelInterface) then begin // Hotel
    	Tile(tilenr,100,false,tilenr,ResLoc); tilenr = tilenr + 1;
    	EditField(h,v,60,"Kambario patalpa",Normal,ResLoc,false,ResLocSClass);
    	EditField(h,v+=vs,150,"Kambario klasė",Normal,ResClass,false,ResClasSClass);
      EditField(h,v+=vs,60,"Užrakinimo sistemos kodo nr.",Normal,LockSysEncoderNo,false,0);
  	end else begin
    	Tile(tilenr,50,false,tilenr,ResLoc); tilenr = tilenr + 1;
    	EditField(h,v,60,"Išteklių patalpa",Normal,ResLoc,false,ResLocSClass);
    	EditField(h,v+=vs,150,"Išteklių klasė",Normal,ResClass,false,ResClasSClass);
  	end;
  end;
  Tile(tilenr,130,false,tilenr,SkypeInt); tilenr = tilenr + 1;
  ButtonFrame(h,vm=(v=20),123,3,"Prisijungti prie Skype");
  RadioButton(h,v,1,0,"Taip",SkypeInt);
  RadioButton(h,v+=16,2,0,"Ne",SkypeInt);
  RadioButton(h,v+=16,0,0,"Dar nenusprėsta",SkypeInt);

  ButtonFrame(h,v+=80,200,1,"Prisijungti prie GSX");
  EditField(h+100,v,80,"Perkelti į sąskaitą",Normal,ShipToAccount,false,0);

  if (StandardHansa==false) then begin
  	CheckBox(h,v+=30,0,"Sinkronizuoti prekes ir kainasSyncronise",SyncRecordforPOS);
  	EditField(h,v+=vs,-40,"Prekės klasė sinkronizuoti",Normal,SyncINClass,false,DISClass);
  end;

  ButtonFrame(h2=h+200,v=vm,140,5,"Pageidaujamas skamb. būdas");
  RadioButton(h2,v,kPreferredCallingMethodNotDecided,0,"Nenusprėsta",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodSkype,0,"Skype",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodAsterisk,0,"Asterisk",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethod3CX,0,"3CX",PreferredCallingMethod); //!!TRANSLATE
  RadioButton(h2,v+=16,kPreferredCallingMethodTAPI,0,"TAPI",PreferredCallingMethod); //!!TRANSLATE

  Tile(tilenr,300,false,tilenr,UserStr1); tilenr = tilenr + 1;
  label = UserDefined("LocalMachineSetVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr1,false,0);
  end;
  label = UserDefined("LocalMachineSetVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr2,false,0);
  end;
  label = UserDefined("LocalMachineSetVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr3,false,0);
  end;
  label = UserDefined("LocalMachineSetVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr4,false,0);
  end;
  label = UserDefined("LocalMachineSetVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr5,false,0);
  end;
  Tile(tilenr,450,false,tilenr,Supervisor); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  	EditField(h=220,v=6,60,"Prižiūrėtojas",Normal,Supervisor,false,UserSClass);
  	EditField(h,v+=20,60,"Pakuotojas",Normal,Bagger,false,BaggerSClass);
  	EditField(h,v+=vs,60,"Kainoraštis",Normal,PLCode,false,PLDefSClass);
  end else begin
    EditField(h=220,v=6,60,"Kainoraštis",Normal,PLCode,false,PLDefSClass);
  end;
  EditField(h,v+=vs,60,"POS grupė",Normal,POSGroup,false,EGSClass); //EBS
  EditField(h,v+=vs,100,"Terminalo ID",Normal,TerminalID,false,0);
  if (IsEnterprise) then begin
  	EditField(h,v+=vs,150,"POS mygtukų grupė",Normal,POSButtonGroup,false,POSButtonGroupsSClass);
  end;
  if (StandardHansa==false) then begin
    EditField(h,v+=20,150,"Fisk. spausdintuvų e-žurnalo kelias",Normal,FiscalPrinterEJournalPath,false,0);
  	EditField(h,v+=20,150,"Fisk. spausdintuvų e-žurnalo kelias 2",Normal,FiscalPrinterEJournalPath2,false,0);
  end;
  if (HasModRest) then begin
    EditField(h,v+=20,150,"Staliukų vaizdas",Normal,TableViewCode,false,TablesViewsSClass);
    EditField(h,v+=20,150,"Baro kort. klasė",Normal,RestAccClass,false,RestAccClassSClass);
    EditField(h,v+=vs,60,"Pgr. restorano prekės klasė",Normal,DefRestDisp,false,DISClass);
  end;
  if (HasModRest) then begin
    EditFieldTL(h,v+=vs,-20,"Virtuvės Užsakymo ekrano skyrius",M4Str,Normal,200,KitchenOrdScrDep,false,RestOrderDeptSClass);
    EditFieldTL(h,v+=vs,50,"Virtuvės Užsakymo ekrano atnaujinimo intervalas",M4Time,Normal,0,KitchenRefreshInt,false,PasteCurTime);
    CheckBox(h,v+=20,0,"Detalus virtuvės Užsakymo ekranas",KitchenOrdDetailed);  v = v - 4;
    CheckBox(h,v+=20,0,"Viena aktyvi baro kortelė",OneBarTabWindow);
  end;
  CheckBox(h,v+=16,0,"Lietimo ekrano vart. sąsaja",TouchScreenLook);
//  CheckBox(h,v+=20,0,"iOS Vertical Touch Screen Interface",TouchScreenLook2);
  CheckBox(h,v+=16,0,"Prekės paveiksliukas POS Faktūroje (iOS)",TouchScreenLookPicture);
  if (StandardHansa==false) then begin
  	CheckBox(h,v+=16,0,"Pagrindinis pakuotojas ir prižiūrėtojas POS faktūroje",DefaulBaggerSupervisor);
  	CheckBox(h,v+=16,0,"Rodyti pakuotoją POS faktūroje",ShowBaggerSupervisor);
  end;
  CheckBox(h,v+=16,0,"Paslėpti kiekį POS faktūroje",HideQty);
  if (StandardHansa==false) then begin
  	CheckBox(h,v+=16,0,"Reikalauti autorizacijos kodo, apmokėjimui kredito kortele",CCRequireAuthCode);
  end;
  CheckBox(h,v+=16,0,"Pavienis čekio spausdinimas ",IncrementalReceiptPrinting);
  CheckBox(h,v+=16,0,"Naudoti grynujų ekraną",UseDisplay);
  CheckBox(h,v+=16,0,"Naudoti pirkėjo ekraną",UseCustomerDisplay);
  if (HasLocalization("HRV")) then begin
    CheckBox(h,v+=16,0,"Send Fiscal Invoice (#S/L#)",SendFiscalInvoice);
  end;
  ButtonFrame(h,vm=(v+=40),100,2,"Mygtukų pozicija");
  RadioButton(h,v,kPOSButtonsPositionLeft,0,"Kairė",POSButtonsPosition);
  RadioButton(h,v+=16,kPOSButtonsPositionRight,0,"Dešinė",POSButtonsPosition);
  ButtonFrame(h,v+=40,100,3,"Inf. lauko šrifto dydis");
  RadioButton(h,v,0,0,"22",POSFontSize);
  RadioButton(h,v+=16,1,0,"16",POSFontSize);
  RadioButton(h,v+=16,2,0,"11",POSFontSize);
  ButtonFrame(h=350,v=vm,100,2,"Inf. lauko dydis");
  RadioButton(h,v,kPOSPanelSizeLarge,0,"Didelis",POSPanelSize);
  RadioButton(h,v+=16,kPOSPanelSizeSmall,0,"Mažas",POSPanelSize);
  EndWindow;
end;

window IVCashLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos;
  WindowBegin("POS faktūros",IVCashLClass,CGmlist,-);
  SetWRect(20,80,650,291);
  Sizeable(-1,-1,0,0);
  SpawnClass(IVCashDClass);
  UseView(IVCashVc);
  FormName(PrintIVCashL);
  RecordList(4,17,-21,-39);
  if (HasLocalization("HRV,PRT")) then begin
    RlColKey(4,4,"No.",SerNr,false,SerNr);
    pos = 101;
    RlColKey(pos,pos,"Oficialus Nr.",OfficialSerNr,false,OfficialSerNr);
    pos = pos + 110;
  end else begin
    RlColKey(4,4,"No.",SerNr,false,SerNr);
    pos = 101;
  end;
  RlColKey(pos,pos,"OK",OKFlag,false,OKFlag);
  pos = pos + 28;
  RlColKey(pos,pos,"Fakt. data",InvDate,false,InvDate);
  pos = pos + 80;
  RlColKey(pos,pos,"Pirk.",CustCode,false,CustCode);
  pos = pos + 90;
  RlColKey(pos,pos,"Pavadinimas",Addr0,false,Name);
  RlColKey(-165,-165,"Patalpa",Location,true,Location);  // EVS: DOL-25
  RlColKey(-115,-115,"Viso",Sum4,true,Sum4);
  RlColKey(-25,-25,"D/K",NLFlag,true,NLFlag);
  RlCol(-1,-1,"",Invalid,true);
  SearchField("Ieškoti");
  SpecialMenu("OK",'G',0,"OKIVCashLsm");
  SpecialMenu("Sinchronizuoti bazinius registrus ir parametrus",' ',0,"SynchServToOfflineSettingsm");
  SpecialMenu("Sinchronizuoti Offline faktūras",' ',0,"SynchOfflineToServsm");
  EndWindow;
end;

window IVCashDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  Integer rn;

  WindowBegin("POS faktūra",IVCashDClass,CGview,-);
  SetWRect(20,80,700,400);
  Sizeable(-1,-1,0,0);
  UseView(IVCashVc);
  vs=20;
  if (CheckOffLineRecords(false)) then begin
  StaticText(50,20,"Yra faktūrų, kurias reikia sinchronizuoti.",false);
  StaticText(50,40,"Norėdami sukurti naujas kasos faktūras, pasirinkite",false);
  StaticText(50,60,"Sinchronizuoti Offline faktūras per faktūrų sąrašo meniu 'Specialus'",false);
  end else begin
  ActiveFieldOnOK("CashValue");
  Tile(0,48+24+24+25,false,"",CustCode);
  EditField(75,vm=(v=6), 82,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95, "Pirkėjas",Normal,CustCode,false,CUSClass);
  EnterSkip(Math);
  EditField(h=256,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,100,"Lojalumo kort.",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
      EditField(h=456,v,-40,"Oficialus ser. nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  end;
  EditField(75,v+=vs, 82,"Pirkėjas fakt.",Normal,InvCust,false,AllCUSClass); // EVS: DOL-39
  EditField(256,v, -40,"PF Pavadinimas",Normal,InvCustName,false,0); // EVS: DOL-39
  HalPushButton(456,v+vs,600,v+(vs*2),"DOLAssignOffNoAndPrintIVCashBtn","Spausdinti sąskaitą"); // EVS: DOL-112
  TileButton(1,"Mokėjimas");
  TileButton(2,"Prekės");
  TileButton(3,"Data");
  TileButton(4,"Patalpa");
  TileButton(5,"Valiuta");
//  CheckBox(230,v,0,"OK",OKFlag);
//  CheckBox(330,v,0,"Pirk. operc. informac.",ARonTR);
  Tile(1,90,false,"1",CashValue);//PayDeal
  vs = 20;h=75;h2=160;h3=310;h4=540;
  EditField(h2,v=6,70,"Grynieji",Normal,CashValue,true,0);
//  EditField(h3,v,70,"POSSalesNo",Normal,POSSalesNo,false,0);
  EnterSkip(PayDeal);
  EditField(h4,v,70,"Grąža",ViewOnly,RetValue,true,0);
  EditField(h,v+=vs,30,"Mok. sąlygos",Normal,PayDeal,false,RestPMSClass);
  EditField(h2,v,80,"Sumok.",Normal,RecValue,true,0);
  EditField(h3,v,100,"Kred. kort.",Normal,CreditCard,false,CreditCardSClass);
  EditField(h4,v,70,"Autorizuota",Normal,AuthorizationCode,false,0);
  EditField(h,v+=vs,30,"Mok. būdas",Normal,PayDeal2,false,RestPMSClass);
  EditField(h2,v,80,"Sumok.",Normal,RecValue2,true,0);
  EditField(h3,v,100,"Kred. kort.",Normal,CreditCard2,false,CreditCardSClass);
  EditField(h4,v,70,"Autorizuota",Normal,AuthorizationCode2,false,0);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,100,"Lojalumo taškai",ViewOnly,Points,true,0);
  EditField(h4,v,70,"Narystės lygis",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
  end;
/* We don't have currency, why do we need Base??? */
//  EditField(330,-26,95,"Bazė",ViewOnly,BaseSum4,true,0);
  EnterSkip(Math);
  Tile(2,120,true,"2",Math);
  CheckBox(30,-21,0,"OK",OKFlag);
  EditField(-433,-21,80,"PVM",ViewOnly ,Sum3,true,0);
  EditField(-283,-21,95,"Tarp. suma",ViewOnly ,Sum1,true,0);
  EditField(-133,-21,95,"VISO",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(4,v,-50,-29,-,200);
  MatTypedRow(stp);
    MatOverStrike(ovst);
  Flip(0);
  MatCol(t=1,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,144,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,144,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeHeader,32,"Antraštė",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,144,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,144,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeVoid,28,"Void",false);
  MatColTL(t,65,"Parašas",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Prekė",0,ArtCode,false,INSClass);
  if (HasVarieties) then begin
  MatCol(t,150,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"Kiekis.",0,Quant,true,0);
  end;
  MatCol(t,190,"Kaina",0,Price,true,0);
  MatCol(t,250,"Aprašymas",0,Spec,false,0);
  MatCol(t,-195,"Ser. Nr",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Suma",0,Sum,true,0);
    MatText(t=kInvoiceRowTypeUpdateMark,28,"Parašas",false);
  MatColTL(t,85,"Parašas",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,150,"Aprašymas",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"GVR",true);
  MatCol(t,68,"",0,GCNr,false,GCSSClass);
  MatCol(t,108,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,148,"",0,Spec,false,0);
  MatCol(t,-84,"Suma",0,Sum,true,0);
 //MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  if (StandardHansa==false) then begin
   MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"GV",true);
  end;
  MatCol(t,68,"",0,GCNr,false,GCSClass);
  MatCol(t,141,"",0,Spec,false,0);
  MatCol(t,-84,"Suma",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeCashPayment,32,"CASH",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"Grąža",0,BasePrice,true,0);
  MatCol(t,201,"M. būdas",0,PayMode,true,PMSClass);
  MatCol(t,231,"Apibr.",0,Spec,false,0);
  MatCol(t,355,"",0,FrRate,true,0);
  MatCol(t,400,"",0,ToRateB1,true,0);
  MatCol(t,445,"",0,ToRateB2,true,0);
  MatCol(t,490,"",0,BaseRate1,true,0);
  MatCol(t,535,"",0,BaseRate2,true,0);
  MatCol(t,580,"",0,CurncyCode,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"CC",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"Mok. būdas",0,PayMode,true,PMSClass);
  MatCol(t,181,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,308,"Autorizacija",0,AuthorizationCode,false,0);
    MatCol(t,378,"Apr.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeChequePayment,32,"CHQ",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"P. būdas",0,PayMode,true,PMSClass);
  MatCol(t,181,"Čekio Nr.",0,CheckNr,false,0);
  MatCol(t,308,"Apibr.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeOnAccountPayment,32,"OnAcc",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"M. būdas",0,PayMode,true,PMSClass);
  MatCol(t,201,"Apibr.",0,Spec,false,0);
  MatCol(t,358,"",0,FrRate,true,0);
  MatCol(t,403,"",0,ToRateB1,true,0);
  MatCol(t,448,"",0,ToRateB2,true,0);
  MatCol(t,493,"",0,BaseRate1,true,0);
  MatCol(t,538,"",0,BaseRate2,true,0);
  MatCol(t,583,"",0,CurncyCode,false,0);

  MatText(t=kInvoiceRowTypeSplitItem,32,"SPLIT",true);
  MatCol(t,68,"Prekė",0,ArtCode,true,0);
  MatCol(t,141,"Kiekis",0,Quant,true,0);
  MatCol(t,181,"Spec",0,Spec,false,0);
  MatCol(t,288,"Į prekė",0,SplitArtCode,false,0);
  MatCol(t,348,"Išs. kiekis",0,SplitQuant,true,0);
  MatCol(t,388,"Spec",0,SplitArtName,false,0);
  MatCol(t,-60,"Faktorius",0,SplitFactor,true,0);
  if (StandardHansa==false) then begin
    MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Susij. pirk. nuol.",true);
  end;
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,INSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);

  MatText(t=kInvoiceRowTypeReturnIVNr,32,"Faktūros Nr.",true);
  MatCol(t,108,"Faktūros Nr.",0,OrgIVNr,true,0);
  MatCol(t,184,"Stand. problema",0,StandProblemCode,false,0);
  if (StandardHansa==false) then begin
  MatCol(t,254,"Apr.",0,Spec,false,0);

  MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"Taškai",0,Points,false,0);
  MatCol(t,181,"M. Būdas",0,PayMode,true,PMSClass);
  MatCol(t,221,"Apr.",0,Spec,false,0);
  MatCol(t,348,"",0,FrRate,false,0);
  MatCol(t,388,"",0,ToRateB1,false,0);
  MatCol(t,428,"",0,ToRateB2,false,0);
  MatCol(t,468,"",0,BaseRate1,false,0);
  MatCol(t,508,"",0,BaseRate2,false,0);
  MatCol(t,548,"",0,CurncyCode,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"Taškai",0,Points,true,0);
  MatCol(t,141,"Apr.",0,Spec,false,0);
  end;

  Flip(1);
  MatCol(t=1,184,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ShowSerialNronPOSInvoices",false)) then begin
    MatCol(t,-270,"Ser.nr.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(t,-175,"Vnt. kn.",0,Price,true,0);
  MatCol(t,-105,"%",0,vRebate,true,0);
  MatCol(t,-70,"Suma",0,Sum,true,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-70,"M-kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,184,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ShowSerialNronPOSInvoices",false)) then begin
    MatCol(t,-270,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(t,-175,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-105,"%",0,vRebate,true,0);
  MatCol(t,-70,"Suma",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  Flip(2);
  MatCol(t=1,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-200,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  if (HasObjects) then begin
  MatCol(t,-100,"Objektas",0,Objects,false,ObjSClass);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-200,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-100,"Objektai",0,Objects,false,ObjSClass);
  Flip(3);
  MatCol(t=1,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-200,"Vėl. siuntimas",0,OrdQuant,false,0);
  MatCol(t,-100,"Apmok.",0,DownPaidSum,false,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-200,"Vėlus siuntimas",0,OrdQuant,false,0);
  MatCol(t,-100,"Apmok.",0,DownPaidSum,false,0);
  Flip(4);
  MatCol(t=1,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-100,"Pardavėjas",0,Salesmen,false,0);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusIVCashDsm");
  RowMenuItem(0,"Ankstesnių pardavimų kaina",' ',' ',0,"IVCashLastSPrsm");
  EndRowMenu;
  EndMatrix;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  Tile(3,110,false,"3",InvDate);
  vs = 20; h1 = 95; h2 = 256; h3 = 486;
  EditField(h1,vm=(v=6),82,"Faktūros data",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Apmok. data",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Oper. data",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Pardavėjas",Normal,SalesMan,false,UserSClass);
    EditField(h1,v+=vs,82,"Nuoroda",Normal,RefStr,false,0);
  EditField(h2,v=vm,135,"Mūsų nuoroda",Normal,OurContact,false,0);
  EditField(h2,v+=vs, 135,"Jūsų asmuo",Normal,ClientContact,false,ContactSClass);
  EditField(h2,v+=vs, 50,"Operac. laikas",Normal,TransTime,false,PasteCurTime);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,82,"Prižiūrėtojas",Normal,Supervisor,false,SupervisorSClass);
  end;
//  EditField(h3,v=vm,50,"POS nr.",Normal,POSNr,true,0);
  EditField(h3,v=vm,50,"Kasos ap. nr.",Normal,LocalMachineCode,false,0);
  EditField(h3+110,v=vm,50,"Stalčius",Normal,DrawerCode,false,0);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,-5,"Oficialus nr. 2",Normal,OfficialSerNr2,false,LegalInvNrSClass);
    EditField(h3,v+=vs,50,"Filialas",ViewOnly,BranchID,false,0);
    CheckBox(h3+60,v,0,"Fiskalinė faktūra",FiscalFlag);
    EditField(h3,v+=vs,82,"Pakuotojas",Normal,Bagger,false,BaggerSClass);
  end;
  vs = 22;
  Tile(4,110,false,"4",Location);
  vs = 20; h1 = 95; h2 = 256; h3 = 456;
  EditField(h1,v=6,50,"Patalpa",Normal,Location,false,LocationSClass);
//    EditField(200,v,60,"IVNr",Normal,IVNr,false,0);
//  CheckBox(230,v,0,"Update Stock",UpdStockFlag);//not supported any more
  EditField(h3,v,-20,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h1,v+=vs,  50,"Kainoraštis",Normal,PriceList,false,PLDefSClass);
  EditField(h3,v,-20,"Pirk. Užsk. Nr.",Normal,CustOrdNr,false,0);
  EditField(h1,v+=vs,  50,"Nuolaidų lent.",Normal,RebCode,false,0);
  EditField(h3,v,  50,"Kalba",Normal,LangCode,false,LangSClass);
  EditField(h1,v+=vs, -20,"Komentaras",Normal,InvComment,false,0);
  EditField(h1,v+=vs,80,"Viso kiekis",ViewOnly,TotQty,true,0);
  EditField(h2,v,80,"Viso svoris",ViewOnly,TotWeight,true,0);
  EditField(h3,v,80,"Viso tūris",ViewOnly,TotVolume,true,0);
  Tile(5,70,false,"5",CashValue);
  vs = 20; h = 75; h2 = 150; h3 = 310; h4 = 480;
  EditField(h2,v=6,70,"Kasa",Normal,CashValue,true,0);
  EditField(h4,v,70,"Grąža",ViewOnly,RetValue,true,0);
  EditField(h2,v+=vs,70,"Kasa B2",Normal,CashValueB2,true,0);
  EditField(h4,v,70,"Grąža B2",ViewOnly,RetValueB2,true,0);
  EditField(h2,v+=vs,30,"Papild. valiuta",Normal,POSCurncyCode,true,CurncyCodeSClass);
  EditField(h3,v,70,"Kasos val.",Normal,CashValueCur,true,0);
//  EditField(h4,v,70,"Cash Back Cur",ViewOnly,RetValueCur,true,0);

  SpecialMenu("Kasos pajamų ataskaita",' ',1,"IVCashCashupRnsm");
  SpecialMenu("Vadovo nuolaidos suteikimas",' ',24,"MgrsDiscOverrideIVCashDsm");
  SpecialMenu("Mokėjimas kreditine kortele",' ',11,"CCPayIVCashDsm");
  SpecialMenu("Siųsti į fiskalinį spausdintuvą",' ',19,"PrintToFiscPrntIVCashDsm");
  SpecialMenu("Kreditas",' ',2,"IVCashToCredit");
  SpecialMenu("POS Sesijos ataskaita",' ',1,"POSEventIVCashDsm");
//  SpecialMenu("Pay",' ',11,"PayIVCashDsm");
    if (HasTaxMatrix) then begin
      SpecialMenu("Atidaryti mok. ataskaitą",' ',25,"OpenVatMatrixIVCashDsm");
    end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Atidaryti sesiją",' ',8,"OpenPOSSessionsm");
  SpecialMenu("Uždaryti sesiją",' ',9,"ClosePOSSessionsm");
  SpecialMenu("Kasos pajamos",' ',11,"POSMoneyInsm");
  SpecialMenu("Kasos išlaidos",' ',12,"POSMoneyOutsm");
  SpecialMenu("Sukurti E-laišką",'m',23,"CreateMailFromIVCashDsm");
  SpecialMenu("Sukurti vėlyvo pristatymo pardavimo užsakymą",' ',5,"IVCashToLateDelivORsm");
  SpecialMenu("Perkelti į faktūrą",' ',3,"IVCashToIVDsm");
  SpecialMenu("Perkelti į pardavimo užsakymą",' ',1,"IVCashToORsm");
  end;
  EndWindow;
end;

window StandProblemDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Standartinės problemos",StandProblemDClass,CGview,StandProblemView);
  SetWRect(64,73,509,240);
  UseView(StandProblemVc);
  v = 10; vs = 20; h = 100;
  EditField(h,v, 200,     "Kodas",Normal,Code,false,0);
  EditField(h,v+=vs ,-20,"Trump. apraš.",Normal,ShortDesc,false,0);
  EditField(h,v+=vs ,-20,"Aprašymas",Normal,Comment1,false,0);
  if (IsEnterprise) then begin
  EditField(h,v+=vs ,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs ,-20,"",Normal,Comment3,false,0);
  end;
  CheckBox(h,v+=vs,0,"Į Broko Sandėlį",ForceRetLocFlag); // EVS: DOL-41
  EndWindow;
end;

window NPTSIVCashLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos;
  WindowBegin("POS Faktūros",NPTSIVCashLClass,CGmlist,-);
  if (HasLocalization("HRV")) then begin
    SetWRect(20,80,770,291);
  end else begin
  SetWRect(20,80,700,291);
  end;
  Sizeable(-1,-1,0,0);
  SpawnClass(NPTSIVCashDClass);
  UseView(IVCashVc);
  FormName(PrintIVCashL);
  RecordList(4,17,-21,-39);
  if (HasLocalization("HRV,PRT")) then begin
    RlColKey(4,4,"No.",SerNr,false,SerNr);
    pos = 71;
    RlColKey(pos,pos,"Official No.",OfficialSerNr,false,OfficialSerNr);
    pos = pos + 110;
  end else begin
    RlColKey(4,4,"Nr.",SerNr,false,SerNr);
    pos = 71;
  end;
  RlColKey(pos,pos,"OK",OKFlag,false,OKFlag);
  pos = pos + 28;
  RlColKey(pos,pos,"Fakt. data",InvDate,false,InvDate);
  pos = pos + 85;
  RlColKey(pos,pos,"Pirk.",CustCode,false,CustCode);
  pos = pos + 85;
  RlColKey(pos,pos,"Pavad.",Addr0,false,Name);
  if (HasLocalization("HRV")) then begin
    RlColKey(-180,-180,"Total",Sum4,true,Sum4);
    RlCol(-105,-105,"Seal",TaxAdminServSeal,false);
  end else begin
    RlColKey(-165,-165,"Patalpa",Location,true,Location);  // EVS: DOL-25
  RlColKey(-115,-60,"Iš viso",Sum4,true,Sum4);
  end;
  if (HasModNL) then begin
  RlColKey(-25,-25,"D/K",NLFlag,true,NLFlag);
  end;
  RlCol(-1,-1,"",Invalid,true);
  SearchField("Ieškoti");
  if (GuiType==kGuiMetro) then begin
    RowMenuBegin("");
    RowMenuItem(0,"OK",'G','G',4312,"OKIVCashLsm");
    EndRowMenu;
  end else begin
  SpecialMenu("OK",'G',0,"OKIVCashLsm");
    if (IsEnterprise) then begin
  SpecialMenu("Sinchronizuoti bazinius registrus ir parametrus",' ',0,"SynchServToOfflineSettingsm");
  SpecialMenu("Sinchronizuoti Offline faktūras",' ',0,"SynchOfflineToServsm");
    end;
  end;
  EndWindow;
end;

window LoginClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,v2,vs;
  WindowBegin("Prisijungimas",LoginClass,CGother,USRowType);
  UseView(USRowVc);
  if (GuiType==kGuiCocoa) then begin
    if (DisplayLoginButtons==false and DisplayLoginKeyPad_LIT==false) then begin
      h = 55; v = 70; vs = 25;
      h2 = 150;
      SetWRect(80,90,340,370);
      //SetWRect(80,90,340,402);
      //StaticText(-51,50,"$programversion",false); //Do not translate
      StaticText(20,v+=14,"$companyname",false); //Do not translate
      if (HasStrAsSignFType) then begin
        EditFieldTL(h,v+=12,h2,"E-pašto adresas",M4Str,Normal,60,Name,false,0);
      end else begin
        EditFieldTL(h,v+=12,h2,"Parašas",M4Code,Normal,60,Name,false,0);
      end;
      EditFieldTL(h,v+=vs,h2,"Slaptažodis",M4Star,Normal,20,Password,false,0);
      vs = 30;
      h = 55;
      h2 = 150;
      PushButton(h,v+=vs,h+h2,v+20,ToolOK,"Prisijungti");
      PushButton(h,v+=vs,h+h2,v+20,ToolRestore,"Atšaukti");
      v = v + 12;
      // PushButton(h,v+=vs,h+h2,v+20,ToolLoginMaster,"Naujas vartotojas"); // EVS: DOL-32 rm
            //v = v + 12;
      //PushButton(h,v+=vs,h+h2,v+20,ToolLocalDemo,"Lokali demo");
      StaticText(20,v+=(vs+18),"$programversionname",false); //Do not translate
    end else begin
      h = 80; h2 = 120; v2 = 280; vs = 25; v = 70;
      if (DisplayLoginButtons) then begin
        v2 = v2 + 100 + 30*LoginShortcutsLines(3);
      end;
      if (DisplayLoginKeyPad_LIT) then begin
        v2 = v2 + 170;
        if (DisplayLoginButtons==false) then begin
          v2 = v2 + 80;
        end;
      end;
      SetWRect(80,90,370,v2);
      Modality(1);
      v = LoginShortcutsPos(v,3);
      LoginButtons2_LIT(h,v);
      if (DisplayLoginKeyPad_LIT) then begin
        v = v + 160;
      end;
      StaticText(20,v+=14,"$companyname",false); //Do not translate
      if (HasStrAsSignFType) then begin
        EditFieldTL(h,v+=12,h2,"E-pašto adresas",M4Str,Normal,60,Name,false,0);
      end else begin
        EditFieldTL(h,v+=12,h2,"Parašas",M4Code,Normal,60,Name,false,0);
      end;
      EditFieldTL(h,v+=vs,h2,"Slaptažodis",M4Star,Normal,20,Password,false,0);
      vs = 30;
      PushButton(h,v+=vs,h+h2,v+20,ToolOK,"Prisijungti");
      PushButton(h,v+=vs,h+h2,v+20,ToolRestore,"Nutraukti");
      v = v + 12;
      // PushButton(h,v+=vs,h+h2,v+20,ToolLoginMaster,"Naujas vartotojas"); // EVS: DOL-32 rm
      StaticText(20,v+=(vs+18),"$programversionname",false); //Do not translate
    end;
  end else begin
    h2 = 464; v2 = 304;
    if (DisplayLoginButtons) then begin
      v2 = v2 + 30 + 30*LoginShortcutsLines(4);
    end;
    if (DisplayLoginKeyPad_LIT) then begin
      v2 = v2 + 150;
    end;
    SetWRect(80,90,h2,v2);
    Modality(1);
    v = 65; h = 120; h2 = 195;
    StaticText(h2,v+=20,"$companyname",false); //Do not translate
    if (HasStrAsSignFType) then begin
      EditFieldTL(h,v+=12,170,"E-pašto adresas",M4Str,Normal,60,Name,false,0);
    end else begin
      EditFieldTL(h,v+=12,170,"Parašas",M4Code,Normal,60,Name,false,0);
    end;
    EditFieldTL(h,v+=23,170,"Slaptažodis",M4Star,Normal,20,Password,false,0);

    if (DisplayLoginButtons) then begin
      v = LoginShortcutsPos(v+40,4)+10;
    end else begin
      v = v + 25;
    end;
    LoginButtons2_LIT(132,v);

    v = -44; h = -7;
    StaticText(h,v,"$programversionname",AdjRight); //Do not translate
    v = -32; h = -91;
    if (IsWebClient) then begin
      // PushButton(20,v,20+100,v+20,ToolLoginMaster,"Naujas vartotojas"); // EVS: DOL-32 rm
      PushButton(h,v,h+70,v+20,ToolOK,"OK");
      h = 126;
      PushButton(h,v,h+140,v+20,ToolRestore,"Pasirinkti įmonę");
    end else begin
      // PushButton(20,v,20+80,v+20,ToolLoginMaster,"Naujas vartotojas"); // EVS: DOL-32 rm
      PushButton(h,v,h+80,v+20,ToolOK,"OK");
      h = h - 86;
      PushButton(h,v,h+80,v+20,ToolRestore,"Nutraukti");
    end;
  end;
  EndWindow;
end;

window CollectionsAnalysisRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Kolekcijos Analizė",CollectionsAnalysisRClass,CGRcW,RcType);
  SetWRect(20,80,400,220);
  vs = 20; h = 130; v = 6;
  PeriodField(h,v,"Periodas");
  EditFieldTL(h,v+=vs,50,"Mok. Būdas",M4UStr,Normal,5,AccStr,false,PMSClass);
  EditFieldTL(h,v+=vs, 50,"Lokalus kompiuteris",M4Str,Normal,21,f1,false,LocalMachineSClass);
  ButtonFrame(h=50,vm=(v+=40),123,2,"Registrai");
  CheckBox(h,v,0,"Faktūros",flags[1]);
  CheckBox(h,v+=16,0,"POS Invoices",flags[2]);
  ButtonFrame(h=200,v=vm,123,2,"Funkcija");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode);
  RadioButton(h,v+=16,1,0,"Detaliai",ArtMode);
  EndWindow;
end;
/*
window NPTSCashPaymentTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  array boolean achangecrncyf;
  array string 255 acrncy;
  integer acrncnt,i,typ,fldtyp;
  real f,h,h2,h3,h4,hm,l,v,v3,v4,v5,vm,vs,flv,hs;
  WindowBegin("Mokėjimas grynais",NPTSCashPaymentTClass,CGother,RcType);
  AutoSizeWindow(false);
  DynamicWindow;
  if (GuiType==kGuiiPhone or GuiType==kGuiMetro) then begin
    PopoverWindow;
  end;
  CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);
  if (acrncnt<2) then begin acrncnt = 2; end;

//  Modality(1);
  UseView(RcVc);
  SetWRect(80,200,950,430+acrncnt*30);
//  Sizeable(-1,-1,0,0);
  h = 120; h2 = 170; v=40; vs = 30;
  h = 20; f = 70;
  v = 20;
  fldtyp = M4Str;
  switch (GuiType) begin
    case kGuiiPhone: vs = 40; hs = 130; f = 120; fldtyp = M4Val;
    otherwise
      hs = 110; f = 100;
  end;
  StaticText(h,v,"Valiuta",false);
  StaticText(h+=70,v,"Viso Suma",false);    // JP DOL-62
  StaticText(h+=hs,v,"Trūkstama suma",false);
  StaticText(h+=hs,v,"Sumokėta suma",false);
  StaticText(h+=hs,v,"Grąža",false);
  // StaticText(h+=hs,v,"Nesumokėta grąža",false);
  v = v + 10;

  for (i=0;i<acrncnt;i=i+1) begin
    h = 20;
    StaticText(h,v+14,acrncy[i],false);
    SoftEditFieldTLX(h+=70,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentTotalDue" & i,true,0);
    SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentCashAmountDue" & i,true,0);
    SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,Normal,100,15,patM4black,"NPTSCashPaymentCashReceived" & i,true,0);
    typ = ViewOnly;
    if (achangecrncyf[i]) then begin
      typ = Normal;
    end;
    // SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,Normal,100,15,patM4black,"NPTSCashPaymentChangeGiven" & i,true,0);
    SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentChangeDue" & i,true,0);
    v = v + vs;
    if (HasMultiCurrency==false) then begin
      if (i==0) then begin
        i = acrncnt;
      end;
    end;
  end;

  v = v + 10;
  switch (GuiType) begin
    case kGuiiPhone: hm = 480; flv = 50; v4 = 190; v5 = 370; h = 60;
    otherwise
      hm = 680; flv = 30; v4 = -550; v5 = -370; h = 40;
  end;
  if (HasMultiCurrency) then begin
    EditFieldTL(h,v,flv,"Suma",M4Str,ViewOnly,5,CurncyCode,false,0);
  end;
  switch (GuiType) begin
    case kGuiiPhone: h = h + 30;
    otherwise
      h = h + 50;
  end;
  SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentCashAmountDueTotal",true,0);
  SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentCashReceivedTotal",true,0);
  // SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentChangeGivenTotal",true,0);
  SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentChangeDueTotal",true,0);

  v = 10; h2 = 55; v3 = 48; vs = 52;

  if (GuiType==kGuiiPhone) then begin
  ColourPushButton(v4,v+4*vs,v4+3*h2,v+4*vs+v3,"CancelNPTSCashPaymentTClass","Atšaukti<BR>F2",20);
  ColourPushButton(v5,v+4*vs,v5+3*h2,v+4*vs+v3,"ProceedNPTSCashPaymentTClass","Tęsti<BR>F1",20);
  end else begin
    ColourPushButton(v4,v+4*vs,v4+3*h2,v+4*vs+v3,"CancelNPTSCashPaymentTClass","Atšaukti<BR>F2",20);
    ColourPushButton(v5,v+4*vs,v5+3*h2,v+4*vs+v3,"ProceedNPTSCashPaymentTClass","Tęsti<BR>F1",20);
  end;

  h3 = 210; h4 = 400; vm = -160; l = 57;
  switch (GuiType) begin
    case kGuiiPhone: v = v+4*vs;
    otherwise
      v = 10;
  end;
  if ((GuiType!=kGuiiPhone)) then begin
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolKeyPadPoint",".",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"NPTSPaymentToolKeyEnter","Įvesti",2);
  end;
  EndWindow;
end;*/

window NPTSCashPaymentTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  array boolean achangecrncyf;
  array string 255 acrncy;
  integer acrncnt,i,typ,fldtyp;
  real f,h,h2,h3,h4,hm,l,v,v3,v4,v5,vm,vs,flv,hs;
  record LocalMachineBlock LMb;

  
  BlockLoad(LMb);
  WindowBegin("Mokėjimas grynais",NPTSCashPaymentTClass,CGother,RcType);
  AutoSizeWindow(false);
  DynamicWindow;
  if (GuiType==kGuiiPhone or GuiType==kGuiMetro) then begin
    PopoverWindow;
  end;
  CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);


//  Modality(1);
  UseView(RcVc);
  SetWRect(80,200,970,430+(acrncnt+2)*30);
//  Sizeable(-1,-1,0,0);
  switch (LMb.POSButtonsPosition) begin
    case kPOSButtonsPositionLeft:
      h = 270; vs = 30;
    case kPOSButtonsPositionRight:
      h = 20; vs = 30;
  end;
  v = 20;
  fldtyp = M4Str;
  switch (GuiType) begin
    case kGuiiPhone: 
      vs = 40; hs = 130; f = 120; fldtyp = M4Val;
    otherwise
      hs = 110; f = 100;
  end; 
  if (false) then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 01 03 2019 y. at 11:47:27 AM
  StaticText(h,v,"Valiuta",false);
  StaticText(h+=70,v,"Viso",false);
  end else begin
    StaticText(h,v,"Viso suma",false); 
  end;
  StaticText(h+=hs,v,"Mokėtina suma",false);
  StaticText(h+=hs,v,"Sumokėta suma",false); 
  //StaticText(h+=hs,v,"Grąža",false); // Edit ************************** BPI Ukraine - KramarAlexandr - 05, 01 03 2019 y. at 11:50:19 AM
  StaticText(h+=hs,v,"Nesumokėta grąža",false); 
  v = v + 10;
//    SoftEditField(h,v,30,"Valiuta",ViewOnly ,"NPTSCashPaymentCurrency" & i,false,0,M4Str,255);
  switch (LMb.POSButtonsPosition) begin
    case kPOSButtonsPositionLeft:
      h = 270;
    case kPOSButtonsPositionRight:
      h = 20;
    end;
//    SoftEditField(h+500,v,f,"",typ ,"NPTSCashPaymentChangeGiven" & i,true,0,M4Str,255);
  for (i=0;i<acrncnt;i=i+1) begin
    switch (LMb.POSButtonsPosition) begin
      case kPOSButtonsPositionLeft:
        h = 270;
      case kPOSButtonsPositionRight:
    h = 20;
    end;
    if (false) then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 01 03 2019 y. at 11:48:14 AM
    StaticText(h,v+14,acrncy[i],false);
      h = h + 70;
    end;
    SoftEditFieldTLX(h,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentTotalDue" & i,true,0);
    SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentCashAmountDue" & i,true,0);
    SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,Normal,100,15,patM4black,"NPTSCashPaymentCashReceived" & i,true,0);
    typ = ViewOnly;
    if (achangecrncyf[i] or HasMultiCurrency==false) then begin
      typ = Normal;
    //SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,Normal,100,15,patM4black,"NPTSCashPaymentChangeGiven" & i,true,0);// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 01 03 2019 y. at 11:50:39 AM
    end else begin
      h = h + hs;
    end;
    SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentChangeDue" & i,true,0);
    v = v + vs;
    if (HasMultiCurrency==false) then begin
      if (i==0) then begin
        i = acrncnt;
      end;
    end;
  end;

  v = v + 10;
  switch (GuiType) begin
    case kGuiiPhone: hm = 480; flv = 50; v4 = 190; v5 = 370; h = 60;
    otherwise
      hm = 660; flv = 30; v4 = -600; v5 = -420;
      switch (LMb.POSButtonsPosition) begin
        case kPOSButtonsPositionLeft:
          h = 270+20;
        case kPOSButtonsPositionRight:
          h = 50;
      end;      
  end; 
  if (false) then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 01 03 2019 y. at 11:49:03 AM
    EditFieldTLX(h,v,flv,"Bazė",M4Str,ViewOnly,5,15,patM4black,CurncyCode,false,0); 
  switch (GuiType) begin
    case kGuiiPhone: h = h + 30;
    otherwise
      switch (LMb.POSButtonsPosition) begin
        case kPOSButtonsPositionLeft:
          h = 270+70;
        case kPOSButtonsPositionRight:
          h = 20+70;
      end;
  end;   
  SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentCashAmountDueTotal",true,0);
  SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentCashReceivedTotal",true,0);
  SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentChangeGivenTotal",true,0);
  SoftEditFieldTLX(h+=hs,v,f,"",fldtyp,ViewOnly,100,15,patM4black,"NPTSCashPaymentChangeDueTotal",true,0);
  end;

  v = 10; h2 = 55; v3 = 48; vs = 52;
 
  if (GuiType==kGuiiPhone) then begin
  ColourPushButton(v4,v+4*vs,v4+3*h2,v+4*vs+v3,"CancelNPTSCashPaymentTClass","Atšaukti<BR>F2",20);
  ColourPushButton(v5,v+4*vs,v5+3*h2,v+4*vs+v3,"ProceedNPTSCashPaymentTClass","Tęsti<BR>F1",20);
  end else begin
    ColourPushButton(v4,v+4*vs,v4+3*h2,v+4*vs+v3,"CancelNPTSCashPaymentTClass","Atšaukti<BR>F2",20); 
    ColourPushButton(v5,v+4*vs,v5+3*h2,v+4*vs+v3,"ProceedNPTSCashPaymentTClass","Tęsti<BR>F1",20); 
  end;
  
  h3 = 210; h4 = 400; vm = -160; l = 57;
  switch (GuiType) begin
    case kGuiiPhone: v = v+4*vs;
    otherwise
      v = 10;
  end;    
  if ((GuiType!=kGuiiPhone)) then begin  
    switch (LMb.POSButtonsPosition) begin
      case kPOSButtonsPositionLeft:
        hm = 10;
      case kPOSButtonsPositionRight:
        hm = 660;
    end;

  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad10","10_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad20","20_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad50","50_",2);
  v = v+vs;
    h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPadDel","Del",2); 
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPadDecSep",".",2);
    h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPM","+/-",2);
  v = v+vs;
    h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPadClear","Išvalyti",2); 
    h = h+l; ColourPushButton(h,v,h+2*l+h2,v+v3,"NPTSPaymentToolKeyEnter","Enter",2);
  end;
  EndWindow;
end;

window EnterSalesmanNPTSOClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs;
  record LocalMachineBlock lmb;
  integer i,usrcnt;
  array string 20 a_usrcodes;

  BlockLoad(lmb);
  DOLGetSalesmen(lmb.POSGroup,a_usrcodes,usrcnt);


  WindowBegin("Įvesti pardavėją",EnterSalesmanNPTSOClass,CGother,RcType);
  DynamicWindow;
  UseView(RcVc);
  if (usrcnt <= 4) then begin
    SetWRect(80,200,550,480);
  end else begin
    SetWRect(80,200,550,480+(20*usrcnt));
  end;
  vs = 20;
  EditFieldTL(h=110,v=6,150,"Pardavėjas",M4UStr,Normal,10,f1,false,0); //UserNPTSSClass //EBS edit

  // EVS: DOL-59
  h2 = 55; v3 = 48; v = 16;
  BlockLoad(lmb);

  //two button columns needed
  for (i = 0; i < usrcnt; i = i + 2) begin
    // ColourPushButtonTag(80,v+=25,h+h2*2,v+=v3,"DOLEnterSalesmanNPTSOClassPasteUser",a_usrcodes[i],7,a_usrcodes[i]);
    ColourPushButtonTag(-450,v+=25,-450+2*h2,v+v3,"DOLEnterSalesmanNPTSOClassPasteUser",a_usrcodes[i],7,a_usrcodes[i]);
    if ((i+1)<usrcnt) then begin //for last row
      ColourPushButtonTag(-320,v,-320+2*h2,v+=v3,"DOLEnterSalesmanNPTSOClassPasteUser",a_usrcodes[i+1],7,a_usrcodes[i+1]);
    end;
  end;
  // :EVS

  v3 = 33; vs = 37; h3 = 210; h4 = 400; hm = 280;

  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;

  if (usrcnt <= 4) then begin
    v = 10;
  end else begin
    v = 10 + (usrcnt*15);
  end;
  ColourPushButton(-450,v+4*vs,-450+2*h2,v+4*vs+v3,"CancelNPTSCashPaymentTClass","Nutraukti<BR>F2",20);
  ColourPushButton(-320,v+4*vs,-320+2*h2,v+4*vs+v3,"ProceedEnterSalesmanNPTSOClass","Tęsti<BR>F1",20);


  vm = -160; l = 57;
  v = 10;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolKeyPadPoint",".",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"NPTSPaymentToolKeyEnter","Įvesti",2);
  EndWindow;
end;

window GCSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Įstatyti išleistą dovanų čekį",GCSClass,CGslist,-);
  SetWRect(64,80,509,298);
  SpawnClass(GCDClass);
  Sizeable(-1,-1,0,0);
  UseView(GCVc);
  HalPushButton(10,10,100,30,"EBS_CloseWindowBtn","Nutraukti"); //EBS close button
  RecordList(4,47,-21,-39); //EBS edit
  RlColKey(4,4,"Nr.",SerNr,false,ActSerNr2);
  RlColKey(94,94,"Data",TransDate,false,ActTransDate2);
  RlColKey(170,170,"Komentaras",Comment,false,ActComment2);
  RlCol(-70,-70,"Suma",Amount,true);
  SearchField("Ieškoti");
  EndWindow;
end;

window CCPayTouchScreenDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real h,h2,v;
  record LocalMachineBlock LMb;
  record RahaxiBlock Rahaxib;
  WindowBegin("Kredito kortelės mokėjimas",CCPayTouchScreenDClass,CGother,RcType);
  Modality(kModalityGlobal);
  UseView(RcVc);
  SetWRect(80,200,530,440);
  h = 210; h2 = 170; v=40;
  if (GuiType==kGuiiPhone) then begin
    h = 280; h2 = 240; v=60;
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiMetro) then begin
    PopoverWindow;
  end;
  // EditFieldTLX(h,v=6, 140,"Kiekis",M4Val,Normal,0,30,patM4black,vals0,true,0);
  EditFieldTLX(h,v=6, 140,"Suma EUR",M4Val,Normal,0,30,patM4black,vals0,true,0); // EVS: DOL-54
  BlockLoad(LMb);
  if (LMb.CCRequireAuthCode!=0) then begin
    EnterSkip(f1);
    EditFieldTLX(h,v=v+40, 140,"Autorizacija",M4Str,Normal,20,30,patM4black,f1,false,0);
  end;
  // EditFieldTLX(h,v=v+40, 80,"Valiuta",M4Str,ViewOnly,5,30,patM4black,CurncyCode,false,0);
  BlockLoad(Rahaxib);
  v = v+70;
  if (Rahaxib.TerminalType!=kLocalCCTerminalPCEFTPOS) then begin
    StaticText(h-145,v,"(Jei turite paruošė kredito kortelė, galite ja perbraukti.)",false);
  end;
  if (GuiType==kGuiiPhone) then begin
    h = 160; h2 = 450;
  end else begin
    h=50; h2 = 370;
  end;
  if (GuiType==kGuiiPhone) then begin
    ColourPushButton(h,v+=20,h+165,v+48,"CancelCCPayTouchScreenDClass","Atšaukti",20);
    ColourPushButton(h+=180,v,h+165,v+48,"ProceedCCPayTouchScreenDClass","Tęsti",20);
  end else begin
  ColourPushButton(h,v+=20,h+165,v+48,"CancelCCPayTouchScreenDClass","Atšaukti<BR>F2",20);
  ColourPushButton(h+=180,v,h+165,v+48,"ProceedCCPayTouchScreenDClass","Tęsti<BR>F1",20);
  ColourPushButton(h2,v=3,h2+70,v+50,"CashPayTouchScreenKeypad","Klaviatūra<BR>F3",2);
  end;
  EndWindow;
end;

window EnterTextWClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs;
  WindowBegin("Kiekis įvesti",EnterTextWClass,CGother,RcType);
  SetWRect(64,100,420,420);
  UseView(RcVc);
  h2 = 80; v3 = 33; vs = 37; h3 = 210; h4 = 400; v = 6;
  EditFieldTLX(h=140,v,100,"Suma",M4Str,Normal,100,30,patM4black,f1,true,0);
  vm = -160; hm = 100; vs = 52; h2 = 55; v3 = 48; l = 57;
  v = v + 45;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad3","3_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad6","6_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyDel","Del",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"EnterTextToolKeyPadPoint",".",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"EnterTextToolKeyEnter","Enter",2);
  EndWindow;
end;

window StockMovLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Sandėlio perkėlimai",StockMovLClass,CGmlist,-);
  SpawnClass(StockMovDClass);
  SetWRect(64,80,800,298);
  Sizeable(-1,-1,0,0);
  UseView(StockMovVc);
  FormName(PrintStockMovL);
  if (GuiType == kGuiCocoa) then begin
    // EVS: DOL-27
    ToolBar;
    HalPushButton(50,6,50+140,6+20,"DOLOpenFrFilterLClassBtn","IŠ");
    HalPushButton(200,6,200+140,6+20,"DOLOpenAllFilterLClassBtn","VISI");
    EndToolBar;
    // :EVS
    RecordList(4,17,-21,-39);
  end else begin
    // EVS: DOL-27
    //ToolBar;
    HalPushButton(50,6,50+140,6+20,"DOLOpenFrFilterLClassBtn","IŠ");
    HalPushButton(200,6,200+140,6+20,"DOLOpenAllFilterLClassBtn","VISI");
    //EndToolBar;
    // :EVS
    RecordList(4,50,-21,-39);
  end;
  RlColKey(4,4,  "Nr.",SerNr,false,ToSerNr);
  if (HasThrouLocation) then begin
    RlColKey(71,71,"Išsiųsta",SentOKFlag,false,ToSentOKFlag);
  end;
  RlColKey(111,111,"Gauta",OKFlag,false,ToOKFlag);
  if (HasThrouLocation) then begin
    RlColKey(151,151,"Siuntimo data",SentTransDate,false,ToSentTransDate);
  end;
  RlColKey(223,223,"Data",TransDate,false,ToTransDate);
  if (HasMultiLocations) then begin
  RlColKey(295,295,"Fr. patalpa",FrLocation,false,ToFrLocOK);
  if (HasThrouLocation) then begin
    RlColKey(370,370,"Per patalpą",ThrouLocation,false,ToToThrouLocOK);
  end;
  RlColKey(450,450,"Į patalpą",ToLocation,false,ToToLocOK);
  end;
  if (HasModProd) then begin
  RlColKey(530,530, "Gam.",ProdSerNr,false,ProdSerNr);
  RlColKey(590,590, "Komentaras",Comment,false,Comment);
  end else begin
    RlColKey(530,530, "Komentaras",Comment,false,Comment);
  end;
  SpecialMenu("Gauti",'G',0,"OKStockMovLsm");
  SearchField("Ieškoti");
  EndWindow;
end;

window LocalMachineDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Vietinis aparatas",LocalMachineDClass,CGview,-);
  SetWRect(64,80,509,370);
  UseView(LocalMachineVc);
  v = 10; vs = 20; h = 100; h2 = 300;
  EditField(h,v, 70,     "Kodas",Normal,Code,false,0);
  EditField(h,v+=vs ,-40,"Aprašymmas",Normal,Comment,false,0);
  EditField(h,v+=vs,-40,"Įmonės pav.",Normal,CompName,false,0);
  EditField(h,v+=vs,-40,"Adresas",Normal,Addr0,false,0);
  EditField(h,v+=vs,-40,"",Normal,Addr1,false,0);
  EditField(h,v+=vs,-40,"",Normal,Addr2,false,0);
  EditField(h,v+=vs,-40,"",Normal,Addr3,false,0);
  EditField(h,v+=vs,-40,"",Normal,Addr4,false,0);
  EditField(h,v+=vs,140,"Telefonas",Normal,Tel,false,0);
  EditField(h2,v,-40,"Patalpa",Normal,FaxNo,false,LocationSClass); //EBS edit, used in creating transaction from cashvc record
  EditField(h,v+=vs,140,"Reg. nr.",Normal,RegNr,false,0);
  if (HasFiscalPrinter) then begin
  EditField(h2,v,-40,"PVM nr.",Normal,VATNo,false,0);
  end;
  EditField(257,v+=vs,150,"Kasos aparato numeris",Normal,MachineNr,false,0);  //JP: DOL-133
  EndWindow;
end;

window INRClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,v1,vm,vs,v2;
  WindowBegin("Prekių likučiai",INRClass,CGRcW,RcType);
  h = 160; v = 6; vs = 20; h2 = 30; h3 = 180; h4 = 330;

  if (IsEnterprise) then begin
    SetWRect(20,80,580,470);
    h4 = 330;
  end else begin
    SetWRect(20,80,400,470);
    h4 = 227;
    h = 120;
  end;

  EditFieldTL(h,v,150,"Prekė",M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=vs,150,"Grupė",M4UStr,Normal,11,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs,150,"Prekės klasė", M4UStr,Normal,100,f4,false,DISClass);
    EditFieldTL(h,v+=vs,150,"Klasių tipas",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs,80,"Patalpa",M4Code,Normal,10,f2,false,LocationSClass);
  end;
    //  EditFieldTL(h,v+=vs,80,"Location Group",M4Code,Normal,10,f6,false,LocGrSClass);
//  EditFieldTL(h,v+=vs,150,"Location Classification",M4List,Normal,200,f7,false,LocClSClass);
  if (HasPositions) then begin
    EditFieldTL(h,v+=vs,150,"Pozicija",M4Code,Normal,10,FirstAcc,false,PosSClass);
  end;
  if (HasDepartments) then begin
    EditFieldTL(h,v+=vs,150,"Skyrius",M4UStr,Normal,10,AccStr,false,DepSClass);
  end;
  if (HasModPO) then begin
    EditFieldTL(h,v+=vs,150,"Tiekėjas",M4UStr,Normal,20,LastAcc,false,VESClass);
  end;
  if (HasCategories) then begin
    EditFieldTL(h,v+=vs,50,"Tiekėjo kategorija",M4UStr,Normal,5,f9,false,CCatSClass);
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=vs,150,"Pirkėjo klasė",M4UStr,Normal,30,f8,false,CClassSClass); //!!TRANSLATE
  end;
    EditFieldTL(h,v+=vs,80,"Data",M4Date,Normal,0,d1,false,PasteCurDate);
  if (StandardHansa==true) then begin
    v = v + vs;
  end;
  ButtonFrame(h2,vm=(v+=60),123,5,"Funkcija");
    RadioButton(h2,v,0,0,"Peržiūra",ArtMode);
    RadioButton(h2,v+=16,1,0,"Detaliai",ArtMode);
  if (HasMultiLocations) then begin
    RadioButton(h2,v+=16,2,0,"Patalpos",ArtMode);
  CheckBox(h2+30,v+=16,0,"Įtr. sumas",flags[14]);
  RadioButton(h2,v+=16,3,0,"Viso patalpai",ArtMode);
  RadioButton(h2,v+=16,4,0,"POS",ArtMode); // EVS: DOL-49
  end;
  EndFrame;
  if (HasMultiCurrency) then begin
    v = v + 45; v1 = v;
  end;
/*not implemented ?
  if (HasMultiCurrency) then begin
    ButtonFrame(h2,v1=(v+=45),123,2,"Exchange Rate");
    RadioButton(h2,v,0,0,"At Goods Receipt",flags[1]);
    RadioButton(h2,v+=16,1,0,"Current",flags[1]);
  end;
*/
  if (IsEnterprise) then begin
  ButtonFrame(h3,v=vm,123,5,"Įvertinimo metodas");
  RadioButton(h3,v,0,0,"Nustatytas",flags[11]);
  RadioButton(h3,v+=16,1,0,"Savikaina",flags[11]);
  RadioButton(h3,v+=16,2,0,"% nuo pardavimo kainos",flags[11]);
  RadioButton(h3,v+=16,3,0,"Svertinis vidurkis",flags[11]);
  RadioButton(h3,v+=16,4,0,"Eilės",flags[11]);
  ButtonFrame(h3,v=v1,123,3,"Rodyti");
  RadioButton(h3,v,0,0,"Paprastai",flags[19]);
  RadioButton(h3,v+=16,1,0,"Apibendrintai",flags[19]);
  RadioButton(h3,v+=16,2,0,"Neapibendrintai",flags[19]);
  end;
  ButtonFrame(h4,v=vm,123,5,"Rūšiavimas");
  RadioButton(h4,v,0,0,"Nr.",flags[2]);
  if (HasItemGroups) then begin
  RadioButton(h4,v+=16,1,0,"Grupė",flags[2]);
  end;
  RadioButton(h4,v+=16,2,0,"Pavadinimas",flags[2]);
  if (IsEnterprise) then begin
  RadioButton(h4,v+=16,3,0,"Barkodas",flags[2]);
    if (StandardHansa==false) then begin
  RadioButton(h4,v+=16,4,0,"Klasė",flags[2]);
    end;
  end;
  EndFrame;
  v2 = v + 16;
  v = v1;
  if (IsEnterprise) then begin
    ButtonFrame(h4,v,188,3,"Funkcija");
  RadioButton(h4,v,0,0,"Įtraukti konsignacines prekes",flags[12]);
  RadioButton(h4,v+=16,1,0,"Neįtraukti konsignacinių prekių",flags[12]);
  RadioButton(h4,v+=16,2,0,"Tik konsignacinės prekės",flags[12]);
  CheckBox(h4,v=20,0,"Tik su likučiais",UsedOnly);
  CheckBox(h4,v+=16,0,"Tik neigiami kiekiai",flags[17]);
  end;
  if (IsEnterprise==false) then begin
    v = v2;
  end;
  if (HasSerialNumbers) then begin
    CheckBox(h4,v+=16,0,"Rodyti serijinį  Nr.",flags[10]); v = v + 16;
  end;
  if (HasSecondQuantity) then begin
    CheckBox(h4,v,0,"Rodyti kiekį 2",flags[15]); v = v + 16;
  end;
  if (IsEnterprise) then begin
    CheckBox(h4,v,0,"Vertės - 2 sk. po kabl.",flags[16]); v = v + 16; // Who wanted this? Decimals per report....nahh.., I haven't added this one, JJ
    CheckBox(h4,v,0,"Įtraukti uždarytas prekes",flags[18]); v = v + 16;
    CheckBox(h4,v,0,"Ataskaita skaičiuota svert. vid. atbul. data",flags[20]); v = v + 16;
    if (StandardHansa==false) then begin
      CheckBox(h4,v,0,"Rodyti su supersesijomis",flags[21]); v = v + 16;
    end;
end;
  if (HasVarieties) then begin
    CheckBox(h4,v,0,"Rodyti įvairoves",flags[22]); v = v + 16;
  end;
  if (HasLocalization("ARG,MEX,USA") and IsStandardProduct==false) then begin
    CheckBox(h4,v,0,"Show Dispatch Number (Detailed)",flags[23]); v = v + 16;
  end;
  EndWindow;
end;

window NPTSSearchCURClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real h,h2,h3,h4,hm,l,v,v2,v3,vm,vs,xv1,xv2;
  WindowBegin("Ieškoti kontaktų",NPTSSearchCURClass,CGOther,RcType);
  UseView(RcVc); //EBS otherwise numpad is not working
  Modality(kModalityGlobal);
  SetWRect(64,80,609,308); //EBS edit
  vs =20;h=100;v=5;
  switch (GuiType) begin
    case kGuiiPhone: PopoverWindow; h = 200; vs = 50; xv1=-550; xv2=-360; v2 = 30;
    otherwise
      vs=20;h=140;v=5; xv1=-500; xv2=-310; //EBS edit
  end;
  EditFieldTL(h,6 ,100,"Ieškoti",M4Str,Normal,40,f1,false,0); //EBS edit
  EditFieldTL(h,v+=vs,100,"Klasė",M4Str,Normal,40,f2,false,0); //EBS edit
  v = v + 40 + v2;
  ButtonFrame(h,v,123,5,"Ieškoti");
  RadioButton(h,v,2,0,"Pavadinimas",ArtMode);
  RadioButton(h,v+=16,1,0,"Nr.",ArtMode);
//  RadioButton(h,v+=16,3,0,"Trumas",ArtMode);
// RadioButton(h,v+=16,4,0,"Kategorija",ArtMode);
  RadioButton(h,v+=16,5,0,"Telefonas",ArtMode);
//  RadioButton(h,v+=16,6,0,"Kontaktas",ArtMode);
//  RadioButton(h,v+=16,7,0,"Skyrius",ArtMode);
  RadioButton(h,v+=16,8,0,"E-paštas",ArtMode);
  RadioButton(h,v+=16,0,0,"Visi",ArtMode);

//EBS-->
  h=20;
  ColourPushButtonTag(h,v=60,h+100,v+=25,"NPTSSearchCURClassArtModeBtn","Pavadinimas",2,"2");
  ColourPushButtonTag(h,v+=5,h+100,v+=25,"NPTSSearchCURClassArtModeBtn","Nr.",2,"1");
  ColourPushButtonTag(h,v+=5,h+100,v+=25,"NPTSSearchCURClassArtModeBtn","Telefonas",2,"5");
  ColourPushButtonTag(h,v+=5,h+100,v+=25,"NPTSSearchCURClassArtModeBtn","E-paštas",2,"8");
  ColourPushButtonTag(h,v+=5,h+100,v+=25,"NPTSSearchCURClassArtModeBtn","Visi",2,"0");

  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;
  v = 10; hm=300;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
  // h = h+l; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolKeyPadPoint",".",2);
//EBS<--

  v3 = 33; vs = 37; h3 = 210; h4 = 400; hm = 330;

  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;

  v = 20; //EBS edit

  if (GuiType==kGuiiPhone) then begin
    ColourPushButton(xv1,v+4*vs,xv1+3*h2,v+4*vs+v3,"CancelAndOverrideLogout","Atšaukti",20);
    ColourPushButton(xv2,v+4*vs,xv2+3*h2,v+4*vs+v3,"ProceedNPTSSearchCURClass","Tęsti",20);
  end else begin
    ColourPushButton(xv1,v+4*vs,xv1+3*h2,v+4*vs+v3,"CancelAndOverrideLogout","Atšaukti<BR>F2",20);
    ColourPushButton(xv2,v+4*vs,xv2+3*h2,v+4*vs+v3,"ProceedNPTSSearchCURClass","Tęsti<BR>F1",20);
  end;
  EndWindow;
end;

window CUNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h;
  WindowBegin("Įstatyti pirkėją",CUNPTSSClass,CGother,HBlRecType);
  ToolBar;
  h = -316;
  Modality(kModalityGlobal);
  ColourPushButton(h,2,h+90,30,"NPTSSearchItemCancel","Atšaukti",20);
  ColourPushButton(h+=100,2,h+90,30,"CUNPTSSClassNewCustomer","Naujas",20);
  ColourPushButton(h+=100,2,h+90,30,"NPTSSearchCustomerOnceMore","Ieškoti vėl",20);
  EndToolBar;
  SetWRect(240,80,700,398);
  Sizeable(-1,-1,0,0);
  StringList2(9,9,-25,-10);
  EndWindow;
end;

window StockMovDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  Integer tilenr,f,flipnr;

  WindowBegin("Sandėlio perkėlimai",StockMovDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,850,400);
  end else begin
  SetWRect(20,80,700,400);
  end;
  Sizeable(-1,-1,0,0);
  UseView(StockMovVc);
  ActiveFieldOnNew("SentTransDate");
  Tile(0,90,false,"",TransDate);
  v = 6; vs = 20; h = 110; h2 = 300; h3 = 500; h4 = 620;
  EditField(h,v,80, "Nr.",Normal,SerNr,false,TSerSClass);
  CheckBox(h2,v,0,"Rezervuota",Reserved);
  EditField(h3,v,80,"Priežastis",Normal,Reason,false,StandProblemsSClass);
  EditField(h,v+=vs,80,"Užsakymo data",Normal,OrdTransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    if (IsEnterprise) then begin
  EditField(h2,v,80,"Siuntimo data",Normal,SentTransDate,false,PasteCurDate);
    end;
  end;
  EditField(h3,v,80,"Gavimo data",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
  EditField(h,v+=vs,80, "Iš patalpos",Normal,FrLocation,false,LocationSClass);
    if (IsEnterprise) then begin
  EditField(h2,v,80,"Per patalpą",Normal,ThrouLocation,false,LocationSClass);
    end;
  EditField(h3,v,80,"Į patalpą",Normal,ToLocation,false,LocationSClass);
  end;
  tilenr = 1;
  if (HasPositions or HasModWHM or HasLocalization("PRT")) then begin
    TileButton(tilenr,"Pozicijos"); tilenr = tilenr + 1;
  end;
  if (HasObjects) then begin
    TileButton(tilenr,"Objektai"); tilenr = tilenr + 1;
  end else begin
    TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Prekės"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Trukmė"); tilenr = tilenr + 1;
  TileButton(tilenr,"Frachtas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Adresas"); tilenr = tilenr + 1;
  tilenr = 1;
  if (HasPositions or HasModWHM or HasLocalization("PRT")) then begin
    Tile(tilenr,60,false,tilenr,FrPos); tilenr = tilenr + 1;
    v = 6;
    if (HasPositions) then begin
      EditField(h,v,80, "Iš vietos",Normal,FrPos,false,UsedPosSClass);
  EditField(h2,v,80,"Į vietą",Normal,ToPos,false,FreePosSClass);
    end;
    if (HasModProd) then begin
      EditField(h3,v,80,"Gamybai",Normal,ProdSerNr,false,ProdSClass); v = v + vs;
      EditField(h3,v,150,"Maršr.",Normal,Sorting,false,DelRouteSClass); v = v + vs;
    end;
    if ((HasLocalization("PRT") and HasModIN and HasMultiLocations) or IsStandardProduct==false) then begin
      EditField(h3,v,150,"Type",Normal,StockMovType,false,SetSClass); v = v + vs;
    end;
    if (HasModWHM) then begin
      v = 6 + vs;
  CheckBox(h,v,0,"Rankinis pasirinkimas",ManualPick);
  CheckBox(h,v+=16,0,"Pasiųsti į keltuvo eilė",ToForkLiftQue);
    end;
  end;
  Tile(tilenr,70,false,tilenr,Comment); tilenr = tilenr + 1;
  v = 6;
  if (HasObjects) then begin
    EditField(h,v,-20,"Objektai",Normal,Objects,false,ObjSClass);
    v = v + vs;
  end;
  EditField(h,v,-20,"Komentaras",Normal,Comment,false,0);
  EditField(h,v+=vs,135,"Oficialus ser. nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  EnterSkip(Math);
  Tile(tilenr,79,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  // EVS: DOL-82
  ColourPushButtonTag(h=90,v-20,h+=55,v+20,"DOLSetStockMovColQty","Užpildyti",2,0);
  ColourPushButtonTag(h+=10,v-20,h+=55,v+20,"DOLSetStockMovColQty","Užpildyti",2,1);
  ColourPushButtonTag(h+=10,v-20,h+=55,v+20,"DOLSetStockMovColQty","Užpildyti",2,2);
  // :EVS
  MatrixBegin(4,v+40,-50,-50,-,199); //edit
  Flip(0);
  flipnr = 1;
  if (HasJewelleryInterface) then begin
    MatCol(1,32,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
    EnterSkip(Quant);
    MatCol(1,130,"Prekė",0,ArtCode,false,INSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    if (HasVarieties) then begin
    MatCol(1,200,"Reik.kiek.",0,OrdQuant,true,MATVARINSClass);
    end else begin
      if (HasThrouLocation) then begin
      MatCol(1,200,"Reik.kiek.",0,OrdQuant,true,0);
    end;
    end;
    if (HasThrouLocation) then begin
    MatCol(1,250,"Išs.kiek.",0,SentQuant,true,0);
    end;
    MatCol(1,300,"Gaut.kiek.",0,Quant,true,0);
    MatCol(1,350,"Aprašymas",0,Spec,false,0);
  end else begin
    MatCol(1,32,"Prekė",0,ArtCode,false,INSClass);
    Flip(flipnr);  flipnr = flipnr + 1;
    if (HasVarieties) then begin
  MatCol(1,86,"Reik.kiek.",0,OrdQuant,true,MATVARINSClass);
    end else begin
      if (HasThrouLocation) then begin
      MatCol(1,86,"Reik.kiek.",0,OrdQuant,true,0);
    end;
    end;
    if (HasThrouLocation) then begin
  MatCol(1,148,"Išs.kiek.",0,SentQuant,true,0);
    end;
  MatCol(1,210,"Gaut.kiek.",0,Quant,true,0);
  MatCol(1,272,"Aprašymas",0,Spec,false,0);
  end;
  MatCol(1,-260,"G.sena vnt. kaina",0,OldPrice,true,0);
  MatCol(1,-160,"G.papild.kašt.",0,ExtraSCost,true,0);
  MatCol(1,-80,"G.nauja vnt.kain.",0,NewPrice,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasVarieties) then begin
  MatCol(1,86,"Reik. kiekis",0,OrdQuant,true,MATVARINSClass);
  end else begin
    if (HasThrouLocation) then begin
    MatCol(1,86,"Reik.kiek.",0,OrdQuant,true,0);
  end;
  end;
  if (HasThrouLocation) then begin
  MatCol(1,148,"Išs. kiekis",0,SentQuant,true,0);
  end;
  MatCol(1,210,"Gautas kiekis",0,Quant,true,0);
  MatCol(1,272,"Aprašymas",0,Spec,false,0);
  MatCol(1,-260,"Išs.sena vnt.kain.",0,SentOldPrice,true,0);
  MatCol(1,-160,"Išs.papild.kašt.",0,SentExtraSCost,true,0);
  MatCol(1,-80,"Išs.nauja vnt.kaina",0,SentNewPrice,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Aprašymas",0,Spec,false,0);
  if (HasObjects) then begin
  MatCol(1,-380,"Objektai",0,Objects,false,ObjSClass);
  end;
  if (HasSerialNumbers) then begin
  MatCol(1,-280,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-140,"Baz. kaina",0,BasePrice,true,0);
  MatCol(1,-40,"Koef.",0,Coefficient,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Aprašymas",0,Spec,false,0);
  if (HasSerialNumbers) then begin
  MatCol(1,-280,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-135,"Plotis",0,UnitXval,true,0);
  MatCol(1,-90,"Aukštis",0,UnitYval,true,0);
  MatCol(1,-45,"Gylis",0,UnitZval,true,0);
  if (HasPositions) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Aprašymas",0,Spec,false,0);
  MatCol(1,-180,"Iš vietos",0,FrPosCode,false,UsedPosSClass);
  MatCol(1,-90,"Į vietą",0,ToPosCode,false,FreePosSClass);
  end;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusStockMovDsm");
  if (HasQualityControl) then begin
    RowMenuItem(0,"Kokybės kontrolė",'u','u',0,"QualConFromStockMovDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18 + 45; //EBS edit
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasThrouLocation) then begin
  CheckBox(20,-52,0,"Patvirtinta",OrdFlag);
  CheckBox(20,-36,0,"Išsiųsta",SentOKFlag);
  end;
  CheckBox(20,-20,0,"Gauta",OKFlag);
  if (HasThrouLocation) then begin
  EditField(170,-20,62,"Išs. kiekis",Normal,TotSentQty,true,0);
  end;
  EditField(310,-20,62,"Gaut. kiekis",Normal,TotQty,true,0);
  if (HasLocalization("HRV,PRT")) then begin
    EditField(550,-40,150,"Tax Auth. Approval",Normal,TaxAdminServSeal,false,0);
//    SoftEditField(550,-40,150,"Tax Auth. Approval",Normal,"TaxAdminServSeal",false,0,M4Str,200);
  end;
  EditField(550,-20,100,"Neapsk. papildomi kaštai",Normal,OtherExtraCosts,false,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    h1 = 110; vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Bazinė valiuta",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Bazinė valiuta 2",Normal,BaseRate2,true,0);
    end;
  end;
  Tile(tilenr,110,false,tilenr,PlanSendDate); tilenr = tilenr + 1;
  vs = 20; h1 = 130; h2 = 330; h3 = 560;
  EditField(h,v=6,80,"Plan. išs. data",Normal,PlanSendDate,false,PasteCurDate);
  EnterSkip(PlanSendTime);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin
  EditField(h2,v,40,"Plan. trukmė dien.",ViewOnly,PlanDurationDays,false,0);
  end;
  EditField(h,v+=vs,80,"Plan. išs. laikas",Normal,PlanSendTime,false,PasteCurTime);
  EnterSkip(PlanArrDate);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin
  EditField(h2,v,80,"Plan. trukmė val.",ViewOnly,PlanDurationTime,false,0);
  end;
  EditField(h3,v=6,80,"Plan. atvykimo data",Normal,PlanArrDate,false,PasteCurDate);
  EditField(h3,v+=vs,80,"Plan. atvykimo laikas",Normal,PlanArrTime,false,PasteCurTime);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin
  EditField(h,vm=(v+=32),80,"Išsiuntimo data",Normal,ActSendDate,false,PasteCurDate);
  EnterSkip(ActSendTime);
  EditField(h2,v,40,"Trukmė dienomis",ViewOnly,ActDurationDays,false,0);
  EditField(h,v+=vs,80,"Išsiuntimo laikas",Normal,ActSendTime,false,PasteCurTime);
  EnterSkip(ActArrDate);
  EditField(h2,v,80,"Trukmė valandomis",ViewOnly,ActDurationTime,false,0);
  EditField(h3,v=vm,80,"Atvykimo data",Normal,ActArrDate,false,PasteCurDate);
  EditField(h3,v+=vs,80,"Atvykimo laikas",Normal,ActArrTime,false,PasteCurTime);
  end;
  Tile(tilenr,110,false,tilenr,FreightCode); tilenr = tilenr + 1;
  vs = 20; h2 = 255;
  EditField(h=130,v=6,60,"Frachto įmonė",Normal,FreightCode,false,FreightCompanySClass);
  EditField(h2,v,-40,"Reg. nr.",Normal,FreightCompanyRegNr,false,0);
  EditField(h,v+=vs,-40,"Pavadinimas",Normal,FreightCompany,false,0);
  EditField(h,v+=vs,-40,"Sunkvežimio inform.",Normal,TruckInfo,false,0);
  EditField(h,v+=vs,-40,"Vairuotojas",Normal,Driver,false,0);
  EditField(h,v+=vs,-40,"CMR",Normal,CMRText,false,0);
  if (HasNumberSeries and HasLocalization("PRT")) then begin
    if (HasOfficialSerNr) then begin
      EditField(h,v+=vs,100,"Oficialus ser. nr. 2",Normal,OfficialSerNr2,false,0);
      EditField(h2+100,v,135,"Status",Normal,Status,false,SetSClass);
    end;
  end;
  Tile(tilenr,200,false,tilenr,FrAddr0); tilenr = tilenr + 1;
  vs = 20; h2 = 255;
  EditField(h=130,v=6,-40,"Iš adresas",Normal,FrAddr0,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr1,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr2,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr3,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr4,false,0);
  if (HasThrouLocation) then begin
  EditField(h,v+=vs,-40,"Per adresas",Normal,ThrouAddr0,false,0);
  EditField(h,v+=vs,-40,"",Normal,ThrouAddr1,false,0);
  EditField(h,v+=vs,-40,"",Normal,ThrouAddr2,false,0);
  EditField(h,v+=vs,-40,"",Normal,ThrouAddr3,false,0);
  EditField(h,v+=vs,-40,"",Normal,ThrouAddr4,false,0);
  end;
  EditField(h,v+=vs,-40,"Į adresas",Normal,ToAddr0,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr1,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr2,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr3,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr4,false,0);
  SpecialMenu("Įsigijimo kaina senoje vnt. kainoje",'=',0,"StockMovFillFIFODsm");
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  if (HasModNL) then begin
  SpecialMenu("Atidaryti siuntimo D/K operaciją",' ',2,"OpenTRFromStockMovSent");
  SpecialMenu("Atidaryti gavimo D/K operaciją",'t',3,"OpenTRFromStockMov");
  end;
  if (HasLocalization("PRT")) then begin
    if (HasETaxDocuments) then begin
      SpecialMenu("Send to Tax Authorities",'',10,"EShipPRTDsm");
    end;
  end;
  EndWindow;
end;

window LoyaltyCardDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vm,vs;
  WindowBegin("Lojalumo kortelė",LoyaltyCardDClass,CGview,-);
  SetWRect(64,80,640,230);
  UseView(LoyaltyCardVc);
  ActiveFieldOnNew("CustCode");
  v = 16; vs = 20; h = 120; h2 = 300; h3 = 440;
  EditField(h,vm=v, 80,"Nr.",St_i,SerNr,false,0);
  EditField(h,v+=20,80, "Pirkėjas",Normal,CustCode,false,CUSClass);
  EnterSkip(StartDate);
  EditField(h2,v,-40, "Vardas",Normal,CustName,false,0);
  EditField(h,v+=20,70,"Pradž. data",Normal,StartDate,false,PasteCurDate);
  EditField(h2,v,70,"Pab. data",Normal,ExpiryDate,false,PasteCurDate);
  EditField(h,v+=20,80,"Narystės lygis",Normal,LCMLevel,false,LCMemberLevelSClass);
  EditField(h2,v,70,"Prisk. taškai",ViewOnly,PointsBalance,true,0);
  EditField(h3,v,-40,"Taškai iki",Normal,PointsTo,false,LoyaltyCardSClass);
  CheckBox(h,v+=20,0,"Uždaryta",Closed);
  CheckBox(h,v+=20,0,"Nekeisti nuolaidos automatiškai",NoAutoLevelingFlag); // EVS: DOL-83
  EndWindow;
end;

window CCatDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Pirkėjo kategorija",CCatDClass,CGview,-);
  SetWRect(64,80,600,330);
  UseView(CCatVc);
  v = 6; vs = 20; h = 100;
  if (IsEnterprise) then begin
  Tile(0,110,false,"",Code); //EBS edit
  EditField(h,v, 70,"Kodas",Normal,Code,false,0);
  EditField(h,v+=vs,-40,"Aprašymas",Normal,Comment,false,0);
    if (StandardHansa==false) then begin
  EditField(h,v+=vs,-40,"Klasių tipai",Normal,ClassType,false,CTypeSClass);
  end;
  EditField(h,v+=vs,70,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h+200,v,70,"Pirkėjo klasės",Normal,CustClass,false,CClassSClass);
  TileButton(1,"Kain.");
  TileButton(2,"Sąsk.");
    if (StandardHansa==false) then begin
    TileButton(3,"Web");
    end;
    if (HasCharts) then begin
    TileButton(4,"BI");
    end;
  Tile(1,110,false,"1",PLCode);
  v = 6; h = 200;
  EditField(h,v,70,"Kainoraštis",Normal,PLCode,false,PLDefSClass);
  if (HasAdvancedPricing) then begin
  EditField(h,v+=vs,70,"Nuolaidos lentelė",Normal,RebCode,false,RebSClass);
  end;
  EditField(h,v+=vs,55,"Išankst. apmok. procentas",Normal,DownPayPerc,false,0);
  if (HasItemClassification) then begin
  EditField(h,v+=vs,55,"Pagr. prekės klasė",Normal,MainDispGroup,false,DISClass);
  end;
    if (StandardHansa==false) then begin
  EditField(h,v+=vs,55,"Internetinio Užsak. klasė",Normal,WebOrderClass,false,OrderClassSClass);
    end;
//##  EditField(h,v+=vs ,70, "Komisinių lentelė",Normal,ComCode,false,ComSClass);
  Tile(2,130,false,"2",ARAcc);
  v = 6; h = 200;
  EditField(h,v ,55,"Debitorių sąsk.",Normal,ARAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Nemokių debitorių sąsk.",Normal,BadARAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Debitorių avanso sąsk.",Normal,OnAccAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Kreditorių sąsk.",Normal,AccAP,false,AccSClass);
  EditField(h,v+=vs,55,"Kreditorių avanso sąsk.",Normal,OnAccAccAP,false,AccSClass);
  EditField(h,v+=vs,55,"Sulaik. sąsk.",Normal,RetainAcc,false,AccSClass);
    if (StandardHansa==false) then begin
  Tile(3,50,false,"3",WebDisplays);
  v = 6;
  EditField(h,v,55,"Rodyti puslapyje",Normal,WebDisplays,false,WebDisplaySClass);
    end;
    if (HasCharts) then begin
    Tile(4,400,false,"4",-);
    ChartArea(10,6,-10,390,"$CCATDCLass_BIChart");
    end;
  end else begin
  SetWRect(64,80,509,200);
  UseView(CCatVc);
    v = 10; vs = 20; h = 130; h2 = 320;
  EditField(h,v, 70,"Kodas",Normal,Code,false,0);
  EditField(h,v+=vs ,-40,"Aprašymas",Normal,Comment,false,0);
    if (HasContactClassification or HasStandardCRM) then begin
  EditField(h,v+=vs ,-40,"Klas. tipai",Normal,ClassType,false,CTypeSClass);
    end;
    if (HasCategories or HasStandardCRM or HasPriceLists) then begin
  EditField(h,v+=vs ,70, "Kainoraščiai",Normal,PLCode,false,PLDefSClass);
end;
  if (HasModNL) then begin
  EditField(h,v+=vs ,70,"Debitorių sąsk.",Normal,ARAcc,false,AccSClass);
      if (HasRussianPrepayment or HasPrepayments) then begin
        if (HasModSL) then begin
          EditField(h,v+=vs,70,"Debtors On Acc. A/C",Normal,OnAccAcc,false,AccSClass); //!!TRANSLATE
        end;
        if (HasModPL) then begin
          EditField(h,v+=vs,70,"Creditors On Acc. A/C",Normal,OnAccAccAP,false,AccSClass); //!!TRANSLATE
        end;
      end;
end;
  if (HasAdvancedPricing) then begin
  EditField(h,v+=vs ,70, "Nuolaidų lentelė",Normal,RebCode,false,RebSClass);
    end;
  end;
  EndWindow;
end;

window CashierDefTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vm2,vs,chkbx;
  
  WindowBegin("POS Nustatymai",CashierDefTClass,CGSbl,-);
  SetWRect(64,80,700,600);
  SetBlid(CashierDefBlock);
  v = 6; vs = 20; h = 150; h2 = 290; vm=0;
  EditField(h,v,70,"Pagr. pirkėjas",Normal,DefCustCode,false,CUSClass); 
  if (HasModNL) then begin
  EditField(h,v+=vs,70,"Back office sąsk.",Normal,CredAcc,false,AccSClass); 
  EditField(h,v+=vs,70,"Nurašymo sąsk.",Normal,WriteOffAcc,false,AccSClass); 
    EditField(h,v+=vs,70,"Grynųjų išėmimo sąsk.",Normal,CashWithdrawalAcc,false,AccSClass); 
  end;
  if (HasModRest) then begin
  EditField(h,v+=vs,70,"Arbatp. mok. būdas",Normal,TipPMCode,false,PMSClass);   
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,70,"Spausdintuvas",Normal,Printer,false,SetSClass);   
    if (StandardHansa==false) then begin
    EditField(h,v+=vs,70,"Pensininkų nuol. prekė",Normal,DiscountItem,false,INSClass);   
    end;
  end;
  EditField(h,v+=vs,70,"Operacijos Objektai",Normal,TRObjects,false,ObjSClass);    // EVS: DOL-88
  if (HasModIN) then begin
    if (IsEnterprise) then begin
      chkbx = 2;
      if (HasLocalization("LVA")) then begin
        chkbx = 4;
      end;
      ButtonFrame(h-130,v+=3*vs+chkbx*16,490,2,"Automatinis sandėlio atnaujinimas POS modulyje");
      end else begin
        v = v + 40;
      if (HasLocalization("LVA")) then begin
        v = v+3*16;
      end;
      if (HasModRest) then begin
        ButtonFrame(h-130,v,490,2,"Automatinis sandėlio atnaujinimas POS modulyje");
      end else begin
        v = v;
      end;
    end;
      EditField(h,v,70,"Atnaujinimo intervalas",Normal,UpdStockMaintTime,false,PasteCurTime); 
//    ButtonFrame(h2,v,170,3,"Run Update #Stock# Maintenance");
//    RadioButton(h2,v,0,0,"Manually",UpdStockMaint);
//    RadioButton(h2,v+=16,1,0,"Periodically",UpdStockMaint);
//    RadioButton(h2,v+=16,2,0,"When OKing POS Invoice",UpdStockMaint);

    CheckBox(h2,v,0,"Vykdyti sandėlio atnaujinimą",UpdStockMaint); 
    CheckBox(h2,v+=18,0,"Kurti patvirtintus sandėlio nurašymus",POSOKSD);
  end;
  if (HasModIN) then begin
    ButtonFrame(h-130,v+=40,490,2,"Automatinis sandėlio atnaujinimas Restorano modulyje");
    EditField(h,v,70,"Atnaujinimo intervalas",Normal,RestUpdStockMaintTime,false,PasteCurTime);
    CheckBox(h2,v,0,"Vykdyti sandėlio atnaujinimą",RestUpdStockMaint);
    CheckBox(h2,v+=18,0,"Kurti patvirtintus sandėlio nurašymus",RestOKSD);
//    CheckBox(h2,v,0,"OK #Goods Receipts#",OKPU);
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h-130,v+=40,490,3,"Automatinis kasos sesijų uždarymas");
    EditField(h,v,70,"Atnaujinimo intervalas",Normal,CashupMaintInterval,false,PasteCurTime); 
    CheckBox(h2,v,0,"Vykdyti kasos sesijų uždarymą",CashupMaint); 
    CheckBox(h2,v+=18,0,"Atidaryta kasos sesija - privaloma",RequireOpenSession);
    CheckBox(h2,v+=18,0,"Spausdinti Z ataskaitą",PrintZReportatCashup); 
  end;
//  EditField(h,v+=vs,60,"POS nr.",Normal,POSNr,false,0); 
  ButtonFrame(h-130,vm2=(v+=37+vs),220,3,"Prekės paveiksliukas kasininko ekrane");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Numatytasis",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"Įjungtas",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Išjungtas",ItemPictureCashier);
  if (BuildProductCode=="PAYYAPERP") then begin
    CheckBox(h2,vm2,0,"Atidaryta kasos sesija - privaloma",RequireOpenSession); 
  end;
  ButtonFrame(h-130,v+=40,220,3,"Prekės paveiksliukas kliento ekrane");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Numatytasis",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"Įjungtas",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Išjungtas",ItemPictureCustomer);
  v = vm + 3;
  if (HasModRest) then begin
    CheckBox(h2,v,0,"Įtraukti arbatpinigius į kasos ataskaitą",InclTipInCashup);
    v = v + 16;
  end;
  if (IsEnterprise) then begin
  if (HasModSL) then begin
//      CheckBox(h2,v,0,"Include Open Invoice value in Cash Up",InclOpenInvCashup);
//      v = v + 16;
  end;
  end;
  if (HasLocalization("LVA")) then begin
    CheckBox(h2,v,0,"Neleisti nulinių kiekių",NoZeroQty);v = v + 16; 
    CheckBox(h2,v,0,"Tikrinti PVM reg. nr. įterpiant prekę su atvirkštiniu PVM",CheckVATNo);v = v + 16; 
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
    CheckBox(h2,v,0,"Registruoti pardavimus fiskaliniame įrenginyje",CashSalesToFiscalControlUnit); 
      v = v + 16;
    end;
    CheckBox(h2,v,0,"Leisti kelias sesijas tame pačiame įrenginyje",MultipleSessionsPerLocalMachine); 
    CheckBox(h2,v+=16,0,"Neleisti keisti patvirtintų POS faktūrų LiveSync klientams",NoChangesPOSOnLiveSyncClient); 
		CheckBox(h2,v+=16,0,"Reikalauti grąžinimo priežasties",RequireReturnReason); 
		CheckBox(h2,v+=16,0,"Reikalauti pirkėjo grąžinimui",RequireReturnCustomer); 
    CheckBox(h2,v+=16,0,"Neleisti pardavimų su 0 suma",NoZeroSum);v = v + 16; 
    if (HasLocalization("LVA")) then begin
      CheckBox(h2,v+=16,0,"Neleisti nulinių kiekių",NoZeroQty); 
  	end;
  end;
  CheckBox(h2,v,0,"Reikalauti atid. sesiją",RequireOpenSession); //EBS edit
  CheckBox(h2,v+=16,0,"Update POS customer display",UpdateCustDisplay); //EBS
  CheckBox(h2,v+=16,0,"Cashup maintennace when closing session",CushUpOnCloseSession);v = v + 16; //EBS
  if (HasModNL) then begin
    ButtonFrame(h2,v+=29,220,2,"Kasos ataskaita per operacijų meniu");
  CheckBox(h2,v,0,"Pradėti nuo ankstesnio POS balanso",StartFromLastPOSBal); 
  if (HasModNL) then begin
  CheckBox(h2,v+=16,0,"Spausdinti detalią DK operaciją",PrintDetNLTrans); 
  end;
    EndFrame;
  end;
  if (IsEnterprise) then begin
  ButtonFrame(h2,v=vm2,170,3,"Numatytasis laukas naujoje faktūroje"); 
  RadioButton(h2,v,0,0,"Numatytasis",DefInvoiceField); 
  RadioButton(h2,v+=16,1,0,"Prekė",DefInvoiceField);
    if (HasSerialNumbers) then begin
  RadioButton(h2,v+=16,2,0,"Serijinis nr.",DefInvoiceField);
    end;
    EndFrame;
  end;
  EndWindow;
end;

window IPProgRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Įplaukų prognozė",IPProgRClass,CGRcW,RcType);
  SetWRect(20,80,420,240);
  vs=20;
  PeriodField(h=140,v=6,"Periodas"); //EBS
  EditFieldTL(h=140,v+=vs ,100,"Pirkėjas",M4UStr,Normal,50,f2,false,CUSClass); //EBS edit pos
  EditFieldTL(h,v+=vs ,100,"Pirk. kategorija",M4Code,Normal,20,f10,false,CCatSClass); //EBS
  EditFieldTL(h,v+=vs ,100,"Klasė",M4UStr,Normal,60,f11,false,CClassSClass); //EBS
  if (IsEnterprise) then begin
  EditFieldTL(h,v+=vs ,75,"Įplaukos iki",M4Date,Normal,20,d1,false,PasteCurDate);
  end;
  if (HasSalesman or HasSalesmanBonus) then begin
  EditFieldTL(h,v+=vs ,60,"Pardavėjas",M4UStr,Normal,20,AccStr,false,UserSClass);
  end;
  if (HasObjects) then begin
  EditField(h,v+=vs,60,"Objektas",Normal,f4,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
  ButtonFrame(h=30,vm=(v+=40),123,3,"Funkcija"); //EBS edit 2 -> 3
  RadioButton(h,v,0,0,"Detaliai",flags[0]);
  RadioButton(h,v+=16,1,0,"Laikotarpiais",flags[0]);
  RadioButton(h,v+=16,2,0,"Pagal mėnesius",flags[0]); //EBS
  ButtonFrame(h=220,v=vm,123,2,"Apmokėjimas");
  RadioButton(h,v,0,0,"Laiku",ArtMode);
  RadioButton(h,v+=16,1,0,"Nust. nuol. datai",ArtMode);
  CheckBox(h=30,v+=46,0,"Įtraukti nepatvirtintas",flags[1]); //EBS edit pos
  CheckBox(h,v+=16,0,"Neįtr. abejotinų",flags[2]);
end;
  EndWindow;
end;

window ReturnInvNoNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs;
  WindowBegin("Grąž. fakt. nr.",ReturnInvNoNPTSSClass,CGother,RcType);
  UseView(RcVc);
  SetWRect(80,200,550,480);
  vs = 20;
  EditFieldTL(h=110,v=6,150,"Grąž. fakt. nr.",M4Long,Normal,0,long1,false,0);
  ColourPushButton(h-30,v+30,h+150,v+78,"ReturnInvNoNPTSSClassInvListBtn","Pardavimo paieška",2); //EBS

  v3 = 33; vs = 37; h3 = 210; h4 = 400; hm = 280;

  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;

  v = 10;
  ColourPushButton(-450,v+4*vs,-450+2*h2,v+4*vs+v3,"CancelNPTSCashPaymentTClass","Nutraukti",20);
  ColourPushButton(-320,v+4*vs,-320+2*h2,v+4*vs+v3,"ProceedReturnInvNoNPTSSClass","Tęsti",20);


  vm = -160; l = 57;
  v = 10;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolKeyPadPoint",".",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"NPTSPaymentToolKeyEnter","Įvesti",2);
  EndWindow;
end;

window OrderClassDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs;
  WindowBegin("Užsakymų klasė",OrderClassDClass,CGview,OrderClassView);
  SetWRect(74,80,550,300);
//  Sizeable(-1,-1,0,0);
  UseView(OrderClassVc);
  vs=20;
  if (HasTREO) then begin
    Tile(0,90,false,"1",Code);
  end else begin
    Tile(0,70,false,"1",Code);
  end;
  EditField(h=120,v=6, 100, "Kodas",Normal,Code,false,0);
  EditField(h,v+=20,-40,"Komentaras",Normal,Comment,false,0);
  EditField(h,v+=20,100,"Objektai",Normal,Object,false,ObjSClass);  //JP: DOL-87
  if (HasTREO) then begin
  CheckBox(h,v+=20,0,"TREO",TREOFlag);
  end;
  TileButton(1,"Veikla");
  TileButton(2,"Sąskaitos");
  Tile(1,90,false,"1",OrderActCode);
  ButtonFrame(h,vm=(v=16),205,3,"Veikla iš Užsakymo");
  RadioButton(h,v,0,0,"Nekurti veiklos",OrderAct);
  RadioButton(h,v+=16,1,0,"Naudoti pardavėją iš Užsakymo",OrderAct);
  RadioButton(h,v+=16,2,0,"Naudoti pardavėją:",OrderAct);
  if (GuiType==kGuiiPhone) then begin
  EditField(h2=h+120,v+1, 82,"",Normal,OrderActUser,false,UserSClass);
  end else begin
    EditField(h2=h+120,v+1, 82,"",Normal,OrderActUser,false,UserSClass);
  end;
  EditField(h2,v+=vs+5, 82,"Veiklos tipas",Normal,OrderActCode,false,ActTypeSClass);
  Tile(2,70,false,"2",DownpayInvDebtorsAcc);
  ButtonFrame(h,vm=(v=20),210,2,"Išankstinė faktūra");
  EditField(h2,v=v-2, 82,"Skolininkų sąsk.",Normal,DownpayInvDebtorsAcc,false,AccSClass);
  EditField(h2,v+=20-2, 82,"Įnašų sąsk.",Normal,DownpayInvDepositAcc,false,AccSClass);
  EndWindow;
end;

window RebDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,l,v,vs;
  WindowBegin("Nuolaidos lentelė",RebDClass,CGview,RebView);
  UseView(RebVc);
  SetWRect(20,80,647,333);
  Sizeable(-1,-1,-1,0);
  vs=20;
  Tile(0,40,false,"",Code);
  EditField(h=90,v=6,50,"Kodas",Normal ,Code,false,0);
  EditField(230,v,-40,"Komentaras",Normal,Comment,false,0);
  if (HasAdvancedPricing) then begin
    EditField(h,v+=vs,80,"Periodas",Normal,FromDate,false,PasteCurDate);
    EditField(230,v,80,"-",Normal,ToDate,false,PasteCurDate);
    EditField(440,v,-40,"Pakeisti",Normal,Replaces,false,RebSClass);
  end;
  TileButtons(v,2);
  Tile(1,110,false,"1",StaffCode);
  h = 110; h1 = 200; h2 = 300; vs = 20;
  EditField(h,v=6,50,"Kiekinė nuolaida",Normal,StaffCode,false,StaffSClass);
  EditField(h,v+=vs,50,"Stulpelis 0",Normal,vra0,false,0);
  EditField(h,v+=vs,50,"Stulpelis 1",Normal,vra1,false,0);
  EditField(h1,v,50,"2",Normal,vra2,false,0);
  EditField(h2,v,50,"3",Normal,vra3,false,0);
  EditField(h,v+=vs,50,"Stulpelis 4",Normal,vra4,false,0);
  EditField(h1,v,50,"5",Normal,vra5,false,0);
  EditField(h2,v,50,"6",Normal,vra6,false,0);
  EditField(h,v+=vs,50,"Stulpelis 7",Normal,vra7,false,0);
  EditField(h1,v,50,"8",Normal,vra8,false,0);
  EditField(h2,v,50,"9",Normal,vra9,false,0);
  Tile(2,120,true,"2",Math);
  StaticText(h=46,v=27,"Prekė",false);
  StaticText(h+=64,v=27,"Prekė",false);
  StaticText(h+=69,v,"Kiek. nuol.",false);
  StaticText(248,v,"Stulpeliai",false);
  h = 10; v=v+20; l = 30;
  MatrixBegin(h,v,h+240+11*l,-10,-,500); // EVS: DOL-98 200 -> 500
  MatCol(1,h=30,"Kodas",0,CodeType,false,SetSClass);
  MatCol(1,h=94,"Grupė",0,ITCode,false,ITSClass);
  MatCol(1,h+=70,"Nuolaida",0,StaffCode,false,StaffSClass);
  MatCol(1,h+=70,"0",0,vra0,false,0);
  MatCol(1,h+=l,"1",0,vra1,false,0);
  MatCol(1,h+=l,"2",0,vra2,false,0);
  MatCol(1,h+=l,"3",0,vra3,false,0);
  MatCol(1,h+=l,"4",0,vra4,false,0);
  MatCol(1,h+=l,"5",0,vra5,false,0);
  MatCol(1,h+=l,"6",0,vra6,false,0);
  MatCol(1,h+=l,"7",0,vra7,false,0);
  MatCol(1,h+=l,"8",0,vra8,false,0);
  MatCol(1,h+=l,"9",0,vra9,false,0);
  EndMatrix;
/*  noone uses this one
  Tile(3,70,false,"3",DiscAcc);
  EditField(h=150,v=6,50,"Nuolaidos sąskaita",Normal,DiscAcc,false,AccSClass);
  EditField(h,v+=20,50,"Nuolaidos procentas",Normal,DiscPerc,false,0);
  EditField(h,v+=20,50,"PVM kodas",Normal,VATCode,false,VATCodeSClass);
*/
  EndWindow;
end;

window SLVATLitRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  string 255 country;
  country = "";
  if (HasLocalization("KEN")) then begin
    country = "(Kenya 1)";
  end;
  WindowBegin("Išrašomų PVM s/f registras " & country,SLVATLitRClass,CGRcW,RcType);
  SetWRect(20,80,400,320);
  vs = 20; h = 100; v = 6; h2 = 160;
  PeriodField(h,v=6,"Periodas");
  EditFieldTL(h,v+=20, 150,"Serija",   M4UStr,Normal,21,f4,false,0);
  EditFieldTL(h,v+=20, 150,"Išsk. mok. sąl.",   M4UStr,Normal,21,f1,false,PDSClass);
  EditFieldTL(h,v+=20, 50,"PVM kodas",M4UStr,Normal,10,FirstAcc,false,VATCodeSClass);
  CheckBox(h,v+=20,0,"Įtraukti POS faktūras",flags[21]);//VITO: DOLL-69
  ButtonFrame(h,v+=40,130,3,"PVM sritis");
  CheckBox(h,v,0,"Vietinė",flags[5]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(1),flags[6]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(2),flags[7]);
  ButtonFrame(h,v+=41,123,4,"Rūšiavimas");
  RadioButton(h,v,0,0,"Faktūros nr.",flags[1]);
  RadioButton(h,v+=16,1,0,"Faktūros data",flags[1]);
  RadioButton(h,v+=16,2,0,"Ofic. ser. nr.",flags[1]);
  RadioButton(h,v+=16,3,0,"PVM kodas",flags[1]);
  CheckBox(h,v+=30,0,"Vietoje PVM mok. kd. naudoti Įmonės kd.",flags[8]);

/*
  ButtonFrame(h=50,vm=(v+=41),123,2,"Funkcija");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode);
  RadioButton(h,v+=16,1,0,"Išsamiai",ArtMode);
  */
  EndWindow;
end;

window CashDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,v3,vm,vs;
  WindowBegin("Kasos įvykis",CashDClass,CGview,-);
  SetWRect(64,80,590,500);
  Sizeable(-1,-1,0,0);
  FormName(CashForm);
  UseView(CashVc);
  ActiveFieldOnNew("Drawer");
  vs = 20; h = 100; h2 = 260; h3 = 350;
  EditField(h,v=6,70,"Numeris",Normal,SerNr,false,TSerSClass);
  EditField(h2,vm=v,70,"Parašas",ViewOnly,Sign,false,0);
  if (HasModNL) then begin
  EditField(400,v,70,"Kred. sąsk.",Normal,CredAcc,false,0);
  end;
  EditField(h,v=v+vs,70,"Kasos stalčius",Normal,Drawer,false,DrawerSClass);
  EditField(h2,vm=v,70,"Kasos ap.",Normal,MachineName,false,LocalMachineSClass);
  EditField(h,v=v+vs,70,"Data",Normal,TransDate,false,PasteCurDate);
  EditField(h2,v,70,"Laikas",Normal,TransTime,false,PasteCurTime);
  EditField(h,v3=(v=v+vs),-40,"Komentaras",Normal,Comment,false,0);
  ButtonFrame(h,v+=40,300,1,"Įvykiai");
  RadioButton(h,v,0,0,"Kasos išlaidos",Event);
  RadioButton(h+100,v,1,0,"Kasos pajamos",Event);
  RadioButton(h+200,v,2,0,"Kasos nuraš.",Event);
  MatrixBegin(h,v+=45,-50,-30,-,99);
  MatCol(1,24,"Būdas",0,PMCode,false,PMSClass);
  MatCol(1,70,"Domin.",0,Denomination,false,SetSClass);
  MatCol(1,150,"Dom. Vertė",0,DenominationValue,true,0);
  MatCol(1,200,"Kiekis",0,DenominationQty,true,0);
  MatCol(1,250,"Suma",0,Amount,true,0);
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  EditField(h+80,-30,100,"Viso",Normal,Total,true,0);
  CheckBox(20,-40,0,"No N/L trans.",DoNotMakeTR); //EBS
  CheckBox(20,-20,0,"OK",OKFlag);
  if (StandardHansa==false) and (HasLocalization("LTU,LVA,POL,ZWE")) then begin
  SpecialMenu("Siųsti į fiskalinį spausdintuvą",' ',8,"PrintToFiscPrntCashDsm");
  end;
  EndWindow;
end;

window LoyaltyCardRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Lojalumo kortelės ataskaita",LoyaltyCardRClass,CGRcW,RcType);
  SetWRect(20,80,500,400);
  v = 6; vs = 20; h = 190;
  PeriodField(h,v,"Periodas");
  EditFieldTL(h,v+=vs,100,"Lojalumo kortelė",M4UStr,Normal,50,f1,false,LoyaltyCardSClass);
  EditFieldTL(h,v+=vs,100,"Pirkėjas",M4UStr,Normal,50,f2,false,CUSClass);
  EditFieldTL(h,v+=vs,100,"Pirkėjo kategorija",M4UStr,Normal,11,f4,false,CCatSClass);
  EditFieldTL(h,v+=vs, 150,"Klasė",   M4UStr,Normal,50,f3,false,CClassSClass);
  EditFieldTL(h,v+=vs,100,"Patalpa",M4UStr,Normal,10,LastAcc,false,LocationSClass);
  EditFieldTL(h,v+=vs,100,"Narystės lygis",M4Code,Normal,10,f5,false,LCMemberLevelSClass); //JP: DOL-90
  EditFieldTL(h,v+=vs,100,"Minimalus taškų likutis",M4Val,Normal,10,vals0,false,0); //JP: DOL-90
  EditFieldTL(h,v+=vs,100,"Minimalus pelnytų taškų skaičius",M4Val,Normal,10,vals1,false,0); //JP: DOL-90
  ButtonFrame(h,vm=(v+=41),150,2,"Funkcijos");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode);
  RadioButton(h,v+=16,1,0,"Detaliai",ArtMode);
  // CheckBox(h,v+=30,0,"Rodyti korteles tik su operacijomis",flags[1]);
  // EVS: DOL-155
  ButtonFrame(h,vm=(v+=41),150,2,"Įtraukti");
  RadioButton(h,v,1,0,"Pirko",flags[1]);
  RadioButton(h,v+=16,2,0,"Nepirko",flags[1]);
  RadioButton(h,v+=16,0,0,"Visi",flags[1]);
  EndFrame;

  CheckBox(h,v+=vs+10,0,"Neįtraukiant uždarytų kortelių",flags[2]); // EVS: DOL-155
  CheckBox(h,v+=vs,0,"Neįtraukiant klientų, kurie nenori gauti laiškų",flags[3]); // EVS: DOL-155
  // :EVS
  EndWindow;
end;

window PUDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  Integer tilenr;
  Integer f,flipnr,rn;

  BlockLoad(CYb);
  WindowBegin("Gavimas",PUDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,870,620);
  end else begin
    SetWRect(20,80,750,360);
  end;
  if (HasMultiCurrency or IsEnterprise or HasObjects) then begin
  Sizeable(-1,-1,0,0);
  end;
  UseView(PUVc);
  ActiveFieldOnNew("VECode");
  FormName(PurchaseForm);
  Tile(0,74,false,"",TransDate);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Tiekėjas",Normal,VECode,false,VESClass);
  EnterSkip(TransDate);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,VEName,false,0);
  CheckBox(-250,v+20,0,"No N\L trans.",DoNotGenTrans);
  CheckBox(h4=-100,v+=20,0,"OK",OKFlag);
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    CheckBox(h4,v+=16,0,"Kaina su #PVM#",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Kaina su mok.",InclVAT);
  end;
  tilenr = 1;
  TileButton(tilenr,"Sąlygos"); tilenr = tilenr + 1;
  TileButton(tilenr,"Prekės"); tilenr = tilenr + 1;
  if (HasMultiCurrency) then begin
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
    TileButton(tilenr,"Papild. kaštai"); tilenr = tilenr + 1;
    TileButton(tilenr,"Frachtas"); tilenr = tilenr + 1;
    end;
    TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1;
  end;
  tilenr = 1;

  vs = 20; h1 = 110; h2 = 300; h3 = 550; h4 = -100;
  Tile(tilenr,70,false,tilenr,TransDate); tilenr = tilenr + 1;
  EditField(h1,vm=(v=6),82,"Operac. data",Normal,TransDate,false,PasteCurDate);
  if (IsEnterprise==false) then begin
    EditField(h2,v,-20,"Komentaras",Normal,Comment,false,0);
  end;
  if (HasMultiLocations) then begin
    v = v + vs;
    EditField(h1,v,82,"Patalpa",Normal,Location,false,LocationSClass);
  end;
  if (HasRoute) then begin
    v = v + vs;
    EditField(h1,v,82,"Maršrutas",ViewOnly,Sorting,false,0);
  end;
  v = v + vs;
  SoftEditField(h1,v,82,"Skanuoti barkodą",Normal,"scanbarcode",false,0,M4Str,60);
  if (HasObjects) then begin
    if (IsEnterprise) then begin
  EditField(h2,v=vm,135,"Objektai",Normal,Objects,false,ObjSClass);
    end else begin
      if (HasMultiLocations) then begin
        EditField(h2,v,135,"Objektai",Normal,Objects,false,ObjSClass);
      end else begin
        v = v + vs;
        EditField(h2,v,135,"Objektai",Normal,Objects,false,ObjSClass);
      end;
    end;
  end;
  if (HasModPO) then begin
    if (HasObjects) then begin
      v = v + vs;
    end;
    EditField(h2,v,135,"Pirk. Užsk. nr.",ViewOnly,PONr,false,0);
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      v = v + vs;
      EditField(h2,v,135,"Pirk. kontr.",ViewOnly,POCOSerNr,true,POCOSClass);
    end;
  EditField(h3,v=vm,80,"Pirk. Užsk. klasė",ViewOnly,PUClass,false,0);
  end;
  if (HasLanguages) then begin
    v = v + vs;
    EditField(h3,v,80,"Kalba",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    v = v + vs;
    EditField(h3,v,80,"Pirkėjo numeris",Normal,CustomsNr,false,0);
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    v = v + vs;
    EditField(h3,v,80,"Dispatch Number",Normal,DispatchNumber,false,0);
  end;
//  CheckBox(h4,v=vm,0,"Price Incl. #VAT#",InclVAT);
  EnterSkip(Math);
  Tile(tilenr,220,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  if (HasSerialNumbers) then begin
    MatrixBegin(4,v,-50,-50,-,200);
  end else begin
    MatrixBegin(4,v,-25,-50,-,200);
  end;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(1,28,"Prekė",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
  MatCol(1,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(Spec);
  MatText(t=3,28,"Parašas",true);
  MatCol(t,100,"",0,Sign,false,0);
  MatText(t,160,"Pataisymo data",true);
  MatCol(t,290,"Atn. data",0,UpdDate,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasJewelleryInterface) then begin
    MatColTL(1,144,"Vnt.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
    MatCol(1,184,"Aprašymas",0,Spec,false,0);
    MatCol(1,-485,"Patalpa",0,Location,false,LocationSClass);
    MatCol(1,-430,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-320,"Sand. tipas",0,StockType,false,SetSClass);
  end else begin
  MatColTL(1,164,"Vnt.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  MatCol(1,204,"Aprašymas",0,Spec,false,0);
  end;
  MatCol(1,-240,"Vnt. kaina",0,UPrice,true,0);
  MatCol(1,-160,"Savikaina",0,CostPrice,true,0);
  MatCol(1,-80,"Suma",0,Sum,true,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatCol(1,-350,"Patalpa",0,Location,false,LocationSClass);
  MatCol(1,-280,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(1,-150,"Galioja iki",0,BestBefore,false,0);
  MatCol(1,-60,"Siunt.būklė",0,BatchStatus,false,BatchStatusSClass);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatColTL(1,-404,"Kaštai",0,-1,ViewOnly,-1,InPrice,false,0);
    if (StandardHansa==false) then begin
  MatColTL(1,-324,"Kainos pokytis",0,-1,ViewOnly,-1,VarianceAmount,false,0);
  MatCol(1,-244,"Vnt. kaina",0,UPrice,true,0);
  MatCol(1,-174,"Pap. kaštai",0,Extra,true,0);
  MatCol(1,-104,"Savikaina",0,CostPrice,true,0);
    end else begin
      MatCol(1,-324,"Frachtas",0,ShipCost,true,0);
      MatCol(1,-244,"Pap. kaštai",0,Extra,true,0);
      MatCol(1,-164,"Muitai",0,CustomsCost,true,0);
    end;
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(1,-34,"Mok-kd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(1,-34,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
    MatCol(1,-350,"Tiek. prekės nr.",0,VEItemCode,false,PISClass);
  MatColTL(1,-270,"Tiek. vnt.",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);
  MatCol(1,-200,"Tiek. kiekis",0,VEQuant,true,0);
    if (StandardHansa==false) then begin
  MatCol(1,-140,"Koeficientas",0,Coefficient,true,0);
    end;
  MatCol(1,-90,"Bazinė kaina",0,BasePrice,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
    if (StandardHansa==false) then begin
  MatCol(1,-400,"Sand. tipas",0,StockType,false,SetSClass);
    end;
    if (HasTREO) then begin
  MatCol(1,-310,"TREO",0,TREO,false,SetSClass);
    end;
  MatCol(1,-220,"Sand. sąsk.",0,CostAcc,false,AccSClass);
  MatCol(1,-155,"Pirk. sąsk.",0,CredAcc,false,AccSClass);
  MatCol(1,-90,"Objektai",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Muitinės nr.",0,CustomsNr,false,0);
      MatCol(1,-340,"Muitinės data ",0,CustomsDate,false,PasteCurDate);
  MatCol(1,-240,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass);
  MatCol(1,-140,"Iš vietos",0,PosCode,false,PosSClass);
  MatCol(1,-70,"Į vietą",0,ToPosCode,false,FreePosSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatCol(1,-250,"Nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(1,-135,"Plotis",0,UnitXval,true,0);
  MatCol(1,-90,"Aukštis",0,UnitYval,true,0);
  MatCol(1,-45,"Gylis",0,UnitZval,true,0);
    if (StandardHansa==false) then begin
  Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Papild. kaštai",0,Extra,true,0);
  MatCol(1,-420,"Frachtas",0,ShipCost,true,0);
  MatCol(1,-360,"Muitai",0,CustomsCost,true,0);
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Kaštai 1";end;
  MatCol(1,-300,label,0,RowCost1,false,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Kaštai 2";end;
  MatCol(1,-240,label,0,RowCost2,false,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Kaštai 3";end;
  MatCol(1,-180,label,0,RowCost3,false,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Kaštai 4";end;
  MatCol(1,-120,label,0,RowCost4,false,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Kaštai 5";end;
  MatCol(1,-60,label,0,RowCost5,false,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Pirk.už.nr.",0,PONr,false,POSClass);
  MatCol(1,194,"Pirk.už.eil.",0,OrdRow,false,0);
  MatCol(1,-370,"Pirk.už.persk.",0,PORecon,false,0);
  MatCol(1,-310,"Komentaras",0,POReconComment,false,0);
  MatCol(1,-200,"Fakt. persk.",0,VIRecon,false,0);
  MatCol(1,-130,"Komentaras",0,VIReconComment,false,0);
  end else begin
    if (HasSerialNumbers) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Aprašymas",0,Spec,false,0);
      MatCol(1,-150,"Serijinis Nr.",0,SerialNr,false,SerialNrSClass);
    end;
/*
    MatCol(1,-280,"Vnt. kaina",0,UPrice,true,0);
    MatCol(1,-210,"Frachtas",0,ShipCost,true,0);
    MatCol(1,-140,"Papild. kaštai",0,Extra,true,0);
    MatCol(1,-70,"Savikaina",0,CostPrice,true,0);
*/
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
    MatCol(t,-250,"Dispatch Number",0,DispatchNumber,false,0);
  end;
  if (HasJewelleryInterface) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
    MatCol(t,-350,"Tiek. ser. nr.",0,SuppSerialNr,true,0);
    MatCol(t,-200,"Metal",0,Metal,true,0);
    MatCol(t,-150,"Weight",0,RowWeight,true,0);
    MatCol(t,-100,"Size",0,Size,true,0);
    MatCol(t,-50,"Length",0,Length,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-350,"Major Stone",0,MajStoneDet,true,0);
    MatCol(t,-250,"Colour",0,Colour,true,0);
    MatCol(t,-200,"Clarity",0,Clarity,true,0);
    MatCol(t,-150,"Cert",0,Cert,true,0);
    MatCol(t,-100,"Minor Stone",0,MinStoneDet,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
    MatCol(t,-400,"Watch Brand",0,WatchBrand,true,0);
    MatCol(t,-300,"Style Name",0,StyleName,true,0);
    MatCol(t,-200,"Watch Metal",0,WatchMetal,true,0);
    MatCol(t,-100,"Movement",0,Movement,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
    MatCol(t,-400,"Brc/Str",0,BrcStr,true,0);
    MatCol(t,-300,"Gender",0,Gender,true,0);
    MatCol(t,-200,"Other",0,Other,true,0);
    MatCol(t,-100,"Other 2",0,Other2,true,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  if (StandardHansa==false) then begin
    if (HasSerialNumbers) then begin
      RowMenuItem(0,"Atidaryti siuntos specifikaciją",' ',' ',0,"OpenBatchPUDsm");
    end;
    RowMenuItem(0,"Padalinti eilutė",' ',' ',0,"SplitRowPUDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  EditField(110,-41,70,"Viso kiekis",ViewOnly,SumQuant,true,0);
//  EditField(110,-21,70,"Price Subtotal",Normal,SubTotal,true,0); //Shows the same as SumCostPrice?
  EditField(260,-41,70,"Frachtas",Normal,ShipCost,true,0);
  if (IsEnterprise) then begin
  EditField(260,-21,70,"Muitai",Normal,CustomsCost,true,0);
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    EditField(410,-41,70,"#PVM#",Normal,VATVal,true,0);
    if (HasExtTax) then begin
      EditField(410,-21,70,"Pap. kaštai",ViewOnly,TAX1Sum,true,0);
    end;
  end else begin
    EditField(410,-41,70,"Mok.",Normal,VATVal,true,0);
  end;
  EditField(-169,-41,118,"Tarp. suma",ViewOnly,SumCostPrice,true,0);
  EditField(-169,-21,118,"VISO",ViewOnly,PayVal,true,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
  vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
  EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
    if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
    end else begin
        EditField(h1,v+vs,50,"Baz. val.",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Baz. val. 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,120,false,tilenr,Cost1); tilenr = tilenr + 1;
  vs = 20;
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Papild. kaštai 1";end;
  EditField(h=110,v=6,70,label,Normal,Cost1,false,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Papild. kaštai 2";end;
  EditField(h2=295,v,70,label,Normal,Cost2,false,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Papild. kaštai 3";end;
  EditField(h,v+=vs,70,label,Normal,Cost3,false,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Papild. kaštai 4";end;
  EditField(h2,v,70,label,Normal,Cost4,false,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Papild. kaštai 5";end;
  EditField(h,v+=vs,70,label,Normal,Cost5,false,0);
    if (HasApprovals) then begin
      SoftEditField(h2,v,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255); //!!TRANSLATE
    end;
  ButtonFrame(h3=400,v=16,130,2,"Papild. kaštų skaičiavimas");
  RadioButton(h3,v,0,0,"Vertė",ExtraCostsCalculation);
  RadioButton(h3,v+=16,1,0,"Svoris",ExtraCostsCalculation);
/*
//oldapprovals
    ButtonFrame(h3=-163,v=16,123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujamas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėtas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalautas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Aktyvus",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtintas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmestas",AcceptanceStatus);
*/
    Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
  EditField(h1,v=6,80,"Frachto įmonė",Normal,FreightCode,false,FreightCompanySClass);
  EditField(h1,v+=vs,-20,"Pavadinimas",Normal,FreightCompany,false,0);
  EditField(h1,v+=vs,-20,"Reg.Nr.",Normal,FreightCompanyRegNr,false,0);
  EditField(h1,v+=vs,-20,"Maš. inform.",Normal,TruckInfo,false,0);
  EditField(h1,v+=vs,-20,"Vairuotojas",Normal,Driver,false,0);
  EditField(h1,v+=vs,-20,"CMR",Normal,CMRText,false,0); // International transporting number
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Komentaras",Normal,Comment,false,0);
  end;
  if (StandardHansa==true) then begin
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Komentaras",Normal,Comment,false,0);
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Gavimo būklė",'r',4,"PUStatusDsm");
    SpecialMenu("Generuoti serijinius nr.",' ',2,"GenSerialNosPUDsm");
    if (HasModNL) then begin
      SpecialMenu("Atidaryti D/K operaciją",'t',4,"OpenTRFromPU");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModPL) then begin
      SpecialMenu("Sukurti Pirkimo faktūrą",'F',3,"VIFromPUDsm");
    end;
    if (IsEnterprise or (HasLocalization("PRT") and HasModIN) or (HasRetGoodsToSupp and HasModIN)) then begin
      SpecialMenu("Sukurti Prekių grąžinimą",'B',7,"RetPUFromPUDsm");
    end;
  end else begin
  if (IsEnterprise) then begin
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Gavimo būklė",'r',4,"PUStatusDsm");
  end;
  if (HasSerialNumbers) then begin
  	SpecialMenu("Sukurti serijinius nr.",' ',2,"GenSerialNosPUDsm");
  end;
  if (HasModNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',4,"OpenTRFromPU");
  end;
  if (HasTaxMatrix) then begin
  SpecialMenu("Atidaryti mok. matricą",' ',25,"OpenVatMatrixPUDsm");
  end;
  SpecialMenu("Spausdinti etiketes",' ',0,"PrintPULabPUDsm"); // EVS: DOL-100
  SpecialMenu("Atnaujinti prekes",' ',1,"UpdatePricesPUDsm");

  if (HasModWHM) then begin
    SpecialMenu("Patvirtinti sandėlio vald. perkėlimus",' ',9,"OKStockMovPUrDsm");
  end;
  if (HasLocalization("HRV")) then begin
    SpecialMenu("Sales Price Calculation",' ',8,"SPCHRVPUDsm");
  end;
  if (HasApprovals) then begin
    SpecialMenu("Užklausos patvirtinimas",' ',6,"PUSendforAcceptancePUDsm"); //!!TRANSLATE
    SpecialMenu("Atšaukti užklausos patvirtinimą",' ',2,"CancelApprovalRequestDsm"); //!!TRANSLATE
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModPL) then begin
  SpecialMenu("Sukurti pirkimo faktūrą",'F',3,"VIFromPUDsm");
  end;
  if (HasQualityControl) then begin
  SpecialMenu("Kokybės kontrolė",'u',10,"QualConFromPUDsm");
//SpecialMenu("Update Mark",' ',6,"UpdateMarkPUDsm");
  end;
  if (HasAdvancedStock or (HasLocalization("PRT") and HasModIN) or (HasRetGoodsToSupp and HasModIN)) then begin
  SpecialMenu("Sukurti prekių grąžinimą",'B',7,"RetPUFromPUDsm");
  end;
  if (HasModRent) then begin
//SpecialMenu("Sukurti sandėlio perkėlimą",' ',5,"StockMovFromPUSpec");
//SpecialMenu("Scan",' ',8,"ScanBarCodePUDsm");
  SpecialMenu("Sukurti sandėlio perdavimą",' ',8,"INTransFromPUsm");
  end;
    SpecialMenu("Add Supplier",' ',0,"AddSupplierPUDsm"); //!!TRANSLATE
    SpecialMenu("Add Item",' ',0,"AddItemPUDsm");     //!!TRANSLATE
  end;
  SpecialMenu("Spausdinti etiketes (1 dokumentas)",'e',0,"PrintPULabPUOneDocumentDsm"); // EVS: DOL-100
  EndWindow;
end;

window PULabRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,l,v,vm;
  WindowBegin("Gavimų etiketės",PULabRClass,CGRcW,RcType);
  SetWRect(20,80,400,320);
  EditFieldTL(h=150,v=6,153,"Gavimas",   M4Str,Normal,30,f1,false,0);
  if (HasModProd) then begin
  EditFieldTL(h,v+=20,153,"Produkcija",   M4Str,Normal,30,f7,false,0);
  end;
  EditFieldTL(h,v+=20,100,"Prekė",M4UStr,Normal,41,f3,false,INSClass);
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=20,100,"Prekės grupė",M4UStr,Normal,5,f5,false,ITSClass);
  end;
  if (HasItemClassification) then begin
  EditFieldTL(h,v+=20,100,"Prekės klasė",M4UStr,Normal,100,f4,false,DISClass);
  end;
  if (HasMultiLocations) then begin
  EditFieldTL(h,v+=20,100,"Ptalpa",M4UStr,Normal,10,f6,false,LocationSClass);
  end;
  if (IsEnterprise) then begin
  EditFieldTL(h,v+=20,100,"Tiekėjas",M4UStr,Normal,10,LastAcc,false,VESClass);
  EditFieldTL(h,v+=20,100,"Serijinis numeris",M4UStr,Normal,20,FirstAcc,false,SerialNrSClass);
  EditFieldTL(h,v+=20,50,"Vertikali paraštė",M4Int,Normal,0,flags[29],false,0);
  EditFieldTL(h,v+=20,100,"Etiketės nr.",M4Str,Normal,30,f2,false,0);
  ButtonFrame(h=100,vm=(v+=40) /*v=vm*/,l=60,5,"Funkcijos");
  RadioButton(h,v    ,0,0,"1*1",ArtMode);
  RadioButton(h,v+=16,2,0,"2*8",ArtMode);
  RadioButton(h,v+=16,1,0,"3*8",ArtMode);
  RadioButton(h,v+=16,4,0,"2*_4",ArtMode);
  RadioButton(h,v+=16,5,0,"2*_7",ArtMode);
  CheckBox(h=200,v=vm,0,"Tik su likučiu",flags[0]);
  end;
  if (HasModProd) then begin
  CheckBox(h,v+=16,0,"Įtraukti produkciją",flags[1]);
  end;
  // EVS: DOL-100
  ButtonFrame(h,v+=40 /*v=vm*/,123,2,"Funkcijos");
  RadioButton(h,v+=1,0,0,"Vienas dokumentas",flags[2]);
  RadioButton(h,v+=16,1,0,"Daug dokumentų",flags[2]);
  EndFrame;
  // :EVS
  EndWindow;
end;

window OPProgRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Mokėjimų prognozė",OPProgRClass,CGRcW,RcType);
  SetWRect(20,80,480,280);
  v = 6; vs = 20; h = 170;
  PeriodField(h,v,"Periodas");//VITO: DOL-102
  EditFieldTL(h,v+=vs,75,"Tiekėjas",M4UStr,Normal,20,f2,false,VESClass); //EBS edit
  if (HasCategories) then begin
    EditFieldTL(h,v+=vs,50,"Tiekėjo kategorija",M4UStr,Normal,5,f7,false,VGSClass);
  end;
  if (HasContactClassification) then begin
  EditFieldTL(h,v+=20 ,250,"Klasė",M4UStr,Normal,60,f4,false,CClassSClass);
  EditFieldTL(h,v+=20 ,75,"Klasių tipas",M4UStr,Normal,30,f5,false,CTypeSClass);
  end;
  // EditFieldTL(h,v+=vs ,75,"Tiek. kategorija",M4Code,Normal,20,f10,false,VGSClass);//VITO: DOL-102, not needed anymore
  if (IsBooks==false) then begin
  	EditFieldTL(h,v+=vs ,75,"Mokėjimai iki",M4Date,Normal,20,d1,false,PasteCurDate);
  end;
  if (HasObjects) then begin
  EditFieldTL(h,v+=vs,250,"Objektas",M4UStr,Normal,60,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=vs,50,"Objekto tipas",M4UStr,Normal,5,ObjType,false,OTSClass);
  end;
  if (IsEnterprise) then begin
  ButtonFrame(h = 50,vm=(v+=40),140,3,"Funkcija");
  RadioButton(h,v,0,0,"Detaliai",flags[0]);
  RadioButton(h,v+=16,1,0,"Laikotarpiais",flags[0]);
  RadioButton(h,v+=16,2,0,"Pagal mėnesius",flags[0]);//VITO: DOL-102
  ButtonFrame(h = 220,v=vm,123,2,"Mokėjimo data");
  RadioButton(h,v,0,0,"Viso",ArtMode);
  RadioButton(h,v+=16,1,0,"Nuolaida",ArtMode);
  ButtonFrame(h = 50,vm=(v+=61),140,2,"Būklė"); //EBS edit
  RadioButton(h,v,0,0,"Visos faktūros",flags[1]);
  RadioButton(h,v+=16,1,0,"Tik nesulaikytos",flags[1]);
  ButtonFrame(h=220,v=vm,123,2,"Įtraukti");
  CheckBox(h,v,0,"Prel. Užsakytas",flags[2]);
  CheckBox(h,v+=16,0,"Nepatvirtintas",flags[3]);
end;
  EndWindow;
end;

window STCompRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Inventorizacijos palyginimas",STCompRClass,CGRcW,RcType);
  SetWRect(20,80,470,400);
  v = 6; vs = 20; h = 140;
  EditFieldTL(h,v, 150,"Prekė", M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=vs, 150,"Grupė", M4UStr,Normal,5,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
  EditFieldTL(h,v+=vs, 150,"Prekės klasė", M4UStr,Normal,60,f4,false,DISClass);
  EditFieldTL(h,v+=vs, 80,"Klasių tipas",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs, 150,"Patalpa",   M4Code,Normal,10,AccStr,false,LocationSClass);
  end;
  if (HasPositions) then begin
  EditFieldTL(h,v+=vs, 150,"Pozicija",   M4Code,Normal,10,LastAcc,false,PosSClass);
  end;
  EditFieldTL(h,v+=vs, 80,"Data",   M4Date,Normal,0,RegDate,false,PasteCurDate);
  if (IsEnterprise) then begin
  EditFieldTL(h,v+=vs, 80,"Vertės pokytis >",M4Val,Normal,0,vals0,true,0);
  end;
  ButtonFrame(h=30,vm=(v+=50),390,3,"Jeigu prekė neregistruota Inventorizacijos įraše nurodytai datai");
  RadioButton(h,v,0,0,"Suskaičiuotas kiekis sandėlyje = 0",flags[3]);
//  RadioButton(h,v+=16,1,0,"If Item not on last Stocktaking assume 0 in Stock",flags[3]);
  RadioButton(h,v+=16,2,0,"Koreguotas kiekis sandėlyje = 0",flags[3]);
  RadioButton(h,v+=16,3,0,"Nerodyti prekės ataskaitoje",flags[3]);
  if (IsEnterprise) then begin
  ButtonFrame(h,vm=(v+=40),150,3,"Rūšiavimas");
  RadioButton(h,v,0,0,"Prekė",flags[2]);
  RadioButton(h,v+=16,1,0,"Prekės grupė",flags[2]);
  RadioButton(h,v+=16,2,0,"Lent. kodas",flags[2]);

  ButtonFrame(h=230,v=vm,155,3,"Funkcija");
  RadioButton(h,v,0,0,"Rodyti kiekius",flags[1]);
  RadioButton(h,v+=16,1,0,"Rodyti kainas",flags[1]);
  RadioButton(h,v+=16,2,0,"Lent. kodas",flags[1]);
  end;
//EBS-->
  ButtonFrame(h=30,vm=(v+=40),150,3,"Parodyti");
  RadioButton(h,v,0,0,"Visi",flags[20]);
  RadioButton(h,v+=16,1,0,"Tiktai aktualūs skirtumai",flags[20]);
  RadioButton(h,v+=16,2,0,"Tiktai įvairovių pasikeitimas",flags[20]);
//EBS<--
  if (HasSecondQuantity) then begin
  CheckBox(h=30,vm=(v+=28),0,"Rodyti kiekį 2",flags[0]);
  end;
  if (IsEnterprise) then begin
    CheckBox(h,v+=16,0,"Serijiniam numeriui (naudojant dabartinė ser. nr. būklė)",flags[5]);
    CheckBox(h,v+=16,0,"Jeigu ne pradiniam sarasa, kiekis yra 0",flags[21]); //EBS
    CheckBox(h=160,v=vm,0,"Neįtraukti prekių jei koreguotas kiekis lygus 0",flags[4]);
end;
  EndWindow;
end;

window STCompVClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Inventorizacijos palyginimas",STCompVClass,CGMnt,RcType);
  SetWRect(20,80,470,360);
  v = 6; vs = 20; h = 140;
  EditFieldTL(h,v, 150,"Prekė",   M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=vs, 150,"Grupė",   M4UStr,Normal,5,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
  EditFieldTL(h,v+=vs, 150,"Prekės klasė", M4UStr,Normal,60,f4,false,DISClass);
  EditFieldTL(h,v+=vs, 70,"Klasių tipas",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasMultiLocations) then begin
  EditFieldTL(h,v+=vs, 150,"Patalpa",   M4UStr,Normal,10,AccStr,false,LocationSClass);
  end;
  if (HasPositions) then begin
  EditFieldTL(h,v+=vs, 150,"Pozicija",   M4Code,Normal,10,LastAcc,false,PosSClass);
  end;
  EditFieldTL(h,v+=vs, 150,"Data",   M4Date,Normal,0,RegDate,false,PasteCurDate);
  EditFieldTL(h,v+=vs, -40,"Komentaras",M4Str,Normal,200,f6,false,0);
  //CheckBox(h,v+=vs,0,"Parodyti kiekį 2",flags[0]);
  ButtonFrame(h=30,vm=(v+=40),370,3,"Jeigu prekė inventorizacijoje nenurodyta pasirinktai datai");
  RadioButton(h,v,0,0,"Suskaičiuotas kiekis sandėlyje = 0",flags[3]);
//  RadioButton(h,v+=16,1,0,"If Item not on last Stocktaking assume 0 in Stock",flags[3]);
  RadioButton(h,v+=16,2,0,"Koreguotas kiekis sandėlyje = 0",flags[3]);
  RadioButton(h,v+=16,3,0,"Skip Item",flags[3]); //!!TRANSLATE
  if (HasSerialNumbers) then begin
  CheckBox(h,v+=28,0,"Serijiniam numeriui (naudojant šiandienos serijinė būklė)",flags[4]);
  end;
  if (HasAdvancedStock) then begin
  CheckBox(h,v+=16,0,"Patvirtinti prekių gavimai ir nurašymai",flags[5]);
  end;
  CheckBox(h,v+=16,0,"Atskiri įrašai įvairovių pasikeitimams",flags[20]); //EBS
  CheckBox(h,v+=16,0,"OK size exchange records",flags[21]); //EBS
  EndWindow;
end;

window PODClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  record CYBlock CYb;
  string 255 label;
  Integer tilenr,flipnr,f,rn;

  vs = 20;
  BlockLoad(CYb);
  WindowBegin("Pirkimų užsakymas",PODClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(POVc);
  CommunicateButton;
  ActiveFieldOnNew("VECode");
  Tile(0,74,false,"",VECode);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Tiekėjas",Normal,VECode,false,VESClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Pavad.",Normal,Addr0,false,0);
  if (IsEnterprise) then begin
  EditField(h,vm=(v+=20),95,"Parašas",Normal,OKPersons,false,UserSClass);
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,v+=vs,0,"OK",OKFlag);
  end;
  tilenr = 1;
  TileButton(tilenr,"Sąlygos"); tilenr = tilenr + 1;
  TileButton(tilenr,"Prekės"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
  end;
  if (HasModIN) then begin
    TileButton(tilenr,"Siunt. sąlygos"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1;
  TileButton(tilenr,"užs. adresas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Siunt. adresas"); tilenr = tilenr + 1;
  if (IsEnterprise and StandardHansa==false) then begin
    TileButton(tilenr,"Pap. kaštai"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Data",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Mok. terminas",Normal,PayDeal,false,PDSClass);
  if (IsEnterprise) then begin
  EditField(h1,v+=vs,82,"Galioja iki",Normal,ValidUntil,false,PasteCurDate);
  end;
  if (HasModIN) then begin
  EditField(h1,v+=vs,82,"Plan. siunt.",Normal,PlanShip,false,PasteCurDate);
  end;
  EditField(h2,v=vm,135,"Mūsų nuor.",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Perspėjimas",Normal,VEContact,false,ContactSClass);
  if (HasObjects) then begin
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  end;
  if (HasModIN) then begin
  EditField(h2,v+=vs,135,"Nuoroda",Normal,Reference,false,0);
  end;
  if (HasSalesman or HasSalesmanBonus) then begin
  EditField(h3,v=vm,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  end;
  if (HasModTS) then begin
  EditField(h3,v+=vs,80,"Projektas",Normal,PRCode,false,PRSClass);
  end;
  if (IsEnterprise) then begin
  EditField(h3,v+=vs,80,"Pirk. Užsak. klasė",Normal,POClass,false,POrderClassSClass);
  EditField(h3,v+=vs,80,"Užsak. tipas",ViewOnly,OrderType,false,0);
  end;
  EditField(h3,v+=vs,80,"Muitai",Normal,CustomsCost,true,0); //EBS moved here
  CheckBox(h4,v=6,0,"Uždarytas",Closed);
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    CheckBox(h4,v+=16,0,"Kaina su #PVM#",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Kaina su mok.",InclVAT);
  end;
  EnterSkip(Math);
  Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    EditField(110,-41,70,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (IsEnterprise and StandardHansa==false) then begin
		EditField(110,-21,70,"Paletės",ViewOnly,TotPalletNr,true,0);
		EditField(260,-41,70,"Frachtas",Normal,ShipCost,true,0);
		// EditField(260,-21,70,"Muitai",Normal,CustomsCost,true,0); //EBS
		EditField(260,-21,70,"Kiekis",Normal,TotQty,true,0); //EBS
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    EditField(410,-41,70,"#PVM#",ViewOnly,Sum3,true,0);
    if (HasExtTax) then begin
      EditField(410,-21,70,"Be mok.",ViewOnly,TAX1Sum,false,0);
    end;
  end else begin
    EditField(410,-41,70,"Mok.",ViewOnly,Sum3,true,0);
  end;
  EditField(-169,-41,118,"Tarp. suma",ViewOnly,Sum1,true,0);
  EditField(-169,-21,118,"VISO",ViewOnly,Sum4,true,0);
//  CheckBox(20,-21,0,"OK",OKFlag);
  v = 24;
  if (HasModIN or HasModPL or HasObjects) then begin
    MatrixBegin(3,v,-50,-44,-,199);
  end else begin
    MatrixBegin(3,v,-25,-44,-,199);
  end;
  MatTypedRow(stp);
  Flip(0);
  MatCol(1,28,"Prekė",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(1,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
//  MatCol(1,194,"Aprašymas",0,Spec,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatColTL(1,164,"Vnt.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  MatCol(1,204,"Aprašymas",0,Spec,false,0);
  if (HasJewelleryInterface) then begin
    MatCol(1,-337,"Sandėlio tipas",0,StockType,false,SetSClass);
  end;
  MatCol(1,-237,"Vnt. kaina",0,Price,true,0);
  MatCol(1,-151,"%",0,vRebate,true,0);
  MatCol(1,-116,"Suma",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
    MatCol(1,-30,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(1,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  if (HasObjects) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,164,"Aprašymas",0,Spec,false,0);
    if (IsEnterprise) then begin
      MatCol(1,-310,"Pirk. sąsk.",0,CostAcc,false,AccSClass);
    end;
    MatCol(1,-240,"Objektai",0,Objects,false,ObjSClass);
    if (IsEnterprise) then begin
			MatCol(1,-170,"Tiek. prekė",0,VEArtCode,false,PISClass);
			MatColTL(1,-100,"Tiek. vnt.",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);
			MatCol(1,-50,"Tiek. kiekis",0,VEQuant,true,0);
    end;
  end;
		if (HasModIN) then begin
			Flip(flipnr); flipnr = flipnr + 1;
		MatCol(1,164,"Aprašymas",0,Spec,false,0);
		MatCol(1,-330,"Gauta 1",0,Shipd1,true,0);
		MatCol(1,-270,"Gauta 2",0,Shipd2,true,0);
		if (HasModPL) then begin
			MatCol(1,-210,"Fakt.",0,Invd,true,0);
		end;
    if (HasModWHM) then begin
      MatCol(1,-150,"Palečių skč.",0,PalletNr,true,0);
    end;
    if (HasModTS) then begin
      MatCol(1,-90,"Projektas",0,PRCode,true,PRSClass);
    end;
    if (HasModSVO) then begin
      MatCol(1,-40,"Darb. Nr.",0,WSNr,true,0);
    end;
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    if (StandardHansa==false) then begin
      MatCol(1,164,"Užsakymo tipas",0,OrderType,false,0);
  MatCol(1,-400,"Prekės tipas",0,StockType,false,SetSClass);
    end else begin
      MatCol(1,164,"Aprašymas",0,Spec,false,0);
    end;
    if (HasTREO) then begin
  MatCol(1,-300,"TREO",0,TREO,false,SetSClass);
    end;
  MatCol(1,-200,"Plan. siuntimas",0,PlanShipRow,true,PasteCurDate);
  MatCol(1,-100,"Komentaras",0,Comment,true,0);
    if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,164,"Aprašymas",0,Spec,false,0);
  MatCol(1,-420,"Fr. kaštai",0,ShipCost,true,0);
  MatCol(1,-360,"Muitai",0,CustomsCost,true,0);
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Kaštai 1";end;
  MatCol(1,-300,label,0,RowCost1,true,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Kaštai 2";end;
  MatCol(1,-240,label,0,RowCost2,true,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Kaštai 3";end;
  MatCol(1,-180,label,0,RowCost3,true,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Kaštai 4";end;
  MatCol(1,-120,label,0,RowCost4,true,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Kaštai 5";end;
  MatCol(1,-60,label,0,RowCost5,true,0);
    end;
  end;
  DeleteRowTest;
  InsertRowTest;
  RowMenuBegin("");
  if (HasModIN and GuiType!=kGuiAndroid) then begin
    RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusPODsm");
  end;
  if (IsEnterprise) then begin
    RowMenuItem(0,"Ankstesnė pirkimo kaina",' ',' ',0,"POLastPPrsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    vs = 20; h = 110; h2 = 295;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Bazinė valiuta",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Bazinė valiuta 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (HasModIN) then begin
    Tile(tilenr,90,false,tilenr,ShipDeal); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Siunt. terminas",Normal,ShipDeal,false,ShipDealSClass);
    if (IsEnterprise) then begin
  EditField(h1,v+=vs,80,"Siunt. būdas",Normal,ShipMode,false,DMSClass);
    end;
    if (HasMultiLocations) then begin
  EditField(h1,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
    end;
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        EditField(h1,v+=vs,80,"Filialas",ViewOnly,BranchID,false,0);
//  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
//  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
//  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
  EditField(h2,v=vm,80,"Pasl. Užsak. nr.",Normal,SVONr,false,0);
  EditField(h2,v+=vs,80,"Darbo Užsak. nr.",Normal,WONr,false,0);
  EditField(h2,v+=vs,80,"P/U proceso nr.",Normal,POCQStatNr,true,POCQStatSClass);
  EditField(h2,v+=vs,80,"PU kontrakto nr.",ViewOnly,POCOSerNr,true,0);
  end;
  	CheckBox(473,v=vm,0,"Faktūra prieš gavimą",InvBeforePU);
    CheckBox(473,v+=vs,0,"Nustatyti nulinį gavimų kiekį",SetZeroPUQuant);
    EditField(h3,v+=vs,80,"Intrastat oper. kd.",Normal,IntrastatTransCode,false,IntrastatTransCodeSClass);
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,90,false,tilenr,LangCode); tilenr = tilenr + 1;
    EditField(h1,v=6,80,"Nuolaidų matrica",Normal,RebCode,false,RebSClass);
    if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Faktoringas",Normal,VEFactoring,false,VESClass);
    end;
  EditField(h1,v+=vs,80,"Užsakymo nr.",Normal,OrdNr,false,0);
  EditField(h1,v+=vs,-20,"Komentaras",Normal,Comment,false,0);
    if (HasSalesGroup) then begin
  EditField(h2,v=vm,80,"Pard. grupė",Normal,SalesGroup,false,SalesGroupSClass);
  EditField(h2,v+=vs,80,"Faktūra kam",Normal,InvoiceToCode,false,VESClass);
    end;
  EditField(h2,v+=vs,80,"Pirkimų sav.",Normal,CostPerUnit,true,0);
    if (HasLanguages) then begin
    EditField(h3,v=vm,80,"Kalba",Normal,LangCode,false,LangSClass);
    end;
  end else begin
    Tile(tilenr,20,false,tilenr,Comment); tilenr = tilenr + 1;
    if (HasAdvancedPricing) then begin
      EditField(h1,v=6,80,"Nuolaidų matrica",Normal,RebCode,false,RebSClass);
    end else begin
    	EditField(h1,v=6,-20,"Komentaras",Normal,Comment,false,0);
    end;
    if (HasLanguages) then begin
      EditField(h1,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
    end;
  end;
  Tile(tilenr,230,false,tilenr,Addr1); tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Užsakymas"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,vm=(v+=vs), -20,label,Normal,InvAddr4,false,0);
  vm = vm + 40;

  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=vm,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255); //!!TRANSLATE
  end;
/*
//oldapprovals
  if (HasApprovals) then begin
    ButtonFrame(h3=h+4,v=vm,123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Neprašoma",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);
  end;
*/
  if (HasVATZone) then begin
    v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
  end;
  if (IsEnterprise) then begin
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass);
//  EditField(h2,v+=vs,150,"VAT Reg. No.",Normal,VATNr,false,0);
//  EditField(h2,v+=vs,150,"Tel.",Normal,Phone,false,0);
//  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  end;
  Tile(tilenr,130,false,tilenr,ShipAddr0); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Siuntimo",Normal,ShipAddr0,false,0);
  EditField(h,v+=vs,-20,"adresas",Normal,ShipAddr1,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr4,false,0);
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,70,false,tilenr,ShipCost); tilenr = tilenr + 1;
  vs = 20; h2 = 290; h3 = 530;
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Papild. kaštai 1";end;
  EditField(h1,v=6,70,label,Normal,Cost1,true,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Papild. kaštai 2";end;
  EditField(h2,v,70,label,Normal,Cost2,true,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Papild. kaštai 3";end;
  EditField(h1,v+=vs,70,label,Normal,Cost3,true,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Papild. kaštai 4";end;
  EditField(h2,v,70,label,Normal,Cost4,true,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Papild. kaštai 5";end;
  EditField(h1,v+=vs,70,label,Normal,Cost5,true,0);
  EnterSkip(TransDate);
  ButtonFrame(h3,v=16,130,2,"Papild. kaštų skaičiavimas");
  RadioButton(h3,v,0,0,"Vertė",ExtraCostsCalculation);
  RadioButton(h3,v+=16,1,0,"Svoris",ExtraCostsCalculation);
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
/*
    if (IsEnterprise) then begin
      SpecialMenu("Add Planned Payment",' ',9,"PlannedPaymentPODsm");
    end;
*/
    if (HasModIN) then begin
      SpecialMenu("Prekės būklė",'I',2,"ItemStatusPODsm");
    end;
    SpecialMenu("Pirkimų užsakymo būklė",'r',5,"POStatRnPODsm");
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModIN) then begin
      SpecialMenu("Sukurti gavimą",'L',0,"PUFromPODsm");
    end;
    if (HasModPL) then begin
      SpecialMenu("Sukurti pirkimo faktūrą",'F',1,"VIFromPODsm");
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Sukurti prekių grąžinimą",'B',6,"RetPUFromPODsm");
    end;
/*
  if (HaseMail) then begin
    SpecialMenu("Create e-mail",'m',3,"CreateMailFromPODsm");
  end;
*/
  end else begin
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Pirkimo užsakymo būklė",'r',5,"POStatRnPODsm");
  if (IsEnterprise) then begin
    SpecialMenu("Rezervacijos",' ',6,"POReservPODsm");
  end;
  if (HasApprovals) then begin
    SpecialMenu("Užklausos patvirtinimas",' ',6,"POSendforAcceptancePODsm"); //!!TRANSLATE
    SpecialMenu("Atšaukti užklausos patvirtinimą",' ',2,"CancelApprovalRequestDsm"); //!!TRANSLATE
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Sukurti veiklą",'c',9,"CreateActFromPODsm");
  end;
  if (HasDownpayments) then begin
    SpecialMenu("Sukurti išankstinio apmokėjimo faktūrą",' ',3,"DownPayFromPODsm"); //!!TRANSLATE
  end;
  if (HaseMail) then begin
    SpecialMenu("Sukurti e-laišką",'m',3,"CreateMailFromPODsm");
  end;
  if (HasModIN) then begin
    SpecialMenu("Sukurti prekių gavimą",'L',0,"PUFromPODsm");
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    SpecialMenu("Sukurti tiesioginį pristatymą",'l',0,"DropSHFromPODsm");
  end;
  if (HasModPL) then begin
    SpecialMenu("Sukurti pirkimo Faktūrą",'F',1,"VIFromPODsm");
  end;
  if (HasRetGoodsToSupp and HasModIN) then begin
    SpecialMenu("Sukurti prekių grąžinimą",'B',6,"RetPUFromPODsm");
  end;
    SpecialMenu("Add Supplier",' ',0,"AddSupplierPODsm"); //!!TRANSLATE
    SpecialMenu("Add Item",' ',0,"AddItemPODsm");     //!!TRANSLATE
  end;
  EndWindow;
end;

window SDDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,vm,vs;
  Integer f,flipnr;

  WindowBegin("Nurašymai",SDDClass,CGview,-);
  SetWRect(20,80,560,350);
  Sizeable(-1,-1,0,0);
  FormName(SDForm);
  UseView(SDVc);
  ActiveFieldOnNew("TransDate");
  vs = 20; h2 = 260; h3 = 430; h4 = 580;
  EditField(h=80,v=6, 82,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(h2,v,82,"Oper. Data",Normal,TransDate,false,PasteCurDate);
  if (IsEnterprise) then begin
    EditField(h3,v,100,"Priežastis",Normal,Reason,false,StandProblemsSClass);
    CheckBox(h4,v,0,"OK",OKFlag);
    CheckBox(h4,v+20,0,"No N\L trans.",DoNotGenTrans);
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,82,"Sąn. sąsk.",Normal,CostAcc,false,AccSClass);
    EditField(h2,v,82,"Užsk. klasė",Normal,SDClass,false,OrderClassSClass);
    EditField(h3,v,100,"Nuoroda",Normal,RefStr,false,0);
    v = v + vs;
  end else begin
    if (HasModNL) then begin
      EditField(h3,v,82,"Savik. sąsk.",Normal,CostAcc,false,AccSClass);
    end;
    CheckBox(h4,v,0,"OK",OKFlag);
    v = v + vs;
  end;
  if (HasMultiLocations) then begin
    EditField(h,v,82,"Patalpa",Normal,Location,false,LocationSClass);
  end;
  if (HasAdvancedAccounting) then begin
    EditField(h2,v,82,"Trumpas kd.",Normal,ACShort,false,ACShortSClass);
  end;
  if (HasModTS) then begin
    EditField(h3,v,100,"Projektas",Normal,PRCode,false,PRSClass);
  end;
  v = v + vs;
  if (HasApprovals) then begin
    SoftEditField(h,v,82,"Appr. Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255); //!!TRANSLATE
  end;

  if (HasObjects) then begin
    EditField(h2,v,270,"Objektai",Normal,Objects,false,ObjSClass);
  end;
  EnterSkip(Math);
//  CheckBox(450,6,0,"OK",OKFlag);
  v = v + 40;
  if (IsEnterprise) then begin
    vm = v + 1;
    MatrixBegin(4,v,-50,-35,-,200);
  end else begin
    MatrixBegin(4,v,-40,-25,-,99);
  end;
  Flip(0);
  if (HasJewelleryInterface) then begin
    MatCol(1,24,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
    EnterSkip(Quant);
    MatCol(1,130,"Prekė",0,ArtCode,false,INSClass);
    if (HasVarieties) then begin
    MatCol(1,192,"Kiekis",0,Qty,true,MATVARINSClass);
    end else begin
      MatCol(1,192,"Kiekis",0,Qty,true,0);
    end;
    MatCol(1,254,"Aprašymas",0,Spec,false,0);
  end else begin
    MatCol(1,32,"Prekė",0,ArtCode,false,INSClass);
//  MatCol(1,94,"Var",0,VARList,false,VARSClass);
//  MatCol(1,144,"Kiekis",0,Qty,true,0);
    if (HasVarieties) then begin
    MatCol(1,94,"Kiekis",0,Qty,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Kiekis",0,Qty,true,0);
    end;
    MatCol(1,154,"Aprašymas",0,Spec,false,0);
  end;
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasJewelleryInterface==false) and (HasSerialNumbers) then begin
    MatCol(1,-280,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
  end;
  if (HasMultiLocations) then begin
  MatCol(1,-160,"Patalpa",0,Location,false,LocationSClass);
  end;
  if (HasPositions) then begin
  MatCol(1,-100,"Pozicija",0,PosCode,false,UsedPosSClass);
  end;
  if (IsEnterprise) then begin
  MatCol(1,-40,"Koef.",0,Coefficient,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-270,"Trumpas kd.",0,ACShort,false,ACShortSClass);
  MatCol(1,-200,"Savik. sąsk.",0,CostAcc,false,AccSClass);
  MatCol(1,-100,"Objektai",0,Objects,false,ObjSClass);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-210,"FIFO",0,FIFO,true,0);
  MatCol(1,-125,"Eilutės FIFO",0,FIFORowVal,true,0);
  MatCol(1,-40,"Koef.",0,Coefficient,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-240,"Ruošinys",0,Recepy,false,RecSClass);
    if (StandardHansa==false) then begin
  MatCol(1,-180,"Projektas",0,PRCodeRow,false,PRSClass);
    end;
  MatCol(1,-120,"Bazinė kaina",0,BasePrice,true,0);
  MatCol(1,-40,"Koef.",0,Coefficient,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-260,"Kaina",0,SalesPrice,true,0);  //EBS
  MatCol(1,-200,"BP",0,RowGP,true,0);  //EBS
  MatCol(1,-140,"Plotis",0,UnitXval,true,0);
  MatCol(1,-95,"Aukštis",0,UnitYval,true,0);
  MatCol(1,-50,"Gylis",0,UnitZval,true,0);
  end else begin
    if (HasModNL) then begin
      MatCol(1,-200,"Savikainos sąsk.",0,CostAcc,false,AccSClass);
    end;
    MatCol(1,-100,"Vnt. Savikainos vertė",0,FIFO,true,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusSDDsm");
  if (HasQualityControl) then begin
    RowMenuItem(0,"Kokybės kontrolė",'u','u',0,"QualConFromSDDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = vm;/* 28 */
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(h=150,-20,70,"Viso. kiekis",ViewOnly,TotQty,false,0);
  EditField(h=290,-20,-40,"Komentaras",Normal,Comment,false,0);
/*
//oldapprovals
  if (HasApprovals) then begin
    Tile(2,200,true,"1",AcceptanceStatus);
    if (HasApprovals) then begin
      SoftEditField(h3=-163,v=16,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255); //!!TRANSLATE
    end;
  ButtonFrame(h3=-163,v=16,123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalauta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Aktyvus",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);
  end;
*/
  if (HasAdvancedStock) then begin
  SpecialMenu("Sandėlio nurašymo būklė",'r',4,"SDStatusDsm");
  end;
  if (HasModNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',1,"OpenTRFromSD");
  end;
    SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  if (HasApprovals) then begin
    SpecialMenu("Užklausos patvirtinimas",' ',6,"SDSendforAcceptanceSDDsm"); //!!TRANSLATE
    SpecialMenu("Atšaukti užklausos patvirtinimą",' ',2,"CancelApprovalRequestDsm"); //!!TRANSLATE
  end;
  EndWindow;
end;

window NoSalesVClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Pridėti klasė pirkėjams",NoSalesVClass,CGMnt,RcType);
  SetWRect(20,80,460,460);
  vs = 20;h = 160; v = 6;
  PeriodField(h,v,"Periodas");
  if (HasCategories) then begin
  EditFieldTL(h,v+=vs,80,"Kategorija",M4UStr,Normal,20,f1,false,CCatSClass);
  end;
  if (HasSalesman or HasSalesmanBonus) then begin
  EditFieldTL(h,v+=vs,80,"Pardavėjas",M4UStr,Normal,20,f3,false,UserSClass);
  end;
  EditFieldTL(h,v+=vs,80,"Prekė",M4UStr,Normal,20,f2,false,INSClass);
  EditFieldTL(h,v+=vs,80,"Prekės grupė",M4UStr,Normal,10,FirstAcc,false,ITSClass);
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs,150,"Prekės klasė",M4UStr,Normal,100,f7,false,DISClass);
  end;
  EditFieldTL(h,v+=vs,80,"Veiklos tipas",M4UStr,Normal,5,ObjType,false,ActTypeSClass);
  EditFieldTL(h,v+=vs,80,"Pridėti klasė",M4UStr,Normal,20,f6,false,CClassSClass);
  EditFieldTL(h,v+=vs,150,"Pirkėjas",M4UStr,Normal,41,f5,false,AllCUSClass);
  EditFieldTL(h,v+=vs,80,"Klasė",M4UStr,Normal,20,f4,false,CClassSClass);
  EditFieldTL(h,v+=vs,80,"Dydis",M4Code,Normal,20,f8,false,VARSClass); // EVS: DOL-119
  if (HasJewelleryInterface) then begin
//    EditFieldTL(h,v+=vs,80,"#Supplier#",M4UStr,Normal,20,AccStr,false,VESClass);
  end;
  ButtonFrame(h=40,vm=(v+=41),123,6,"Registras"); //edit
  if (HasModSL) then begin
  RadioButton(h,v,0,0,"Faktūros",ArtMode);
    v = v + 16;
  end;
  if (HasModCO) then begin
    RadioButton(h,v,1,0,"Kontraktai",ArtMode);
    v = v + 16;
  end;
  if (HasModQT) then begin
    RadioButton(h,v,2,0,"Pasiūlymai",ArtMode);
    v = v + 16;
  end;
  if (HasModSO) then begin
    RadioButton(h,v,3,0,"Užsakymai",ArtMode);
    v = v + 16;
  end;
  if (HasModCRM) then begin
    RadioButton(h,v,4,0,"Veiklos",ArtMode);
    v = v + 16;
  end;
  RadioButton(h,v,5,0,"POS faktšros",ArtMode); // EVS: DOL-119
  v = v + 16;
  EndFrame;
  v = v + 8;
  if (HasModPL or HasModPO) then begin
    CheckBox(h,v,0,"Įtraukti tiekėjus",flags[0]); v = v + 16;
  end;
  if (HasAdvancedCRM) then begin
    CheckBox(h,v,0,"Įtraukti kontaktinius asmenis",flags[1]); v = v + 16;
    CheckBox(h,v,0,"Įtraukti svečius",flags[2]); v = v + 16;
    CheckBox(h,v,0,"Įtraukti partnerius",flags[3]); v = v + 16;
  end;
  ButtonFrame(h=200,v=vm,123,2,"Funkcija");
  RadioButton(h,v,0,0,"Pirko",Comparison);
  RadioButton(h,v+=16,1,0,"Nepirko",Comparison);
  if (HasAdvancedCRM) then begin
    CheckBox(h,v+=24,0,"Neįtraukti pasirinkto periodo",flags[10]);//Look at NoSalesRClass
end;
  EndWindow;
end;

window OPDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,t,v,vm,vs;
  Integer tilenr;
  Integer f,flipnr;

  WindowBegin("Mokėjimas",OPDClass,CGview,-);
  SetWRect(20,80,640,464);
  Sizeable(-1,-1,0,0);
  UseView(OPVc);
  ActiveFieldOnNew("PayDate");
  h = 100; h2 = 280; h3 = 490; v = 6; vs = 20;
  if (IsEnterprise) then begin
  Tile(0,110,false,"",SerNr);
  end;
  if (HasNumberSeries) then begin
  EditField(h,v, 80,"Nr.",St_i,SerNr,false,TSerSClass);
  end else begin
    EditField(h,v,80,"Nr.",St_i,SerNr,false,0);
  end;
  EditField(h2,v,80,"Mok. data",Normal,PayDate,false,PasteCurDate);
  if (HasModNL) then begin
  EditField(h3,v,82,"Operacijos data",Normal,TransDate,false,PasteCurDate);
  end;
  EditField(h,v+=vs,30,"Mok. būdas",Normal,PayMode,false,PMSClass);
  CheckBox(h4=-100,6,0,"Užsakyta",OrderedFlag);
  CheckBox(h4=-100,6+vs,0,"OK",DoneFlag);
  EnterSkip(Math);
  EditField(h2,v,120,"Mūsų a/s",Normal,BankAcc,false,0);
  EditField(h3,v,82,"Rūš. kodas",Normal,SortCode,false,0);
  if (HasAdvancedAccounting) then begin
    EditField(h,v+=vs,80,"Nuoroda",Normal,PayNumber,false,0);
  CheckBox(h2,v,0,"Tiekėjo inform. operacijoje",APonTR);
  end else begin
    v = v + vs;
  end;
  if (HasLanguages) then begin
  EditField(h3,v,82,"Kalba",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,472,"Komentaras",Normal,BankName,false,0);
  end else begin
    v = v + 10;
  end;
  EnterSkip(Math);
//  CheckBox(h,v=6,0,"Re_jected",RejectedFlag);//not used any more
//  CheckBox(h2,v,0,"Supp. Info on Trans.",APonTR);
  tilenr = 1;
  if (IsEnterprise) then begin
    TileButton(tilenr,"Mokėjimai"); tilenr = tilenr + 1;
    TileButton(tilenr,"Bankas"); tilenr = tilenr + 1;
    tilenr = 1;
    Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  end;
//  CheckBox(25,v=-39,0,"O_rdered",OrderedFlag);
//  CheckBox(25,v=-20,0,"OK",DoneFlag);
  if (HasLocalization("EST,LVA")) then begin
  HalPushButton(150,-50,150+100,-5,"EPaymentSignOPDsm","Parašas");
  HalPushButton(150,-25,150+100,-5,"EPaymentQueOPDsm","Siųsti bankui"); //4.4
  end;
  if (HasMultiCurrency) then begin
  EditField(-300,-21,50,"Valiuta",Normal,PayCurCode,false,CurncyCodeSClass);
  end;
  EditField(-125,-21,85,"Nurašyta",Normal,CurPayVal,true,0);
  h = 10;
  if (tilenr>1) then begin
    if (HasLocalization("EST,LVA")) then begin
      MatrixBegin(h,v=24,-50,-50,-,200);
    end else begin
      MatrixBegin(h,v=24,-50,-40,-,200);
    end;
  end else begin
    if (HasLocalization("EST,LVA,RUS,POL") or HasMultiCurrency or HasObjects or ((BuildProductCode=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN"))) then begin
      MatrixBegin(h,v+=40,-50,-40,-,200);
    end else begin
      MatrixBegin(h,v+=30,-30,-30,-,200);
    end;
  end;
  vm = v;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kPaymentRowTypeNormal,24,"Faktūros nr.",0,VISerNr,false,APSClass);
  MatCol(t  ,105,"Tiekėjas",0,VECode,false,VESClass);
  EnterSkip(RecVal);
  MatCol(t=kPaymentRowTypeSettlementDiscount,24,"",0,VISerNr,false,APSClass);
  MatText(t,70,"Nust. nuol.",true);
  MatCol(t,140,"Objektas",0,Objects,false,ObjSClass);
  MatCol(t,-360,"Fakt. val.",0,PInvCurncy,true,0);
  MatCol(t,-320,"Fakt. suma",0,PInvVal,true,0);
  MatCol(t,-240,"Banko val.",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-200,"Banko suma",0,BankVal,true,0);
  MatCol(t,-120,"Mok. val.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-80,"Mok. suma",0,RecVal,true,0);
  MatCol(t=kPaymentRowTypeBankFee,24,"",0,VISerNr,false,APSClass);
  MatText(t,-480,"Banko mokestis",true);
  MatCol(t,-390,"Fakt. val.",0,PInvCurncy,true,0);
  MatCol(t,-350,"Fakt. suma",0,PInvVal,true,0);
  MatCol(t,-260,"Banko val.",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-220,"Banko suma",0,BankVal,true,0);
  MatCol(t,-130,"Mok. val.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Mok. suma",0,RecVal,true,0);
  flipnr = 1;
  if (HasMultiCurrency or HasObjects or HasRussianPrepayment or ((BuildProductCode=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN"))) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  end;
  MatCol(t=kPaymentRowTypeNormal,190,"Tekstas",0,Comment,false,0);
  if (HasMultiCurrency) then begin
  MatCol(t,-260,"Banko val.",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-220,"Banko suma",0,BankVal,true,0);
  MatCol(t,-130,"Mok. val.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Mok. suma",0,RecVal,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kPaymentRowTypeNormal,190,"Tekstas",0,Comment,false,0);
  MatCol(t,-350,"Fakt. val.",0,PInvCurncy,true,0);
  MatCol(t,-310,"Neap. fakt. suma",0,PInvOutstand,false,0);
  MatCol(t,-220,"Fakt. suma",0,PInvVal,true,0);
  MatCol(t,-130,"Mok. val.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Mok. suma",0,RecVal,true,0);
    if (HasLocalization("POL")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-310,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
      MatCol(t,-270,"Bank Amount",0,BankVal,true,0);
      MatCol(t,-180,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
      MatCol(t,-110,"Bank Amt. in Cur. 1",0,B1BankVal,true,0);
    end;
  end else begin
    MatCol(t,-270,"Neap. fakt. suma",0,PInvOutstand,false,0);
    MatCol(t,-180,"Fakt. suma",0,PInvVal,true,0);
    MatCol(t,-90,"Mok. suma",0,RecVal,true,0);
  end;
  if (IsEnterprise==false) then begin
    if (HasObjects) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      if (HasRussianPrepayment) then begin
        if (HasModPO) then begin
          MatCol(t,-320,"Objektai",0,Objects,false,ObjSClass);
          MatCol(t,-200,"Užs. Nr.",0,OrderNr,false,POSClass);
        end else begin
          MatCol(t,-260,"Objektai",0,Objects,false,ObjSClass);
        end;
        MatCol(t,-100,"Išankst. Nr.",0,PrepayNr,false,OPPSClass);
      end else begin
        MatCol(t,-160,"Objektai",0,Objects,false,ObjSClass);
      end;
    end else begin
      if (HasRussianPrepayment) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kPaymentRowTypeNormal,190,"Tekstas",0,Comment,false,0);
        if (HasModPO) then begin
          MatCol(t,-200,"Užs. Nr.",0,OrderNr,false,POSClass);
        end;
        MatCol(t,-100,"Išankstinio Nr.",0,PrepayNr,false,OPPSClass);
      end;
    end;
    if ((BuildProductCode=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t,360,"Bank Reference",0,BankRefStr,false,0);
      MatCol(t,-250,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
      MatCol(t,-110,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-80,"#VAT# Value",0,VATVal,false,0);
    end;
    if (HasRussianPrepayment==false and HasPrepayments) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Išankst. apm. nr.",0,PrepayNr,false,OPPSClass);
      MatCol(t,-130,"Išs. val.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Išs. suma",0,RecVal,true,0);
    end;
  end else begin
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Tekstas",0,Comment,false,0);
      MatCol(t,-270,"Mok.b.",0,PayMode,false,PMSClass);
      MatCol(t,-220,"Čekio Nr.",0,ChequeNr,false,0);
      MatCol(t,-130,"Mok. val.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Mok. suma",0,RecVal,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Tekstas",0,Comment,false,0);
    MatCol(t,-320,"Užsak. Nr.",0,OrderNr,false,POSClass);
    MatCol(t,-230,"Išankst. apm. nr.",0,PrepayNr,false,OPPSClass);
    MatCol(t,-130,"Mok. val.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Mok. suma",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Tekstas",0,Comment,false,0);
    MatCol(t,-310,"PVM kd.",0,VATCode,false,VATCodeSClass);
    MatCol(t,-270,"PVM suma",0,VATVal,false,0);
//  MatCol(t,-200,"Extra Tax",0,TAX1Sum,false,0);
    MatCol(t,-130,"Mok. val.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Mok. suma",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Tekstas",0,Comment,false,0);
    MatCol(t,-260,"Objektas",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
			MatCol(t,-130,"Mok. val.",0,RecCurncy,true,CurncyCodeSClass);
			MatCol(t,-90,"Mok. suma",0,RecVal,true,0);
			Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Apvalinimo sąsk.",0,RoundOffAcc,false,AccSClass);
			MatCol(t,-270,"Apvalinimas",0,RoundOff,true,0);
			MatCol(t,-170,"Instal.",0,InstNr,false,APInstallSClass);
			MatCol(t,-100,"Nuorodos numeris",0,rkPayNumber,false,0);
		end else begin
      MatCol(t=kPaymentRowTypeNormal,-170,"Apvalinimo sąsk.",0,RoundOffAcc,false,AccSClass);
			MatCol(t,-80,"Apvalinimas",0,RoundOff,true,0);
		end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Kreditorių sąsk.",0,APAcc,false,AccSClass);
		MatCol(t,-370,"Banko nuoroda",0,BankRefStr,false,0);
		MatCol(t,-270,"Į banko sąsk.",0,BankAcc,false,VEBankAccSClass);
		MatCol(t,-140,"Trump. kd.",0,SortCode,false,0);
		MatCol(t,-50,"M. Kodas",5,PaymentCode,false,PaymentCodeSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,200,"Banko val.",0,BankCurncy,true,CurncyCodeSClass);
		MatCol(t,-400,"Banko suma",0,BankVal,true,0);
		MatCol(t,-330,"Banko mok.",0,BankFeeVal,true,0);
		MatCol(t,-270,"Į banko val. 1",0,ToRateB1BankVal,true,0);
		MatCol(t,-200,"Banko val. 1",0,B1BankVal,true,0);
		MatCol(t,-130,"Banko val. 2",0,B2BankVal,true,0);
	//  MatCol(t,-120,"Mok %",0,BankFeePrc,true,0); /* What was this ?? */
		if (StandardHansa==false) then begin
			MatCol(t,-60,"Koefic. vertė",0,Coef,true,0);
		end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,-470,"B. Val.",0,BankCurncy,true,CurncyCodeSClass);
		MatCol(t,-430,"Banko suma",0,BankVal,true,0);
		MatCol(t,-350,"Kursas",0,FrRateBankVal,true,0);
		MatCol(t,-310,"Į B. val. 1",0,ToRateB1BankVal,true,0);
		MatCol(t,-240,"Į B. val. 2",0,ToRateB2BankVal,true,0);
		MatCol(t,-170,"Baz. kur. 1",0,BaseRate1BankVal,true,0);
    MatCol(t,-95,"Baz. kur. 2",0,BaseRate2BankVal,true,0);
//    if (StandardHansa==false) then begin
//    MatCol(t,-30,"Koef. vertė",0,Coef,true,0);
//    end;
  end;
  if (HasLocalization("ARG")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
    MatCol(t,-260,"P. Mode",0,PayMode,false,PMSClass);
    MatCol(t,-200,"W. Tax",0,WHTax,false,WHTaxSClass);
    MatCol(t,-100,"W. Tax Base",0,WHTaxBase,false,0);
//    MatCol(t,-100,"Adresas",0,WHTaxAccumBase,false,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  if (HasSettlementDiscount) then begin
    RowMenuItem(0,"Pridėti sutartinė nuolaidą",' ',' ',4312,"CashDiscountOPDsm");
  end;
  if (HasModPL and HasModNL) then begin
    RowMenuItem(0,"Pridėti banko mokestį",' ',' ',4312,"NewFeeOPDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  if (tilenr>1) then begin
//    v = 18;
    v = v + 1;
  end;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,120,true,tilenr,BankAcc); tilenr = tilenr + 1;
  v=6; h= 100;
  EditField(h,v,120,"Mūsų banko sąsk.",Normal,BankAcc,false,0);

  CheckBox(h2,v,0,"Tarptautinis mokėjimas",ForeignPayment);
  CheckBox(-100,v,0,"Exported",SentFlag); // EVS dev
    if (HasApprovals) then begin
      SoftEditField(h3=520,v,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*
    ButtonFrame(h3=490,v=vm,123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujamas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėtas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalautas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Aktyvus",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtintas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmestas",AcceptanceStatus);
*/
/*
  CheckBox(25,v=-39,0,"O_rdered",OrderedFlag);
  CheckBox(25,v=-20,0,"OK",DoneFlag);
  HalPushButton(150,-30,150+100,-5,"EPaymentQueOPDsm","Į banką");
*/
    end;
    ButtonFrame(h=40,vm=(v+=40),123,3,"Mokėjimo formatas");
    RadioButton(h,v,0,0,"Atskira eilute",PayperSupplier);
    RadioButton(h,v+=16,1,0,"Kiekvienam tiekėjui",PayperSupplier);
    RadioButton(h,v+=16,2,0,"Paketinis",PayperSupplier);
    ButtonFrame(h2=190,v=vm,123,3,"Mokėjimo būdas");
    RadioButton(h2,v,0,0,"Normalus",PayMethod);
    RadioButton(h2,v+=16,1,0,"Skubus",PayMethod);
    RadioButton(h2,v+=16,2,0,"Labai skubus",PayMethod);
    ButtonFrame(h3=340,v=vm,123,3,"Banko mokesčiai");
    RadioButton(h3,v,0,0,"Mokame mes",Bankfees);
    RadioButton(h3,v+=16,1,0,"Moka tiekėjai",Bankfees);
    RadioButton(h3,v+=16,2,0,"Pasidalinami",Bankfees);

  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Mokėjimo būklė",'r',4,"OPStatusDsm");
    if (HasModPL and HasModNL) then begin
      SpecialMenu("Pridėti banko mokestį",' ',3,"NewFeeOPDsm");
    end;
  	if (IsEnterprise) then begin
			//    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
  		SpecialMenu("(-",' ',1,"");
  		SpecialMenu("Pridėti sut. nuolaidą",' ',2,"CashDiscountOPDsm");
  	end;
    if (HasModNL) then begin
      SpecialMenu("Atidaryti D/K operaciją",'t',5,"OpenTRFromOP");
    end;
  end else begin
		//    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
  	if (HasModNL) then begin
  		SpecialMenu("Atidaryti D/K operaciją",'t',5,"OpenTRFromOP");
  	end;
  	if (IsEnterprise) then begin
			//    SpecialMenu("Open Withholding Certificate",'',5,"OpenWHCertificateOPDsm");
    	if (StandardHansa==false) then begin
  			SpecialMenu("Priskirti čekio numerį",' ',6,"AssignChequeOPDsm");
      	SpecialMenu("Paruošti #ėekį#",'e',9,"PrepChequesOPDsm");
      	SpecialMenu("Spausdinti #ėekius#",' ',9,"PrintChequesOPDsm");
    	end;
  	end;
  	if (HasWithholdingTax) then begin
  		SpecialMenu("Paskaičiuoti pelno mokesčius",' ',11,"WithholdTaxesOPDsm");
  	end;
  	if (IsEnterprise) then begin
  		SpecialMenu("Mokėjimo būklė",'r',4,"OPStatusDsm");
  		SpecialMenu("Banko išrašas",' ',12,"BankStOPDsm");
      if (HasLocalization("EST,LVA")) then begin
  			SpecialMenu("El. mokėjimo būklė",' ',13,"EPaymentStatusOPDsm");
      end;
  		SpecialMenu("Spausdinti kasos dokumentą",' ',4,"PrintCashInOutOPDsm");
      SpecialMenu("Banko bylos eksportas",'',4,"BankingFileExportDsm");
    end;
    if (HasApprovals) then begin
      SpecialMenu("Užklausos patvirtinimas",' ',6,"OPSendforAcceptanceOPDsm"); //!!TRANSLATE
      SpecialMenu("Atšaukti užklausos patvirtinimą",' ',2,"CancelApprovalRequestDsm"); //!!TRANSLATE
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasDownpayments) then begin
      SpecialMenu("Down Payment",' ',7,"DownPayFromOPDsm"); //!!TRANSLATE
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Sukurti kasos išlaidas",' ',8,"CLOutFromOPDsm");
    end;
    if (HaseMail) then begin
      SpecialMenu("Sukurti E-laišką",'m',9,"CreateMailFromOPDsm");
    end;
    if (HasLocalization("HRV,RUS,SLV,SRB,SVN,UKR") and (HasModNL or IsEnterprise)) then begin
      SpecialMenu("#VAT# Correction #P/L#",' ',9,"VATCorrectionOPsm"); //!!TRANSLATE
    end;
    if (HasLocalization("POL") and IsEnterprise) then begin
      SpecialMenu("Create #VAT# Correction #P/L#",' ',9,"VATCorrectionOPsm");
    end;
  end;
  EndWindow;
end;

window IVDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer rn;

  WindowBegin("Faktūra",IVDClass,CGview,-);
  Sizeable(-1,-1,0,0);
  UseView(IVVc);
if (HasTouchScreenLook==false) then begin
  ActiveFieldOnNew("CustCode");
  SetWRect(20,80,750,460);
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Pirkėjas",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    if (HasLocalization("FIN")) then begin
      EditField(h,vm=(v+=20),180,"Mokėjimo nuor.",ViewOnly,CalcFinRef,false,0);
    end else begin
  EditField(h,vm=(v+=20),135,"Oficialus Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    end;
  end else begin
    v = v + 20;
    vm = v;
  end;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  TileButton(1,"Terminai");
  TileButton(2,"Prekės");
  TileButton(3,"Valiuta");
  TileButton(4,"Siuntimas");
  TileButton(5,"Ident.");
  TileButton(6,"Kainodara");
  TileButton(7,"Fakt. adresas");
  TileButton(8,"Siunt. adresas");
  Tile(1,110,false,"1",InvDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Faktūros data",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Mok. sąl.",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h1,v+=vs,82,"Apmokėti iki",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Oper. data",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Pasl. prist. data",Normal,ServiceDelDate,false,PasteCurDate);
  EditField(h2,v=vm,135,"Mūsų nuoroda",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Perspėjimas",Normal,ClientContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Nuoroda",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Pirk. Užsk. Nr.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  if (StandardHansa) then begin
    EditField(h3,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
  end else begin
  EditField(h3,v+=vs,80,"Projektas",Normal,PRCode,false,0);
  end;
  EditField(h3,v+=vs,80,"Kredito priežastis",Normal,Reason,false,StandProblemsSClass);
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"Mokėjimo būsena",Normal,PMCode,false,PMSClass);
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h3,v+=vs,80,"Faktūros tipas",Normal,BrazilEInvType,false,BrazilEInvTypeSClass);
  end;
  if (HasLocalization("BOL,BRA,HRV,MEX")) then begin
    EditField(h3,v+=vs,130,"Tax Seal",Normal,TaxAdminServSeal,false,0);
  end;
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"No. Pay. Acc.",Normal,PayAccNo,false,0);
  end;
  if (HasLocalization("RUS")) then begin
    EditField(h3,v+=vs,-20,"Čekio info.",Normal,ReceiptInfo,false,0);
  end;
  CheckBox(h4,v=6,0,"Abejotina",DisputedFlag);
  if (StandardHansa) then begin
    CheckBox(h4,v+=16,0,"Atnaujinti sandėlį",UpdStockFlag);
  end;
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
//  CheckBox(20,-20,0,"OK",OKFlag);
  if (CompileType!=ctiPhone) then begin
  EditField(55,-41,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  if (UseTaxTemplatesforTaxCalc==false) then begin
  if (UserCanAction("ViewCostPrice",true)) then begin
        EditField(160,-41,70,"GP %",Normal,GPProc,true,0); //!!TRANSLATE
    EditField(160,-21,70,"Viso BP",ViewOnly,TotGP,true,0);
  end;
  EditField(290,-41,70,"Mok. 2",ViewOnly,TAX2Sum,true,0);
  EditField(290,-21,70,"Pap. mok.",ViewOnly,TAX1Sum,true,0);
  EditField(410,-41,95,"PVM",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
    //EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
      EditField(290,-21,70,"BP viso",ViewOnly,TotGP,true,0);
    end;
      EditField(410,-41,95,"Mok.",ViewOnly ,Sum3,true,0);
  end;
  EditField(410,-21,95,"Suma",ViewOnly,BaseSum4,true,0);
  EditField(-150,-41,95,"Tarp. suma",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,95,"VISO",ViewOnly ,Sum4,true,0);
  end else begin
    EditField(55,-41,80,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    EditField(55,-21,80,"PVM",ViewOnly ,Sum3,true,0);
    EditField(-120,-41,80,"Pap. mok.",ViewOnly,TAX1Sum,true,0);
    EditField(-120,-21,80,"VISO",ViewOnly ,Sum4,true,0);
  end;
  v = 24;
  MatrixBegin(4,v,-50,-49,-,200);
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeCredit,32,"Faktūros kreditas",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t,-216,"",true);
  MatText(t=kInvoiceRowTypeDebit,32,"Faktūros debitas",true);
  MatCol(t,208,"",0,OrdRow,false,0);
  MatCol(t,-216,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeInterest,32,"Delspinigiai",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDownpayment,32,"Išankstinis apmokėjimas",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,ArtCode,true,0);
  MatColTL(t,188,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
  MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);
  MatColTL(t,-140,"",0,-1,Normal,0,Sum,true,0); //?? TL?
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-100,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-70,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypePrepayment,32,"Išankstinio numeris",true);
  MatCol(t,208,"",0,CUPNr,false,ARPay3SClass);
  MatCol(t,-216,"",0,BasePrice,false,0);
  MatCol(t,-170,"",0,Price,true,0);// Price holds the #VAT# sum, Recipe holds the date of prepaym. BasePrice holds amount in base 1, TAX1Reb holds TAX1Sum
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeLoan,32,"Paskola",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeLoanInterest,32,"Paskolos palūkanos",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeUpdateMark,32,"Parašas",false);
  MatColTL(t,94,"Parašas",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeVoid,32,"Panaikintas",false);
  MatColTL(t,65,"Parašas",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Prekė",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,150,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"Kiekis",0,Quant,true,0);
  end;
  MatCol(t,190,"Kaina",0,Price,true,0);
  MatCol(t,250,"Aprašymas",0,Spec,false,0);
  MatCol(t,-195,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Suma",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeSubtotal,32,"Viso",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-140,"Suma",0,-1,ViewOnly,0,Sum,true,0);
//  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=kInvoiceRowTypeHidden,32,"ši ir žemiau esančios eilutės nebus spausdinamos",false);
  MatText(t=kInvoiceRowTypeCorrection,32,"K",true);
  MatCol(t,45,"Prekė",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,91,"Kiekis",0,Quant,true,0);
  MatText(t=kInvoiceRowTypeRetention,32,"Išlaikymas",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-210,"Pard.sąsk",0,-1,0,0,SalesAcc,false,AccSClass);
  MatColTL(t,-110,"Suma",0,-1,0,0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"Dė",true);
  MatCol(t,58,"",0,GCNr,false,GCSClass);
  MatCol(t,-416,"",0,Spec,false,0);
  MatCol(t,-84,"Suma",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"GVR",true);
  MatCol(t,58,"",0,GCNr,false,GCSSClass);
  MatCol(t,-316,"",0,Spec,false,0);
  MatCol(t,-84,"Suma",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeCashPayment,32,"KASA",true);
  MatCol(t,94,"Suma",0,Sum,true,0);
  MatCol(t,198,"Mok. būdas",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
    MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,108,"Taškai",0,Points,true,0);
  MatCol(t,148,"Valiuta",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,-280,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"Taškai",0,Points,true,0);
  MatCol(t,141,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"KK",true);
  MatCol(t,94,"Suma",0,Sum,true,0);
  MatCol(t,198,"Mok. būdas",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"Autorizacija",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeHeader,32,"Antraštė",true);
  MatCol(t,100,"",0,Spec,false,0);
   MatText(t=kInvoiceRowType18,28,"Rezervuota",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType19,28,"Rezervuota",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Percepcinis mokestis",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,AccSClass);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Sulaikymo mokestis",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,SalesAcc,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Spec,false,0);
  if (StandardHansa==false) then begin
    MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Multipirkimų nuol.",true);
  end;
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT TRSF",true);
  MatCol(t,94,"Spec",0,Spec,false,0);
  MatCol(t,-235,"Deb. sąsk.",0,SalesAcc,false,0);
  MatCol(t,-135,"Suma",0,Sum,true,0);
  MatCol(t,-30,"PVM kd.",0,VATCode,false,0);
  /*
  MatText(t=kInvoiceRowTypePreviousDownpayment,32,"Prev. Down Payment",true);
  MatColTL(t,152,"",0,-1,ViewOnly,0,CUPNr,true,0);
  MatColTL(t,222,"",0,-1,ViewOnly,0,ServiceDelDate,true,0);
  MatColTL(t,-200,"",0,-1,Normal,0,Price,true,0);
  MatColTL(t,-100,"",0,-1,Normal,0,Sum,true,0);
  */
  //t = 21 kInvoiceRowTypeChequePayment
  MatText(t=kInvoiceRowTypeActivationDate,32,"Aktyvavimo data",true); //!!TRANSLATE
  MatCol(t,130,"",0,ServiceDelDate,false,PasteCurDate); //!!TRANSLATE
  Flip(1);
//  MatCol(t=1,194,"Aprašymas",0,Spec,false,0);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
//  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
//  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeInterest,-260,"",0,OrdRow,true,0);
  MatCol(t,-235,"",0,BasePrice,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  Flip(2);
  MatCol(t=kInvoiceRowTypeNormal,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-360,"Sąsk.",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-310,"Sukaupta",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Patalpa",0,Location,false,LocationSClass);
  MatCol(t,-180,"Pozicija",0,PosCode,false,UsedPosSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
  MatCol(t,-144,"Objektai",0,Objects,false,ObjSClass);
  MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-124,"Objektai",0,Objects,false,ObjSClass);
  MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-360,"Sąsk.",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-310,"Padidėjimas",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Patalpa",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-180,"Pozicija",0,PosCode,false,UsedPosSClass);
  end;
  if (UseTaxTemplatesforTaxCalc) then begin
  MatCol(t,-144,"Objektas",0,Objects,false,ObjSClass);
  MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-124,"Objektai",0,Objects,false,ObjSClass);
  MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeInterest,-70,"",0,SalesAcc,false,AccSClass);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
//  MatCol(t=kInvoiceRowTypePrepayment,-224,"",0,SalesAcc,false,AccSClass);
//  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-250,"Sąsk.",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-170,"Padid.",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-104,"Objektai",0,Objects,false,ObjSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-35,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  Flip(3);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
  MatCol(t,-380,"Vnt. kn.",0,Price,true,0);
  MatCol(t,-315,"%",0,vRebate,true,0);
  MatCol(t,-280,"Savikaina B2",0,BasePriceB2,true,0);
  MatCol(t,-210,"Savikaina",0,BasePrice,true,0);
  MatCol(t,-140,"BP",0,rowGP,true,0);
  MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Savik. B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Savik.",0,BasePrice,true,0);
    MatCol(t,-140,"BP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-315,"Vnt. kn.",0,Price,true,0);
    MatCol(t,-245,"%",0,vRebate,true,0);
    MatCol(t,-210,"Savikaina",0,BasePrice,true,0);
    MatCol(t,-140,"BP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  Flip(4);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-370,"Pardavėjas",0,Salesmen,false,UserSClass);
  MatCol(t,-300,"Ser. Nr",0,SerialNr,false,SerialNrSClass);
//  MatCol(t,-250,"Main Serial No.",0,MotherNr,true,0);
  MatCol(t,-220,"K.faktorius",0,PriceFactor,true,0);
  MatCol(t,-170,"Ruošinys",0,Recepy,false,RecSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-70,"Eilutė FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-310,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"K. fakt.",0,PriceFactor,true,0);
  MatCol(t,-180,"Ruošinys",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Eilutė FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-40,"Koef.",0,Coefficient,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-310,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"K. fakt.",0,PriceFactor,true,0);
  MatCol(t,-180,"Ruošinys",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Eil. FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-80,"",0,MotherArtCode,false,0);
  MatCol(t,-40,"",0,RecipeQuant,false,0);
//  MatCol(t,-40,"Coeff",0,Coefficient,true,0);
  Flip(5);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vnt.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vieneto kaina",0,UnitFactPrice,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vienetas",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Vnt. kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vnt. kaina",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);//New Row Type..
  MatCol(t,-315,"Vnt.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vnt. kaina",0,UnitFactPrice,true,0);
  Flip(6);
  t = kInvoiceRowTypeNormal;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-390,"Pirk. Prekės Nr.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Koef.",0,Coefficient,true,0);
  MatCol(t,-260,"K.faktor.",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
  MatCol(t,-210,"Pasl. kontr. ist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Kred. eil.",0,CreditedRow,false,0);
  MatCol(t,-70,"Aplink. mok.",0,RepaExVAT,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-390,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Koef.",0,Coefficient,true,0);
  MatCol(t,-260,"K.faktor.",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
  MatCol(t,-210,"Pasl. kontr. ist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Kred. eil.",0,CreditedRow,false,0);
  MatCol(t,-70,"Aplink. mok.",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);//New Row Type..
  MatCol(t,-80,"Aplinkos mok.",0,RepaExVAT,true,0);
  Flip(7);
  t = kInvoiceRowTypeNormal;
  if (GuiType!=kGuiiPhone) then begin
    MatCol(t,144,"Aprašymas",0,Spec,false,0);
  end;
  MatCol(t,-240,"Muito Nr.",0,CustomsNr,false,0);
  MatCol(t,-100,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-240,"Muito Nr.",0,CustomsNr,false,0);
  MatCol(t,-100,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-240,"Muito Nr.",0,CustomsNr,false,0);
  MatCol(t,-100,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusIVDsm");
  RowMenuItem(0,"Ankstesnė pardavimo kaina",' ',' ',0,"IVLastSPrsm");
  RowMenuItem(0,"Pridėti antraštės eilutę",' ',' ',0,"HeaderLineIVDsm");
  RowMenuItem(0,"Pridėti paslėptą eilutę",' ',' ',0,"HiddenLineIVDsm");
    RowMenuItem(0,"Pridėti grynųjų eilutę",' ',' ',0,"CashLineIVDsm");
    RowMenuItem(0,"Pridėti kreditinės kort. eilutę",' ',' ',0,"CreditCardLineIVDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Pridėti sulaikymą",' ',' ',0,"RetentionLineIVDsm");
  end;
  RowMenuItem(0,"Pridėti tarpinęėsumą",' ',' ',0,"SubTotalLineIVDsm");
  RowMenuItem(0,"Apple garantinės būklės tikrinimas",'w',' ',0,"WarrantyStatusIVDsm");
  if (FileExists("hob/hmdatadef.hob")) then begin//??? why here and not it ahansamail ?  //!!TRANSLATE
    RowMenuItem(0,"Pridėti licenzijos pradžios datą",' ',' ',0,"LicStartIVDsm"); //!!TRANSLATE
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
  EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 310; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Siunt. terminas",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Siunt. būdas",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Maršrutas",Normal,Sorting,false,DelRouteSClass);
  EditField(h1,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
    EditField(h1,v+=vs,80,"Plan. siunt. data",Normal,PlanSendDate,false,PasteCurDate);
    EditField(h1,v+=vs,80,"Plan. siunt. data",Normal,PlanSendTime,false,PasteCurTime);
  end;
  EditField(h1,v+=vs,80,"Filialas",Normal,BranchID,false,AllCUSClass);
  EditField(h2,v=vm,80,"Viso kiekis",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Viso svoris",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Viso tūris",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Frachtas",Normal,FrPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Plan. atv. data",Normal,PlanArrDate,false,PasteCurDate);
    EditField(h2,v+=vs,80,"Plan. atv. laiaks",Normal,PlanArrTime,false,PasteCurTime);
  	EditField(h2,v+=vs,80,"Frachto įm.",Normal,FreightCode,false,FreightCompanySClass);
  	CheckBox(h3,v=vm,0,"Atnaujinti sand.",UpdStockFlag);
  	EditField(h3,v+=2*vs,80,"Frachtas #PVM kd.#",Normal,FrVATCode,true,VATCodeSClass);
  	EditField(h3,v+=vs,80,"Intrastat oper. kd.",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
    EditField(h3,v+=vs,80,"Glob. transp. nr.",Normal,GlobalTransportNr,false,0);
    EditField(h3,v+=vs,80,"Glob. transp. data",Normal,GlobalTransportDate,false,PasteCurDate);
  end;
  Tile(5,170,false,"5",OrderNr);
  EditField(h1,v=vm,80,"Užsk. nr.",ViewOnly,OrderNr,false,0);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Pasl. Užsk. nr.",ViewOnly,SVONr,false,0);
  EditField(h1,v+=vs,80,"Kred. rank. nr.",ViewOnly ,CredManNr,false,0);
  end;
  EditField(h1,v+=vs,135,"Oficialus Nr 2.",Normal,OfficialSerNr2,false,0);
  if (HasLocalization("FIN")) then begin
    EditField(h1,v+=vs,135,"Delivery Site Code",Normal,DeliverySiteCode,false,0);
    EditField(h1,v+=vs,135,"Work Site Number",Normal,WorkSiteNumber,false,0);
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h1,v+=vs,80,"Federal Service",Normal,FedServCode,false,FederalSerSClass);
  end;
  if (HasLocalization("ARG,BOL")) then begin
    EditField(h1,v+=vs,135,"CAE/CAEA",Normal,CAE,false,0); //!!TRANSLATE
    EditField(h1,v+=vs,135,"CAE Expiry",Normal,CAEExpiry,false,0); //!!TRANSLATE
    EditField(h1,v+=vs,70,"CAEA Start",ViewOnly,CAEAStartDate,false,0); //!!TRANSLATE
  end;

  EditField(h2=350,v=vm,80,"Stat. vertė",Normal,StatVal,true,0); //!!TRANSLATE
  EditField(h2,v+=vs,80,"Trans. Time",Normal,TransTime,false,SetSClass); //!!TRANSLATE
  EditField(h2,v+=vs,80,"Print Date",ViewOnly,PrintDate,false,0); //!!TRANSLATE
//  ColourPushButton(-100,v,-20,v+60,"TestIVDClassCardData","Test" & chr(10) & "CardData",4);
//  SoftEditField(h3+50,v,100,"Valdymo kodas"  ,ViewOnly ,"TaxAuthIDCC",false,0,M4Str,60);
  if (StandardHansa==false) then begin
  if (HasLocalization("ARG,BOL")) then begin
      EditField(h2,v+=vs,135,"Mok. autor. ID",Normal,TaxAuthID,false,0);
  	EditField(h2,v+=vs,135,"Kontrolės kd.",ViewOnly ,TaxAuthIDCC,false,0);
  	end;
    if (HasLocalization("ARG")) then begin
      EditField(h2,v+=vs,70,"CAEA Expiry",ViewOnly,CAEAExpiryDate,false,0); //!!TRANSLATE
			EditField(h2,v+=vs,70,"CAEA prad.",ViewOnly,CAEAStartDate,false,0);
		end;
		EditField(h2,v+=vs,135,"Būklė",Normal,Status,false,SetSClass);
  end;
//  EditField(h2,v+=vs,135,"E-Inv Exp. Date",ViewOnly,EInvExpDate,false,0);//Tx server
//  EditField(h2,v+=vs,135,"E-Inv Exp. Qty",ViewOnly,EInvExpQty,false,0);
  CheckBox(h3=550,v=vm,0,"Be priminimų",NoRemndrFlag);
  CheckBox(h3,v+=16,0,"Be delspinigių",NoInterestFlag);
  CheckBox(h3,v+=16,0,"Be rinkinio",NoColectionFlag);
  CheckBox(h3,v+=16,0,"Pirk. Inf. operacijoje",ARonTR);
  CheckBox(h3,v+=16,0,"Nesiųsti kaip E-fakt.",NoEInvoice);
  if (StandardHansa==false) then begin
  CheckBox(h3,v+=16,0,"Fiskalinė fakt.",FiscalFlag);
  CheckBox(h3,v+=16,0,"Sav. atsisk.",SelfBilling);
  CheckBox(h3,v+=25,0,"POS Return",POSRetFlag); // EVS: DOL-89
//    CheckBox(h3,v+=16,0,"Including VAT",InclVAT);
  end;
//  CheckBox(h3,v+=16,0,"E-Invoice Exported",EInvExpFlag);
  Tile(6,150,false,"6",PriceList); vs = 20;
  EditField(h1,v=vm,80,"Kainoraštis",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Nuolaidų lentelė",Normal,RebCode,false,0);
//  EditField(h1,v+=vs,80,"Disc. %",ViewOnly,DiscPerc,false,0);
//  EditField(h1,v+=vs,80,"Disc. Amount",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Orig. pirkėjas",ViewOnly,OrgCust,false,0);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Kreditinė kortelė",Normal,CreditCard,false,CreditCardSClass);
  EditField(h1,v+=vs,80,"Autorization",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,80,"Debitoriai",Normal,ARAcc,false,AccSClass);
  EditField(h1,v+=vs,-20,"Komentaras",Normal,InvComment,false,0);
  if (HasSalesGroup) then begin
    EditField(h2=310,v=vm,80,"Pard. grupė",ViewOnly,SalesGroup,true,0);
  	EditField(h2,v+=vs,80,"Kalba",Normal,LangCode,false,LangSClass);
  end else begin
    EditField(h2,v=vm,80,"Kalba",Normal,LangCode,false,LangSClass);
  end;
  EditField(h2,v+=vs,80,"Komisiniai",Normal,Commision,true,0);
  EditField(h2,v+=vs,80,"Viso su komis.",ViewOnly,SumIncCom,true,0);
  EditField(h2,v+=vs,80,"Delspinigiai",Normal,IntCode,true,IntSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Org. Nr.",Normal,CredInv,false,0);
  EditField(h3,v=vm,80,"Primin. lygis",Normal,LastRemndr,false,0);
  end else begin
    EditField(h3,v=vm,80,"Org. Nr.",Normal,CredInv,false,0);
    EditField(h3,v+=vs,80,"Primin. lygis",Normal,LastRemndr,false,0);
  end;
  EditField(h3,v+=vs,80,"Pask. primin. data",Normal,LastRemDate,false,PasteCurDate);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Lojalumo kortelė",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  end;
    EnterSkip(Math);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Narystės lygis",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
  EditField(h3,v+=vs,80,"Lojalumo taškai",ViewOnly,Points,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v+=vs,80,"TREO Nr.",Normal,TREONr,false,0);
  end;
  Tile(7,250,false,"7",Addr1); vs = 20;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Faktūra"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Šalis",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Faktūra",Normal,BankCode,false,BankSClass);
  if (StandardHansa==false) then begin
    if (HasApprovals) then begin
      SoftEditField(h3=h+4,v=(vm+=40),123,"Patvirtinimo būsena",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255); //!!TRANSLATE
    end;
/*
//oldapprovals
  ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Neprašoma",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atsakyta",AcceptanceStatus);
*/
    v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelslit(h3=290,v=vm+40,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"PVM Reg. Nr.",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Faksas",Normal,Fax,false,0);
  Tile(8,170,false,"8",ShipAddr0); vs = 20;
  if (StandardHansa==false) then begin
    EditField(h1,v=6,80,"Adreso kd.",Normal,DelAddrCode,false,DelAddr3SClass);
    EditField(h1,v+=vs,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  end;
  EditField(h1,v+=vs,-20,"Adresas",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Šalis",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
  end;
  EditField(h2,v,150,"Siuntimo GLN",ViewOnly,DelRecipientGLN,false,0);
  EnterSkip(InvDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Faktūros būklė",'r',2,"IVInfoIVDsm");
    SpecialMenu("Prekės būklė",'I',0,"ItemStatusIVDsm");
    SpecialMenu("Atidaryti D/K operaciją",'t',8,"OpenTRFromIV");
    SpecialMenu("Sukurti kredito pažymą",' ',20,"CreateCreditNoteIVDsm");
    SpecialMenu("Pridėti tarpinę sumą",' ',12,"SubTotalLineIVDsm");
    SpecialMenu("Prijungti prie išankstinio",' ',4,"ConnectToPrepayIVDsm");
/*not working yet
    SpecialMenu("Create E-Mail",'m',23,"CreateMailFromIVDsm");
*/
  end else begin
//  SpecialMenu("Prekės būklė",'I',0,"ItemStatusIVDsm");
    SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusIVDsm"); //!!TRANSLATE
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Faktūros būklė",'r',2,"IVInfoIVDsm");
  SpecialMenu("Prijungti aplinkos mokestį",' ',19,"RepaIVsm");
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Pasirašyti",' ',10,"SignIVDsm");
  end;
  SpecialMenu("Pakeisti į bazinę val. 1",' ',14,"SwitchToBase1IVDsm");
  SpecialMenu("Prijungti prie išankstinio",' ',4,"ConnectToPrepayIVDsm");
  SpecialMenu("Perskaičiuoti nuolaidą",' ',11,"RecalcDiscountIVDsm");
  SpecialMenu("Perskaičiuoti svorį ir tūrį",' ',10,"RecalcWeightIVDsm");
  SpecialMenu("Atnaujinti valiutinį kainoraštį",' ',5,"UpdatePricesIVDsm");
  SpecialMenu("Spausdinti kasos pajamas-išlaidas",' ',7,"PrintCashInOutIVDsm");
    if (HasLocalization("PRT")==false) then begin
  SpecialMenu("Spausdinti proforma faktūrą",' ',3,"PrintProformaIVDsm");
    end;
  if (StandardHansa==false) then begin
  SpecialMenu("Spausdinti į fiskalinį spausdintuvą",' ',19,"PrintToFiscPrntIVDsm");
  SpecialMenu("Mokėjimas kortele",' ',22,"CCPayIVDsm");
  SpecialMenu("Keisti dalinius mokėjimus",' ',24,"EditInstalmentIVDsm");
  end;
	if (HasLocalization("EST")) then begin
		SpecialMenu("Persiųsti E-faktūrą",' ',21,"ResendEstEIVDsm");
	end else begin
		SpecialMenu("Persiųsti E-faktūras",' ',21,"ResendEIVDsm");
	end;
  if (HasLocalization("ARG")) then begin
      SpecialMenu("Persiųsti Argentinos el. faktūrą",'n',17,"SendArgEInvIVDsm");
    SpecialMenu("Retrive CAE/CAEA",'',17,"ConsultarArgEInvIVDsm");
  end;
  if (HasLocalization("MEX")) then begin
      SpecialMenu("Send Mexican E-Invoice",'e',17,"SendMexEInvIVDsm");
    end;
    if (HasLocalization("BRA")) then begin
    SpecialMenu("Send/Resend Brazilian E-Invoice",' ',27,"SendBraEInvIVDsm");
  end;
    if (HasLocalization("FIN")) then begin
      SpecialMenu("Export Finvoice",' ',28,"ExportFinvoiceIVDsm");
    end;
  SpecialMenu("Atidaryti D/K operaciją",'t',8,"OpenTRFromIV");
	if (StandardHansa==false) then begin
		SpecialMenu("Vadovo nuolaidos perrašymas",' ',24,"MgrsDiscOverrideIVDsm");
		if (HasTaxMatrix) then begin
			SpecialMenu("Atidaryti mok. matricą",' ',25,"TestVatMatrixIVDsm");
		end;
	end;
    if (HasApprovals) then begin
      SpecialMenu("Užklausos patvirtinimas",' ',6,"IVSendforAcceptanceIVDsm"); //!!TRANSLATE
      SpecialMenu("Atšaukti užklausos patvirtinimą",' ',2,"CancelApprovalRequestDsm"); //!!TRANSLATE
    end;
	SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Sukurti veiklą",'c',9,"CreateActFromIVDsm");
  end;
  SpecialMenu("Sukurti kasos pajamas",' ',1,"DoCLInFromIVD");
  SpecialMenu("Sukurti kredito pažymą",' ',20,"CreateCreditNoteIVDsm");
  if (StandardHansa==false) then begin
  SpecialMenu("Sukurti kredito sutartį",' ',25,"CreateCredManIVsm");
  end;
  SpecialMenu("Sukurti kontraktą",' ',13,"COFromIVDsm");
  if (StandardHansa==false) then begin
  SpecialMenu("Sukurti koregavimo faktūrą",' ',16,"CorrectionIVsm");
    SpecialMenu("Sukurti kredito įrašą",' ',20,"CreateDebitNoteIVDsm");
  SpecialMenu("Sukurti EDI faktūrą",' ',9,"DoEDIInvFromIVD");
  end;
  SpecialMenu("Sukurti el. laišką",'m',23,"CreateMailFromIVDsm");
  if (HasLocalization("UKR")) then begin
  SpecialMenu("Sukurti pirmą atvejį",' ',18,"FirstEventIVDsm");
  end;
  if (StandardHansa==false) then begin
  	SpecialMenu("Sukurti dalinių mokėjimų įplaukas",' ',6,"CreateInstalmentsIVDsm");
    if (HasLocalization("HRV,POL,RUS,SRB,SLV,UKR")) then begin
  		SpecialMenu("Sukurti PVM koregavimą pard. kn.",' ',17,"VATCorrectionIVsm");
    end;

//  SpecialMenu("GSXAutoEnrollmentIVDsm",'w',26,"GSXAutoEnrollmentIVDsm");

//  SpecialMenu("TESTSendArgEInvoiceFECAESolicitar",' ',25,"TESTSendArgEInvoiceFECAESolicitar");
//  SpecialMenu("Test Mex E-Invoices",'1',0,"TestMexEInvoices");
    end;
    SpecialMenu("Pridėti pirkėją",' ',0,"AddCustomerIVDsm");
    SpecialMenu("Pridėti prekę",' ',0,"AddItemIVDsm");
  end;

end else begin
  date td;
  integer acnt,wn;
  longint bm,lt,rt,tp,page;
  real h,h2,h3,h4,v;
  record IVVc IVr;
  record LocalMachineBlock LMb;
  record POSButtonsVc POSBr;
  string 255 bc1,bc2,compname,lmc,nr,sessdesc,sm;
  time tt;

  BlockLoad(LMb);

    //StopAlert(LMb.POSButtonGroup);

    wn = CurWindow;
    GetScreenSize(wn,tp,lt,bm,rt);
    switch (GuiType) begin
      case kGuiCocoa:
        bm = bm - 80;
      case kGuiWindowsDesktop:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiGDI:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiWPF:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
    end;

    page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
    if (page<1) then begin
      page = 1;
    end;
    //stopalert("about to call ReadPOSButtons, page:" & page);
  	ReadPOSButtons("IVDClass",LMb.POSButtonGroup,page,bc1,bc2,compname,POSBr);  
    SetWRect(lt,tp,rt,bm);
//    AbsoluteWindowSize;
    if (TestEnablerFile("EnNoFullscreenWindow")==false) then begin
      FullscreenWindow;
    end;
    BrowseButtons(false);
    Sizeable(-1,-1,0,0);
    BrowseButtons(false);
    DynamicWindow;
    UseView(IVVc);
    ActiveFieldOnNew("ivcashcommand");
    if (GuiType!=kGuiiPhone) then begin
      ToolBar;
//      PushButton(-340,5,-340 + 34,5+18,ToolPasteSpec,"v");
      EndToolBar;
    end;

    v = 20;
    h = -300; h2 = -150; h3 = -70; h4 = -10;

    wn = CurWindow;
    if (wn>0) then begin
      switch (GetWindowClass(wn)) begin
        case "IVDClass":
          GetWindowRecord(wn,IVr);
      end;
    end;
    if (GuiType==kGuiiPhone) then begin
      if (TouchScreenLookVertical) then begin
        v = 20;
        h = -300; h2 = -150; h3 = -70; h4 = -10;

        td = IVr.TransDate;
        if (blankdate(td)) then begin td = CurrentDate; end;
        tt = IVr.TransTime;
        if (blanktime(tt)) then begin tt = CurrentTime; end;
        lmc = IVr.MachineName;
        if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
        sm = IVr.SalesMan;
        if (blank(sm)) then begin sm = CurrentUser; end;
        nr = "Faktūra: ";
        if (IVr.SerNr>0) then begin
          nr = nr & IVr.SerNr;
        end;

        if (IsEnterprise) then begin
          if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
            sessdesc = "POS Sesija atidaryta";
          end else begin
            sessdesc = "*** POS Sesija uždaryta ***";
          end;
        end;

        DisplayRecordDetails_LIT(10,-100,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,
          IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,
          IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","",
          "",blankval,sessdesc,true,IVr.OfficialSerNr,
          IVr.TaxAdminServSeal);

        SoftEditFieldTLX(360,-120,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
        SoftEditFieldTLX(360,-80,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);

        SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);

        DrawPOSInterface_LIT(bc1,bc2,POSBr,acnt,"",100);
      end else begin

        v = 20;
        h = -300; h2 = -150; h3 = -70; h4 = -10;

        td = IVr.TransDate;
        if (blankdate(td)) then begin td = CurrentDate; end;
        tt = IVr.TransTime;
        if (blanktime(tt)) then begin tt = CurrentTime; end;
        lmc = IVr.MachineName;
        if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
        sm = IVr.SalesMan;
        if (blank(sm)) then begin sm = CurrentUser; end;
        nr = "Faktūra: ";
        if (IVr.SerNr>0) then begin
          nr = nr & IVr.SerNr;
        end;

        if (IsEnterprise) then begin
          if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
            sessdesc = "POS Sesija atidaryta";
          end else begin
            sessdesc = "*** POS Sesija uždaryta ***";
          end;
        end;

        DisplayRecordDetails_LIT(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,
          IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,
          IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","",
          "",blankval,sessdesc,true,IVr.OfficialSerNr,
          IVr.TaxAdminServSeal);


        if (bm<650) then begin
          SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);
          SoftEditFieldTLX(360,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0);
        end else begin
          SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
          SoftEditFieldTLX(360,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);
        end;

        SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);

        DrawPOSInterface_LIT(bc1,bc2,POSBr,acnt,"",100);
      end;
      BottomBar;
    end else begin
      td = IVr.TransDate;
      if (blankdate(td)) then begin td = CurrentDate; end;
      tt = IVr.TransTime;
      if (blanktime(tt)) then begin tt = CurrentTime; end;
      lmc = IVr.MachineName;
      if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
      sm = IVr.SalesMan;
      if (blank(sm)) then begin sm = CurrentUser; end;
      nr = "Faktūra: ";
      if (IVr.SerNr>0) then begin
        nr = nr & IVr.SerNr;
      end;

      if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
        sessdesc = "POS Sesija atidaryta";
      end else begin
        sessdesc = "*** POS Sesija uždaryta ***";
      end;

      // StopAlert("IsSessionOpen(" & IVr.MachineName & "," & IVr.DrawerCode & "," & IVr.TransDate & "," & IVr.TransTime & "); -> " & sessdesc);

      DisplayRecordDetails_LIT(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","","",blankval,sessdesc,true,IVr.OfficialSerNr,IVr.TaxAdminServSeal);

      if (bm<650) then begin
      SoftEditFieldTLX(420,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(420,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0); //!!TRANSLATE
    end else begin
      SoftEditFieldTLX(520,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0); //!!TRANSLATE
      SoftEditFieldTLX(520,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0); //!!TRANSLATE
      end;

      switch (LMb.POSButtonsPosition) begin
        case kPOSButtonsPositionLeft:
          SoftEditField(110,-22,200,"Prekė/Komanda"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
        case kPOSButtonsPositionRight:
          SoftEditField(-260,-22,200,"Prekė/Komanda"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
      end;
    SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);
    DrawPOSInterface_LIT(bc1,bc2,POSBr,acnt,"",100);
    BottomBar;
  end;
end;
  EndWindow;
end;

window AccTClass:3
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,h2,h3,h4,h5,v,vm,vs;
  if (HasModNL) then begin
    if (HasModSL==false) then begin
      WindowBegin("Sąskaitų panaudojimas pard. kn.",AccTClass,CGSbl,-);
    end else begin
  		WindowBegin("Sąskaitų panaudojimas pard. kn.",AccTClass,CGSbl,-);
    end;
  end else begin
    WindowBegin("Faktūrų parametrai",AccTClass,CGSbl,-);
  end;
  SetBlid(AccBlock);
  SetWRect(20,80,885,450);
  if (IsEnterprise) then begin
    Sizeable(-1,-1,0,0);
		vs = 20; h = 160; f = 70; h2 = 400; h3 = 250; h4 = 535; h5 = 520;
		Tile(0,30,false,"",ARAcc);
		TileButton(1,"Skolos");
		TileButton(2,"PVM ir Mokesčiai");
		TileButton(3,"Kursas");
		TileButton(4,"Pardavimai");
		TileButton(5,"Kreditas");
		Tile(1,250,false,"1",ARAcc);
		EditField(h,vm=(v=6),f,"Pirkėjų skolos",Normal,ARAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Nemokūs debitoriai",Normal,BadARAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Grynieji",Normal,CashAcc,false,AccSClass);
		EditField(h,v+=vs,f,"POS grąža",Normal,CashBackAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Avanso sąsk.",Normal,OnAccAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Apvalinimo pelnas",Normal,RndAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Apvalinimo nuostolis",Normal,RndLossAcc,false,AccSClass);
    if (StandardHansa==false) then begin
			EditField(h,v+=vs,f,"Komisiniai",Normal,CommisionAcc,false,AccSClass);
			EditField(h,v+=vs,f,"Faktūros nuolaida",Normal,DiscountAcc,false,AccSClass);
    end;
    v = vm;
    if (HasObjects) then begin
      CheckBox(h3,v,0,"Objektai skolininkų atsisk. sąsk.",ARUseObj); v = v + 16;       //!!TRANSLATE
    end;
    CheckBox(h3,v,0,"Tikrinimas",SLAccTest); //!!TRANSLATE
		CheckBox(h3,v+=16,0,"Faktūros atnaujina sandėlį",InvUpdStock);
		CheckBox(h3,v+=16,0,"Faktūros info D/K operacijoje",ARonTR);
		CheckBox(h3,v+=16,0,"Atnaujinti baz. val. išrašant faktūras",UpdBaseRate);
		CheckBox(h3,v+=16,0,"Atnaujinti Užsienio val. išrašant faktūras",UpdForeginRate);
		CheckBox(h3,v+=16,0,"Neimti antraštės objekto prie pard. sąsk.",SkipObjectsOnIVFromHeader);
		CheckBox(h3,v+=16,0,"Priverstinė chronologija faktūroms",ChronologyforInvNo);
		CheckBox(h3,v+=16,0,"Neleisti įvesti kredito pažymų be numerių",CredInvWithNo);
		CheckBox(h3,v+=16,0,"Naudoti kredito pard. sąsk.",CredSalesAccs);
		CheckBox(h3,v+=16,0,"Išankstinių apmokėjimų kontrolė",DemandPPNo);
		CheckBox(h3,v+=16,0,"Unikalūs išankst. mok. nr.",ForceUniquePP);
		CheckBox(h3,v+=16,0,"Atskira eilutė įplaukai banko sąskaitoje",IPTransBankRowPerCU);
		if (StandardHansa==false) then begin
			CheckBox(h3,v+=16,0,"Skaičiuoti apmokėjimo datą iš paslaugos atlikimo datos",DueDateBasedOnServDelDate);
		end;
		CheckBox(h3,v+=16,0,"Prijungti kredito išrašą prie pirkimo faktūros",ConnectCreditNotetoVI);
		CheckBox(h3,v+=16,0,"Reikalauti #Kredito pažymos# priežasties",RequireCreditNoteReason);
		CheckBox(h4,v=vm,0,"Objektai banko sąsk.",ObjectonBankAcc);
		if (StandardHansa==false) then begin
			CheckBox(h4,v+=16,0,"Skaičiuoti nuolaidą",BookedDiscount);
			CheckBox(h4,v+=16,0,"Neleisti gauti daugiau nei nur. faktūr.",NoOverPayIV);
//      CheckBox(h4,v+=16,0,"Do not Print rows with Negative Sums to Fiscal Printer",DonotFPPrintRowsNegativeSum); //  not used anywhere in the rest of the code
		end;
		CheckBox(h4,v+=16,0,"Neleisti neigiamų kiekių pardavimuose",DisallowNegativeTotalsonSales);
		CheckBox(h4,v+=16,0,"Neleisti neigiamų sumų matr.eilutėse parduodant",DisallowNegativeRowSumsonSales);
	//    CheckBox(h4,v+=16,0,"Allow Receipt Date before Invoice Date",IPbeforeIVDate);
	//this lovely checkbox leads to totoaly incorect SL and open inv cust stat and all other reports in SL
	//comenting out
		if (HasLocalization("BOL")) then begin
			CheckBox(h4,v+=16,0,"Disallow create invoice if the Dosage Key has expired",CheckDosageKey);
		end;
		CheckBox(h4,v+=16,0,"Kredito pažyma negali viršyti faktūros vertės",CreditIVTotNotExceedInvCheck);
		Tile(2,290,false,"2",VATBAcc);
		EditField(h,vm=(v=6),f,"PVM sąsk.",Normal,VATBAcc,false,AccSClass);
		if (StandardHansa==false) then begin
			EditField(h,v+=vs,f,"Sutart. nuolaidos PVM",Normal,VATERAcc,false,AccSClass);
		end;
		EditField(h,v+=vs,f,"Išankstinių apmokėjimų PVM",Normal,OnAccVATAcc,false,AccSClass);//as it was in 4.2
	//  EditField(h,v+=vs,f,"Išankstinių apmokėjimų PVM",Normal,PreIPVATAcc,false,AccSClass);//no code using it
		EditField(h,v+=vs,f,"PVM pard. sąsk.",Normal,SalesVAT,false,AccSClass);
		EditField(h,v+=vs,f,"Mokesčiai pard. sąsk.",Normal,SalesTAX,false,AccSClass);
		if (StandardHansa==false) then begin
			EditField(h,v+=vs,f,"Vidinė PVM sąsk.",Normal,IntARAcc,false,AccSClass);
		end;
		EditField(h,v+=vs,f,"Mokesčių sąsk.",Normal,Tax1TmpAcc,false,AccSClass);
		ButtonFrame(h3,v=vm+10,380,3,"Pap. mok.");
		RadioButton(h3,v   ,0,0,"Skaičiuoti pap. mok. nuo sumos su PVM",NoTAXonVAT);
		RadioButton(h3,v+=16,1,0,"Skaičiuoti pap. mok. nuo sumos be PVM",NoTAXonVAT);
		RadioButton(h3,v+=16,2,0,"Skaičiuoti pap. mok. nuo sumos be PVM ir skaič. PVM nuo pap. mok.",NoTAXonVAT);

		ButtonFrame(h3,vm=(v+=40),165,3,"Bazinė kaina");
		RadioButton(h3,v    ,0,0,"Be PVM",BasePriceInclVAT);
		RadioButton(h3,v+=16,1,0,"Su PVM ir pap. mok.",BasePriceInclVAT);
		RadioButton(h3,v+=16,2,0,"Su PVM",BasePriceInclVAT);

		CheckBox(h4=500,vm,0,"Suma be pap. mok.",TotalwoTAX);

		CheckBox(h3,vm=(v+=24),0,"PVM kodų kontrolė",VATCodeCtrl);
    if (HasLocalization("PRT")==false) then begin
      CheckBox(h3,v+=16,0,"Post Receipt #VAT#",IPBookVAT);
    end;
		if (StandardHansa==false) then begin
			CheckBox(h3,v+=16,0,"Kursų pasikeitimo PVM",BookVATonRateGain);
			CheckBox(h3,v+=16,0,"Kredito pažymos PVM",BookCreditOnPurchAcc);
			CheckBox(h3,v+=16,0,"Skaičiuoti PVM tik mokėjimams",BookVATOnlyFromDownpayment);
			CheckBox(h3,v+=16,0,"Neskaičiuoti PVM sutart. nuolaidai",DiscCashVAT);
		end;
		CheckBox(h3,v+=16,0,"Neperspėti, jei kartojasi PVM mok. kd.",NoWarnOnDupVATnoOnCU);
		CheckBox(h3,v+=16,0,"Neįkelti PVM kodo į įplaukas",NoPasteVATToIP);
		CheckBox(h3,v+=16,0,"Leisti prekėms be kodo priskaičiuoti Tax2",AllowItemWOCommodity);

		CheckBox(h4,v=vm,0,"Objektai PVM sąsk.",VATUseObj);
		if (StandardHansa==false) then begin
			CheckBox(h4,v+=16,0,"Apyvarta su PVM",RevInclVAT);
		end;
		CheckBox(h4,v+=16,0,"Skaičiuoti išankst. mok. PVM",PreIPBookVAT);
    if (StandardHansa==false and HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
      CheckBox(h4,v+=16,0,"Post Inv. #VAT# to #VAT# Corr. A/C",PostIVVATonVATCorr);
    end;
		CheckBox(h4,v+=16,0,"PVM įplaukų nurašymuose",PostWriteOffVAT);
		CheckBox(h4,v+=16,0,"Skaičiuoti percepcijos mok.",CalculatePerceptionTaxes);
		CheckBox(h4,v+=16,0,"#PVM# iš siuntimo adreso",ExportFlagfromDelAddr);
		Tile(3,150,false,"3",CredAcc);
		h2 = 400;
		EditField(h,v=6,f,"Nurašymų pajamos",Normal,CredAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Nurašymų nuostolis",Normal,WriteOffLossAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Kursų apvalinimas",Normal,RateRndOffAcc,false,AccSClass);
		if (StandardHansa==false) then begin
			EditField(h,v+=vs,f,"EMU kursų apvalinimas",Normal,EMURndOffAcc,false,AccSClass);
			EditField(h,v+=vs,f,"EMU kursų nurašymas",Normal,EMUWriteOffAcc,false,AccSClass);
		end;
		EditField(h,v+=vs,f,"Baz. valiutos apvalinimas",Normal,BaseRoundOffAcc,false,AccSClass);
		EditField(h2,v=6,f,"Kursų pas. paj.",Normal,RateGainAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Kursų pas. nuost.",Normal,RateLossAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Banko k. peln.",Normal,BankRateGainAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Banko k. nuost.",Normal,BankRateLossAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Banko mokestis",Normal,ExtraCostAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Forex operacijos sąsk.",Normal,ForexTRAcc,false,AccSClass);
		CheckBox(h,v+=24,0,"Skaičiuoti kursų pas. pajamas/nuostolį įplaukos eilutei",BookRateGainPerIPRow);
		Tile(4,150,false,"4",DomSalesAcc);
		EditField(h,v=6,f,"Viet. pardavimų sąsk.",Normal,DomSalesAcc,false,AccSClass);
		EditField(h,v+=vs,f,VATZoneEditFieldLabelLIT(1) & "Pardavimų sąsk.",Normal,EUSalesAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Ne ES pardavimų sąsk.",Normal,ExpSalesAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Viet. Sutart. nuolaida",Normal,ERebAcc,false,AccSClass);
		EditField(h,v+=vs,f,VATZoneEditFieldLabelLIT(1) & " Sutart. Nuolaida",Normal,EUERebAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Eksportas" & " Sutart. Nuolaida",Normal,ExpERebAcc,false,AccSClass);
		if (StandardHansa==false) then begin
			CheckBox(h,v+=22,0,"Registruoti Kasos pardavimus Fiskalo bloke",CashSalesToFiscalControlUnit);
		end;
	//  EditField(h,v+=vs,f,"Vidaus pardavimai",Normal,IntDomSalesAcc,false,AccSClass);
		EditField(h2,v=6,20,"Viet. PVM kodas",Normal,VATCodeDom,false,VATCodeSClass);
		EditField(h2,v+=vs,20,VATZoneEditFieldLabelLIT(1) & "PVM kodas",Normal,VATCodeEU,false,VATCodeSClass);
		EditField(h2,v+=vs,20,"ES PVM kodas su PVM",Normal,VATCodeEUWithVAT,false,VATCodeSClass); //EBS
		EditField(h2,v+=vs,20,"Ne ES PVM kodas",Normal,VATCodeExp,false,VATCodeSClass);
		if (HasTaxMatrix) then begin
			EditField(h2=540,v=6,50,"Viet. mokesčių šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
			EditField(h2,v+=vs,50,VATZoneNameLIT & "Mokesčių šabl.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
			EditField(h2,v+=vs,50,"Eksp. mokesčių šabl.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
		end;
		Tile(5,160,false,"5",CredDomSalesAcc);
		h2=400;
		StaticText(h,v=12,"Kredito pažymos",false);
		EditField(h,vm=(v+=16),55,"Viet. pard. sąsk.",Normal,CredDomSalesAcc,false,AccSClass);
		EditField(h,v+=vs,55,VATZoneEditFieldLabelLIT(1)  & "Pardavimų sąsk.",Normal,CredEUSalesAcc,false,AccSClass);
		EditField(h,v+=vs,55,"Ne ES pard. sąsk.",Normal,CredExpSalesAcc,false,AccSClass);
		EditField(h,v+=vs,55,"Return account",Normal,POSRetAcc,false,AccSClass); // EVS: DOL-89
		EditField(h2,v=vm,20,"Viet. PVM kodas",Normal,CredVATCodeDom,false,VATCodeSClass);
		EditField(h2,v+=vs,20,VATZoneEditFieldLabelLIT(1) & "PVM kodas",Normal,CredVATCodeEU,false,VATCodeSClass);
		EditField(h2,v+=vs,20,"Ne ES PVM kodas",Normal,CredVATCodeExp,false,VATCodeSClass);
		if (StandardHansa==false) then begin
			CheckBox(h,v+=42,0,"Nenaudoti autom. operacijų kredito pažymose",NoAutAutoTransOnCredIV); //edit
			CheckBox(h,v+=16,0,"Aut. nustatyti žymę 'Abejotina' kredito faktūroms",SetDisputedFlagsOnCredIV);
		end;
		CheckBox(h,v+=16,0,"Neigiamos sumos spausdinant kredito faktūrą",PrintNegAmountsCredNote);
  end else begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      SetWRect(20,80,520,300);
      vs = 20; h = 130; f = 70; h2 = 260; h3 = 420;
      if (HasMultiCurrency) then begin
        h = 150;
      end;
			EditField(h,vm=(v=6),f,"Pirkėjų skolos",Normal,ARAcc,false,AccSClass);
			if (HasLocalization("PRT,ZWE")) then begin
				EditField(h,v+=vs,f,"Bad Debtors",Normal,BadARAcc,false,AccSClass);
			end;
			EditField(h,v+=vs,f,"Grynieji",Normal,CashAcc,false,AccSClass);
			EditField(h,v+=vs,f,"Apvalinimas",Normal,RndAcc,false,AccSClass);
	//      EditField(h,v+=vs,f,"Bank Fee",Normal,ExtraCostAcc,false,AccSClass); // no fee option in Std
			if (HasModSL) then begin
				EditField(h,v+=vs,f,"Nurašymai",Normal,CredAcc,false,AccSClass);
	//        EditField(h,v+=vs,f,"On Account",Normal,OnAccAcc,false,AccSClass);//not in stdacc
			end;
			if (HasMultiCurrency) then begin
				EditField(h,v+=vs,f,"Baz. val. apval.",Normal,BaseRoundOffAcc,false,AccSClass);
				EditField(h,v+=vs,f,"Kursų pajamos",Normal,RateGainAcc,false,AccSClass);
				CheckBox(h2,v,0,"Kursų paj./nuost. per įplaukos eilutė",BookRateGainPerIPRow);
				EditField(h,v+=vs,f,"Kursų nuostolis",Normal,RateLossAcc,false,AccSClass);
			end;
	/*
		if (HasMultiCurrency) then begin
		EditField(h,v+=vs,f,"Domestic Sales A/C",Normal,DomSalesAcc,false,AccSClass);
		EditField(h,v+=vs,f,"EU Sales A/C",Normal,EUSalesAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
		EditField(h3,v=6,20,"Domestic #VAT Code#",Normal,VATCodeDom,false,VATCodeSClass);
		EditField(h3,v+=vs,20,"EU #VAT Code#",Normal,VATCodeEU,false,VATCodeSClass);
		EditField(h3,v+=vs,20,"Export #VAT Code#",Normal,VATCodeExp,false,VATCodeSClass);
		end else begin
	*/
      if (IsBooks and IsStandardProduct==false) then begin
				EditField(h,v+=vs,f,"#VAT# (A/C)",Normal,VATBAcc,false,AccSClass);
				EditField(h,v+=vs,f,"Bank Fee",Normal,ExtraCostAcc,false,AccSClass);
				EditField(h,v+=vs,f,"On Account",Normal,OnAccAcc,false,AccSClass);
      end;
      if (HasSettlementDiscount) then begin
				EditField(h,v+=vs,f,"Settl. Discount",Normal,ERebAcc,false,AccSClass);
      end;
      if (HasRussianPrepayment) then begin
				EditField(h,v+=vs,f,"Avanso PVM",Normal,OnAccVATAcc,false,AccSClass);
      end;
      if (HasSettlementDiscount) then begin
				EditField(h,v+=vs,f,"Settl. Discount #VAT#",Normal,VATERAcc,false,AccSClass);
      end;
      if (IsStandardProduct) then begin
				EditField(h,v+=vs,f,"Pard. sąsk.",Normal,DomSalesAcc,false,AccSClass);
				if (HasVATZone==false) then begin
          if (HasTaxMatrix) then begin
            EditField(h,v+=vs,20,"Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
          end else begin
            EditField(h,v+=vs,20,"PVM kd.",Normal,VATCodeDom,false,VATCodeSClass);
          end;
        end;
      end;
  //  end;
      if (HasRussianPrepayment or HasPrepayments) then begin
        EditField(h,v+=vs,f,"Avanso sąsk.",Normal,OnAccAcc,false,AccSClass);
      end;
			if (HasLocalization("PRT")) then begin
				StaticText(h,v+=48,"Kredito pažymos",false);
				CheckBox(h,v+=14,0,"Naudoti kredito pard. sąsk. ir PVM kd.",CredSalesAccs);
				EditField(h,v+=24,55,"Pard.",Normal,CredDomSalesAcc,false,AccSClass);
				EditField(h,v+=vs,20,"Vietinis PVM kd.",Normal,CredVATCodeDom,false,VATCodeSClass);
			end;
			ButtonFrame(h2,v=vm+16,120,2,"Bazinė kaina");
			RadioButton(h2,v,0,0,"Be PVM",BasePriceInclVAT);
			RadioButton(h2,v+=16,2,0,"Su PVM",BasePriceInclVAT);
      v = v + 24;
			if (HasModIN) then begin
				CheckBox(h2,v,0,"Faktūros atnaujina sandėlį",InvUpdStock); v = v + 16;
			end;
			if (HasLocalization("HRV")) and (HasRussianPrepayment) then begin
				CheckBox(h2,v,0,"Post Receipt #VAT#",IPBookVAT); v = v + 16;
				CheckBox(h2,v,0,"Post Prepayment #VAT#",PreIPBookVAT); v = v + 16;
			end;
			if (HasPrepayments) then begin
				CheckBox(h2,v,0,"Naudoti išankst. apm. numerius",DemandPPNo);  v = v + 16;
				CheckBox(h2,v,0,"Tik unikalūs išankst. apm. numeriai",ForceUniquePP); v = v + 16;
			end;
			if (HasLocalization("PRT")==false) then begin
				CheckBox(h2,v,0,"Skaičiuoti PVM įplaukoje",IPBookVAT); v = v + 16;
			end;
			if (HasVATZone) then begin
        EditField(h,vm=(v+=vs),f,"#Domestic# Sales A/C",Normal,DomSalesAcc,false,AccSClass); //!!TRANSLATE
        EditField(h,v+=vs,f,VATZoneEditFieldLabellit(1) & " pard. sąsk.",Normal,EUSalesAcc,false,AccSClass);
        EditField(h,v+=vs,f,VATZoneEditFieldLabellit(2) & " pard. sąsk.",Normal,ExpSalesAcc,false,AccSClass);
        EditField(h2+100,v=vm,20,"Viet. PVM kd.",Normal,VATCodeDom,false,VATCodeSClass);
        EditField(h2+100,v+=vs,20,VATZoneEditFieldLabellit(1) & " pard. sąsk.",Normal,VATCodeEU,false,VATCodeSClass);
        EditField(h2+100,v+=vs,20,VATZoneEditFieldLabellit(2) & " pard. sąsk.",Normal,VATCodeExp,false,VATCodeSClass);
			end;
		end else begin
			SetWRect(64,80,470,190);
			vs = 20; h = 150; f = 70; h2 = 300; v = 6;
			if (HasTaxMatrix) then begin
				EditField(h,v,f,"Mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
			end else begin
				EditField(h,v,f,"PVM kd.",Normal,VATCodeDom,false,VATCodeSClass);
			end;
      v = v + 42;
      ButtonFrame(h,v,120,2,"Kaina");
      RadioButton(h,v,0,0,"Be PVM",BasePriceInclVAT);
      RadioButton(h,v+=16,2,0,"Su PVM",BasePriceInclVAT);
      if (HasModIN) then begin
        CheckBox(h,v+=32,0,"Faktūros atnaujina sandėlį",InvUpdStock);
      end;
      if (HasModSL and HasLocalization("PRT")==false) then begin
        CheckBox(h,v+=32,0,"Post Receipt #VAT#",IPBookVAT);
      end;
    end;
  end;
  EndWindow;
end;

window StockTakeDClass:5
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs;
  Integer f,flipnr,t;
  Integer icn;

  icn = StringToInt(USetStr(912));
  WindowBegin("Inventorizacija",StockTakeDClass,CGview,-);
  SetWRect(20,80,560,350);
  Sizeable(-1,-1,0,0);
  UseView(StockTakeVc);
  if (false) then begin
    if (GUIType==kGuiAndroid) then begin
      WindowTitleBar(6002,icn,6003,"Inventorizacija");
    end;
    h = 10; h2 = 165;
    vs = 38;
    EditField(h,v=6,145,"Nr.",Normal,SerNr,false,0);
    if (HasMultiLocations) then begin
      EditField(h2,v,145,"Patalpa",Normal,Location,false,LocationSClass);
    end;
    EditField(h,v+=vs,300,"Oper. Data",Normal,TransDate,false,PasteCurDate);
    EditField(h,v+=vs,-10,"Komentaras",Normal,Comment,false,0);
    CheckBox(40,v+=vs,0,"OK",OKFlag);
    EnterSkip(Math);
    v = v + 42;
    MatrixBegin(0,v,-1,-1,-,200);

    MatCell(t=1,10,6,120,19,ArtCode,false,12,patM4black);
    MatCell(t,130,6,280,19,SerialNr,false,12,patM4black);
    MatCell(t,10,26,190,39,Spec,false,12,patM4black);
    MatCell(t,200,26,280,39,Qty,true,12,patM4black);

  //MatCol(1,-340,"Position",0,Position,false,PosSClass);
    InsertRowTest;
    DeleteRowTest;
    EndMatrix;
  end else begin
    if (GUIType==kGuiiPhone) then begin
      Tile(0,130,false,"",SerNr);
    end;
    vs = 20; h2 = 300;
    EditField(h=100,v=6, 82,"Nr.",Normal,SerNr,false,TSerSClass);
    EditField(h2,v,82,"Operacijos data",Normal,TransDate,false,PasteCurDate);
    if (IsEnterprise) then begin
      CheckBox(-100,v,0,"OK",OKFlag);
    end;
    if (HasMultiLocations) then begin
      EditField(h,v+=vs,82,"Patalpa",Normal,Location,false,LocationSClass);
    end;
    EnterSkip(Math);
//  CheckBox(420,v=6,0,"Pakeisti sandėlio likučius į čia suvestus duomenis",SetStockValue); // Still not working properly
//  CheckBox(420,v+=vs,0,"Perrašyti atgaline data",OverrideBackdated); // Still not working properly
    v = v + 42;
    vm = v + 1;
    if (GUIType==kGuiiPhone) then begin
      TileButton(1,"Skaič.");
      TileButton(2,"Komentaras");
      Tile(1,230,false,"",Math);
    end;
    MatrixBegin(4,v,-50,-35,-,200);
    Flip(0); flipnr = flipnr + 1;
    if (HasJewelleryInterface) then begin
      MatCol(1,32,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
      EnterSkip(Quant);
      MatCol(1,130,"Prekė",0,ArtCode,false,INSClass);
      if (HasVarieties) then begin
        MatCol(1,192,"Susk.",0,Qty,true,MATVARINSClass);
      end else begin
        MatCol(1,192,"Susk",0,Qty,true,0);
      end;
      EnterSkip(Qty); //EBS
      if (HasAdvancedStock) then begin
        MatCol(1,254,"Sandėlyje",0,InStock,true,0);
        MatCol(1,314,"Aprašymas",0,Spec,false,0);
      end else begin
        MatCol(1,254,"Aprašymas",0,Spec,false,0);
      end;
    end else begin
      MatCol(1,32,"Prekė",0,ArtCode,false,INSClass);
			//  MatCol(1,94,"Var",0,VARList,false,VARSClass);
			//  MatCol(1,144,"Kiekis",0,Qty,true,0);
      if (HasVarieties) then begin
        MatCol(1,94,"Susk.",0,Qty,true,MATVARINSClass);
      end else begin
        MatCol(1,94,"Susk.",0,Qty,true,0);
      end;
      if (HasAdvancedStock) then begin
        MatCol(1,154,"Sandėlyje",0,InStock,true,0);
        MatCol(1,214,"Aprašymas",0,Spec,false,0);
      end else begin
        MatCol(1,154,"Aprašymas",0,Spec,false,0);
      end;
    end;
    if (IsEnterprise) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      if (HasJewelleryInterface==false) then begin
        MatCol(1,-280,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
      end;
      MatCol(1,-160,"Patalpa",0,Location,false,LocationSClass);
      if (HasModWHM) then begin
        MatCol(1,-100,"Pozicija",0,Position,false,PosSClass);
      end;
      MatCol(1,-40,"Koef.",0,Coefficient,false,0);
      Flip(flipnr); flipnr = flipnr + 1;
			MatCol(1,-125,"Pard.kaina",0,BasePrice,true,0);
			MatCol(1,-40,"Koef.",0,Coefficient,false,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-140,"Plotis",0,UnitXval,true,0);
      MatCol(1,-95,"Aukštis",0,UnitYval,true,0);
      MatCol(1,-50,"Gylis",0,UnitZval,true,0);
    end;
    DeleteRowTest;
    EndMatrix;
    vs = 20; v=vm;

    if (flipnr>2) then begin
      for (f=1;f<flipnr;f=f+1) begin
        VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
        v = v + vs;
      end;
    end;
    if (GUIType==kGuiiPhone) then begin
      Tile(2,230,false,"",Comment);
    end;
    if (IsEnterprise==false) then begin
      CheckBox(20,-30,0,"OK",OKFlag);
    end;
    EditField(h=150,-30,-35,"Komentaras",Normal,Comment,false,0);
    if (IsEnterprise) then begin
      SpecialMenu("Įstatyti dabartinė savikainą",' ',1,"StockTakeFillFIFODsm");
      SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
      SpecialMenu("(-",' ',1,"");
      SpecialMenu("Preks paieäka lang",' ',1,"DOLFindItemInWinDsm"); // EVS: DOL-126
  //  SpecialMenu("Import Data from Digitag",'f',1,"StockTakeDigitagDsm");
    end;
  end;
  EndWindow;
end;

window RetPUDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  Integer tilenr,f,flipnr;
  string 255 label;
  Integer pos;

  WindowBegin("Tiekėjui grąžintos prekės",RetPUDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(RetPUVc);
  FormName(RetPurchaseForm);
  Tile(0,74,false,"",SerNr);
  v = 6; vs = 20;
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Tiekėjas",Normal,VECode,false,VESClass); // EVS: DOL-139 ViewOnly -> Normal, added VESClass
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,VEName,false,0); // EVS: DOL-139 ViewOnly -> Normal
  if (HasOfficialSerNr) then begin
  EditField(h,vm=(v+=20),135,"Oficialus Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  v=v+20;
  CheckBox(h4=-100,v=vm,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,v+=20,0,"OK",OKFlag);
  end;
  tilenr = 1;
  TileButton(tilenr,"Terminai"); tilenr = tilenr + 1;
  TileButton(tilenr,"Prekės"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
  end;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Papildomi kaštai"); tilenr = tilenr + 1;
  TileButton(tilenr,"Adresas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Frachtas"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1;
//  TileButton(tilenr,"Extra Costs");
  tilenr = 1;
  Tile(tilenr,70,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 300; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Data",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
  EditField(h1,v+=vs,82,"Patalpa",Normal,Location,false,LocationSClass);
  end;
  if (IsEnterprise) then begin
  EditField(h1,v+=vs,82,"Priežastis",Normal,Reason,false,StandProblemsSClass);
  end;
  EditField(h2,v=vm,125, "Pirk. Užsk. nr.",Normal,PONr,false,0); // EVS: DOL-139 ViewOnly -> Normal
  if (HasRoute) then begin
  EditField(h2,v+=vs,125,"Maršrutas",Normal,Sorting,false,DelRouteSClass);
  end;
  if (HasObjects) then begin
    EditField(h2,v+=vs,125,"Objektai",Normal,Objects,false,ObjSClass);
  end;
  if (HasAdvancedStock) then begin
  ButtonFrame(h3=h3-70,v=16,140,2,"Sumažinti kiekius");
  RadioButton(h3,v,0,0,"Tik gautus",Type);
  RadioButton(h3,v+=16,1,0,"Užsakytus ir gautus",Type);
  end;
  CheckBox(h4,v=vm,0,"Kaina su PVM",InclVAT);
//  CheckBox(h4,v+=vs,0,"Update Stock",UpdStockFlag);
  EnterSkip(Math);
  Tile(tilenr,79,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  if (HasLocalization("PRT")) then begin
    MatrixBegin(4,v,-50,-42,-,199);
  end else begin
  MatrixBegin(4,v,-50,-22,-,199);
  end;
  Flip(0);
  if (HasJewelleryInterface) then begin
    MatCol(1,32,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
    EnterSkip(Quant);
    MatCol(1,130,"Prekė",0,ArtCode,false,INSClass);
    MatCol(1,200,"Qty",0,Quant,true,0); //!!TRANSLATE
    pos = 244;
  end else begin
    MatCol(1,32,"Prekė",0,ArtCode,false,INSClass);
  MatCol(1,120,"Kiekis",0,Quant,true,0);
    pos = 174;
  end;
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,pos,"Aprašymas",0,Spec,false,0);
  if (HasJewelleryInterface) then begin
    MatCol(1,-250,"Location",0,Location,false,0); //!!TRANSLATE
  end;
  if (HasAdvancedStock) then begin
    MatCol(1,-180,"Tiek. prekės nr.",0,VEItemCode,false,0);
  end;
  MatCol(1,-50,"Koef.",0,Coefficient,true,0);
  if (HasModNL or HasObjects) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,pos,"Aprašymas",0,Spec,false,0);
    if (HasModNL) then begin
  MatCol(1,-190,"Savik. sąsk.",0,CostAcc,false,0);
  MatCol(1,-130,"Pirk. sąsk.",0,CredAcc,false,0);
    end;
    if (HasObjects) then begin
  MatCol(1,-60,"Objektai",0,Objects,false,0);
    end;
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,pos,"Aprašymas",0,Spec,false,0);
  if (HasMultiLocations) then begin
  MatCol(1,-360,"Patalpa",0,Location,false,0);
  end;
    if (HasAdvancedStock) then begin
  MatColTL(1,-300,"GR CostPrice",0,-1,Normal,-1,PUCostPrice,false,0); // EVS: DOL-139 ViewOnly -> Normal
  if (StandardHansa==false) then begin
  MatColTL(1,-220,"Kainos var.",0,-1,Normal,-1,VarianceAmount,false,0); // EVS: DOL-139 ViewOnly -> Normal
  end;
  end;
  MatCol(1,-160,"FIFO",0,FIFO,true,0);
  MatCol(1,-90,"Eil. FIFO",0,FIFORowVal,true,0);
  if (HasAdvancedStock) then begin
  Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,pos,"Aprašymas",0,Spec,false,0);
  if (HasPositions) then begin
  MatCol(1,-300,"Padėtis",0,PosCode,false,PosSClass);
  end;
  if (HasSerialNumbers) then begin
  MatCol(1,-235,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-135,"Plotis",0,UnitXval,true,0);
  MatCol(1,-90,"Aukštis",0,UnitYval,true,0);
  MatCol(1,-45,"Gylis",0,UnitZval,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,164,"Aprašymas",0,Spec,false,0);
  MatCol(1,-260,"PG Nė.",0,PUNr,false,PUSClass);
  MatCol(1,-190,"PG Eil.",0,PURow,false,0);
  MatCol(1,-130,"PU Nr.",0,PONr,false,POSClass);
  MatCol(1,-60,"PU Eil.",0,OrdRow,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-420,"Frachtas",0,ShipCost,true,0);
  MatCol(1,-360,"Muitas",0,CustomsCost,true,0);
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Kaštai 1";end;
  MatCol(1,-300,label,0,RowCost1,false,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Kaštai 2";end;
  MatCol(1,-240,label,0,RowCost2,false,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Kaštai 3";end;
  MatCol(1,-180,label,0,RowCost3,false,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Kaštai 4";end;
  MatCol(1,-120,label,0,RowCost4,false,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Kaštai 5";end;
  MatCol(1,-60,label,0,RowCost5,false,0);
  end;
  DeleteRowTest;
  InsertRowTest;
  RowMenuBegin("");
  if (HasQualityControl) then begin
    RowMenuItem(0,"Kokybės kontrolė",'u','u',0,"QualConFromRetPUDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;/* 28 */
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;

//  CheckBox(20,-20,0,"OK",OKFlag);
//  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  if (HasLocalization("PRT")) then begin
    EditField(-450,-40,70,"Freight",Normal,ShipCost,true,0); // EVS: DOL-139 ViewOnly -> Normal
    EditField(-300,-40,70,"Customs",Normal,CustomsCost,true,0); // EVS: DOL-139 ViewOnly -> Normal
    EditField(-130,-40,70,"TOTAL",Normal,SumCostPrice,true,0); // EVS: DOL-139 ViewOnly -> Normal
    EditField(-450,-20,150,"Tax Auth. Approval",Normal,TaxAdminServSeal,false,0);
//    SoftEditField(120,-20,150,"Tax Auth. Approval",Normal,"TaxAdminServSeal",false,0,M4Str,200);
    EditField(-130,-20,70,"Total Qty",Normal,SumQuant,true,0); // EVS: DOL-139 ViewOnly -> Normal
  end else begin
  EditField(133,-20,60,"Viso kiekis",Normal,SumQuant,true,0); // EVS: DOL-139 ViewOnly -> Normal
  EditField(-450,-20,70,"Frachtas",Normal,ShipCost,true,0);  // EVS: DOL-139 ViewOnly -> Normal
  EditField(-300,-20,70,"Muitai",Normal,CustomsCost,true,0); // EVS: DOL-139 ViewOnly -> Normal
  EditField(-130,-20,70,"VISO",Normal,SumCostPrice,true,0); // EVS: DOL-139 ViewOnly -> Normal
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    h1 = 110; vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Bazinė valiuta",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Bazinė valiuta 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (StandardHansa==false) then begin
    Tile(tilenr,120,false,tilenr,Cost1); tilenr = tilenr + 1;
    vs = 20;
    label = UserDefined("AccBlock","PUCost1");
    if (blank(label)) then begin label = "Papildomi kaštai 1";end;
    EditField(h=110,v=6,70,label,Normal,Cost1,false,0); // EVS: DOL-139 ViewOnly -> Normal
    label = UserDefined("AccBlock","PUCost2");
    if (blank(label)) then begin label = "Papildomi kaštai 2";end;
    EditField(h2=295,v,70,label,Normal,Cost2,false,0); // EVS: DOL-139 ViewOnly -> Normal
    label = UserDefined("AccBlock","PUCost3");
    if (blank(label)) then begin label = "Papildomi kaštai 3";end;
    EditField(h,v+=vs,70,label,Normal,Cost3,false,0); // EVS: DOL-139 ViewOnly -> Normal
    label = UserDefined("AccBlock","PUCost4");
    if (blank(label)) then begin label = "Papildomi kaštai 4";end;
    EditField(h2,v,70,label,Normal,Cost4,false,0); // EVS: DOL-139 ViewOnly -> Normal
    label = UserDefined("AccBlock","PUCost5");
    if (blank(label)) then begin label = "Papildomi kaštai 5";end;
    EditField(h,v+=vs,70,label,Normal,Cost5,false,0); // EVS: DOL-139 ViewOnly -> Normal

    EditField(h,v+=vs,70,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
    EditField(h2,v,70,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
    EditField(h,v+=vs,70,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
    EditField(h2,v,70,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);

    ButtonFrame(h3=400,v=16,130,2,"Pap. kaštų skaičiavimas");
    RadioButton(h3,v,0,0,"Vertė",ExtraCostsCalculation);
    RadioButton(h3,v+=16,1,0,"Svoris",ExtraCostsCalculation);
  Tile(tilenr,130,false,tilenr,DelAddr0); tilenr = tilenr + 1;
  EditField(h1,v=6,80,"Adreso kodas",Normal,DelAddrCode,false,DelAddr3SClass);
  EditField(h1,v+=vs,-20,"Siuntimas",Normal,DelAddr0,false,0);
  EditField(h1,v+=vs,-20,"Adresas",Normal,DelAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
  EditField(h1,v=6,80,"Frachto įmonė",Normal,FreightCode,false,FreightCompanySClass);
  EditField(h1,v+=vs,-20,"Pavadinimas",Normal,FreightCompany,false,0);
  EditField(h1,v+=vs,-20,"Reg. nr.",Normal,FreightCompanyRegNr,false,0);
  EditField(h1,v+=vs,-20,"Maš. informacija",Normal,TruckInfo,false,0);
  EditField(h1,v+=vs,-20,"Vairuotojas",Normal,Driver,false,0);
  EditField(h1,v+=vs,-20,"CMR",Normal,CMRText,false,0); // International transporting number
  end;
  Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
  EditField(h1,v=6,-20,"Komentaras",Normal,Comment,false,0);
  EditField(h1,v+=vs,50,"Kalba",Normal,LangCode,false,LangSClass);
  if (HasNumberSeries and HasLocalization("PRT")) then begin
    if (HasOfficialSerNr) then begin
      EditField(h1,v+=vs,100,"Official Ser No. 2",Normal,OfficialSerNr2,false,0);
      EditField(h2,v,135,"Status",Normal,Status,false,SetSClass);
    end;
  end;
/*
  Tile(7,70,false,"7",Cost1);
  vs = 20;
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Papild. kaštai 1";end;
  EditField(h=110,v=6,70,label,Normal,Cost1,false,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Papild. kaštai 2";end;
  EditField(h2=295,v,70,label,Normal,Cost2,false,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Papild. kaštai 3";end;
  EditField(h,v+=vs,70,label,Normal,Cost3,false,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Papild. kaštai 4";end;
  EditField(h2,v,70,label,Normal,Cost4,false,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Papild. kaštai 5";end;
  EditField(h,v+=vs,70,label,Normal,Cost5,false,0);
*/
  if (HasModNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',1,"OpenTRFromRetPU");
  end;
  if (HasLocalization("PRT")) then begin
    if (HasETaxDocuments) then begin
      SpecialMenu("Send to Tax Authorities",'',10,"EShipPRTDsm");
    end;
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Sukurti kredito pažymą",'F',0,"CredVIFromRetPUDsm");
  EndWindow;
end;

window FormDefDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Formos apibrėžimas",FormDefDClass,CGview,-);
  SetWRect(20,80,790,410); //edit
  UseView(FormDefVc);
  v = 6; vs = 20; h = 100;
  if (IsEnterprise) then begin
  EditField(h,v ,80,"Formos šablonas",ViewOnly,repname,false,0);
  EditField(h+=160,v,80,"Specifikacija",ViewOnly,critname,false,0);
  EditField(h+=160,v,80,"Apibrėžimas",ViewOnly,defname,false,0);
  EditField(h+=160,v,80,"Modulis",ViewOnly,modname,false,0);
  end;
//  FORMDEF_LIT;
  MatrixBegin(6,v+=40,-24,-20,FormDefRowType,99);
  h = 24;
  MatCol(1,h,"Seka",0,intdocnr,false,0);
  h = h + 30;
  if (HasLanguages) then begin
    MatCol(1,h,"Kalba",0,LangCode,false,LangSClass);
    h = h + 40;
  end;
  if (IsEnterprise) then begin
    MatCol(1,h,"Vart. Gr.",0,UserGroup,false,AccessSClass);
    h = h + 60;
  end;
  if (HasNumberSeries) then begin
    MatCol(1,h,"Nr. Serija",0,SerNr,false,0);
    h = h + 70;
  end;
  MatCol(1,h,"Formos šablonas",0,FPCode,false,DocSClass);
  h = h + 200;
/* No code behind this */
//  MatCol(1,324,"E-Form",0,EformCode,false,0);
  if (IsEnterprise) then begin
    MatCol(1,h,"Spausdintuvas",0,PrintGroupCode,false,PrintGroupSClass);
  end;
  MatCol(1,-120,"Būklė",0,Typ,false,SetSClass); //edit
  MatCol(1,-60,"nuo",0,FromRow,true,0); // EVS: DOL-129
  MatCol(1,-30,"į",0,ToRow,true,0); // EVS: DOL-129
  EndMatrix;
  EndWindow;
end;

window SRDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,vm,vs;
  Integer f,flipnr;

  WindowBegin("Sandėlio perkainavimas",SRDClass,CGview,-);
  SetWRect(20,80,560,350);
  Sizeable(-1,-1,0,0);
  FormName(SRForm);
  UseView(SRVc);
  vs = 20; h2 = 260; h3 = 410; h4 = 580;
  EditField(h=80,v=6, 82,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(h2,v,82,"Operacijos data",Normal,TransDate,false,PasteCurDate);
  if (HasAdvancedStock) then begin
  EditField(h3,v,100,"Priežastis",Normal,Reason,false,StandProblemsSClass);
  end;
  CheckBox(h4,v,0,"OK",OKFlag); //!!TRANSLATE
  EditField(h,v+=vs,82,"Trumpas kodas",Normal,ACShort,false,ACShortSClass);
  if (HasModNL) then begin
  EditField(h2,v,82,"Pokyčio sąsk.",Normal,SRVarAcc,false,AccSClass);
  end;
  EditField(h,v+=vs,82,"Patalpa",Normal,Location,false,LocationSClass);
  if (HasObjects) then begin
  EditField(h2,v,200,"Objektai",Normal,Objects,false,ObjSClass);
  end;
  EnterSkip(Math);
  v = v + 42;
  vm = v + 1;
  MatrixBegin(4,v,-50,-40,-,500);
  Flip(0);
  MatCol(1,32,"Prekė",0,ArtCode,false,INSClass);
  MatCol(1,94,"Kiekis",0,Qty,true,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasSerialNumbers) then begin
  MatCol(1,144,"Serijinis Nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(1,244,"Aprašymas",0,Spec,false,0);
  end else begin
    MatCol(1,144,"Aprašymas",0,Spec,false,0);
  end;
  MatCol(1,-240,"Sena kaina",0,FIFO,true,0);
  MatCol(1,-160,"Nauja kaina",0,NewFIFO,true,0);
  MatCol(1,-80,"Skirtumas",0,DiffFIFO,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatCol(1,-300,"Iš viso kaina",0,FIFORowVal,true,0);
  MatCol(1,-200,"Nauja iš viso kaina",0,NewFIFORowVal,true,0);
  MatCol(1,-100,"Skirtumas",0,DiffFIFORowVal,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,194,"Aprašymas",0,Spec,false,0);
  if (HasSerialNumbers) then begin
  MatCol(1,-310,"Serijinis Nr.",0,SerialNr,false,SerialNrSClass);
  end;
  if (HasPositions) then begin
		MatCol(1,-200,"Patalpa",0,Location,false,LocationSClass);
		MatCol(1,-100,"Vieta",0,PosCode,false,PosSClass);
  end else begin
    MatCol(1,-100,"Patalpa",0,Location,false,LocationSClass);
  end;
  if (HasModNL or HasObjects) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,194,"Aprašymas",0,Spec,false,0);
    if (HasModNL) then begin
  MatCol(1,-310,"Pokyčio sąsk.",0,SRVarAcc,false,AccSClass);
    end;
    if (HasObjects) then begin
  MatCol(1,-200,"Objektai",0,Objects,false,ObjSClass);
    end;
    if (HasModNL) then begin
  MatCol(1,-100,"Trumpas kodas",0,ACShort,false,ACShortSClass);
    end;
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,194,"Aprašymas",0,Spec,false,0);
  MatCol(1,-350,"Tiek. sąsk. nr.",0,VEInvoiceNr,false,0);
  MatCol(1,-180,"Koef.",0,Coefficient,true,0);
  MatCol(1,-135,"Plotis",0,UnitXval,true,0);
  MatCol(1,-90,"Aukštis",0,UnitYval,true,0);
  MatCol(1,-45,"Gylis",0,UnitZval,true,0);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusSRDsm");
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = vm;/* 28 */
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  EditField(h=290,-40,-52,"Komentaras",Normal,Comment,false,0);
  EditField(h=106,-20,50,"Kiekis viso",ViewOnly,TotQty,true,0);
  EditField(-128,-20,76,"Skirtumas viso",ViewOnly,TotDiff,true,0);
  if (HasModNL) then begin
  SpecialMenu("Atidaryti DK operaciją",'t',1,"OpenTRFromSR");
  end;
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Paskirstyti nuolaidą",'',1,"EBS_AddDisctountSRDsm"); //EBS
  EndWindow;
end;

window VIJRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Pirkimų faktūrų žurnalas",VIJRClass,CGRcW,RcType);
  SetWRect(20,80,470,320);
  v = 6; vs = 20; h = 150;
  Tile(0,20,false,"",f1);
  EditFieldTL(h,v, 150,"Nr.",   M4Str,Normal,30,f1,false,0);
  TileButtons(v,2);
  Tile(1,280,false,"1",f2);
  v = 6;
  PeriodField(h,v,"Periodas");
  EditFieldTL(h,v+=vs ,75,"Tiekėjas",M4UStr,Normal,20,f2,false,VESClass);
  if (HasCategories) then begin
    EditFieldTL(h,v+=vs,50,"Tiekėjo kategorija",M4UStr,Normal,5,f9,false,VGSClass);
  end;
  if (HasContactClassification) then begin
  EditFieldTL(h,v+=20 ,150,"Klasė",M4UStr,Normal,60,f4,false,CClassSClass);
  EditFieldTL(h,v+=20 ,70,"Klasių tipas",M4UStr,Normal,30,f5,false,CTypeSClass);
  end;
  if (HasApprovals) then begin
  EditFieldTL(h,v+=vs ,75,"Pasirašo",M4UStr,Normal,10,f3,false,UserSClass);
  end;
  if (HasObjects) then begin
  EditFieldTL(h,v+=vs,250,"Objektas",M4UStr,Normal,60,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=vs,50,"Objekto tipas",M4UStr,Normal,5,ObjType,false,OTSClass);
  EditFieldTL(h,v+=vs,250,"Objektas eilutėje",M4UStr,Normal,60,f6,false,ObjSClass);
  end;
  if (HasModTS) then begin
  EditFieldTL(h,v+=vs,50,"Projektas",M4UStr,Normal,20,TransStr,false,PRSClass);
  end;
  if (HasSalesman or HasSalesmanBonus) then begin
  	EditFieldTL(h,v+=vs ,100,"Pardavėjas",M4UStr,Normal,10,AccStr,false,UserSClass);
  end;
  if (HasSalesGroup) then begin
  	EditFieldTL(h,v+=vs ,50,"Pardav. grupė",M4UStr,Normal,10,Stext,false,SalesGroupSClass);
  end;
  if (HasAdvancedCRM) then begin
  EditFieldTL(h,v+=vs ,50,"Min. suma",M4Val,Normal,0,vals0,false,0);
  end;
  Tile(2,320,false,"2",d1);
  v = 6;
  if (IsEnterprise and StandardHansa==false) then begin
  // EVS: DOL-157
  //  EditFieldTL(h,v ,100,"Gavimo data",M4Date,Normal,0,d1,false,PasteCurDate);
  EditFieldTL(h,v ,140,"Gavimo data",M4UStr,Normal,21,f12,false,PerSClass);
  // :EVS
  end;
  if (HasModNL) then begin
  EditFieldTL(h=150,v+=vs,100,"Savik.sąsk.",M4UStr,Normal,21,f7,false,AccSClass);
  StaticText(h+110,v+12, "Tik detaliai",false);
  end;
  if (HasAdvancedAccounting) then begin
  EditFieldTL(h=150,v+=vs,100,"Kreditorių sąsk.",M4UStr,Normal,21,f8,false,AccSClass);
  CheckBox(h,v+=vs,0,"Tik preliminariai Užsakytas faktūras",flags[10]);
  CheckBox(h,v+=16,0,"Tik sulaikytas",flags[11]);
  end;
  h = 12; vm=v+50; v=vm;
  if (HasModNL) then begin
    ButtonFrame(h,v,123,4,"Funkcija");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode);
  RadioButton(h,v+=16,1,0,"Detaliai",ArtMode);
  if (IsEnterprise) then begin
  RadioButton(h,v+=16,2,0,"Peržiūra su PVM",ArtMode);
    end;
    if (IsEnterprise or HasLocalization("ITA")) then begin
      RadioButton(h,v+=16,3,0,"Peržiūra PVM %",ArtMode);
  end;
  EndFrame;
  h= h+148; v = vm;
  end else begin
    h = 30;
  end;
  ButtonFrame(h,v,123,2,"Būklė");
  CheckBox(h,v,0,"Nepatvirtintos",flags[1]);
  CheckBox(h,v+=16,1,"Patvirtintos",flags[2]);
  if (HasModNL) then begin
  h=h+148; v =  vm;
  end else begin
    h = h + 177; v =  vm;
  end;
  ButtonFrame(h,v,123,3,"Faktūros tipas");
  CheckBox(h,v,0,"Faktūros",flags[3]);
  CheckBox(h,v+=16,0,"Fakt. už grynus",flags[4]);
  CheckBox(h,v+=16,0,"Kredito pažyma",flags[5]);
  EndWindow;
end;

window LoyalCardNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs;
  WindowBegin("Lojalumo kortelė",LoyalCardNPTSSClass,CGother,RcType);
  UseView(RcVc);
  Modality(kModalityGlobal);
  SetWRect(80,200,550,480);
  vs = 20;
  EditFieldTL(h=110,v=6,150,"Lojalumo kortelės nr.",M4UStr,Normal,20,f1,false,0);
  EditFieldTL(h,v+20,150,"Telefonas",M4UStr,Normal,20,f6,false,0); //EBS

  v3 = 33; vs = 37; h3 = 210; h4 = 400; hm = 280;

  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;

  v = 10;
  ColourPushButton(-450,v+4*vs,-450+2*h2,v+4*vs+v3,"CancelAndOverrideLogout","Nutraukti<BR>F2",20);
  ColourPushButton(-320,v+4*vs,-320+2*h2,v+4*vs+v3,"ProceedLoyalCardNPTSSClass","Tęsti<BR>F1",20); //EBS fixed standart error with lit


  vm = -160; l = 57;
  v = 10;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad1","1_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad2","2_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad3","3_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad4","4_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad5","5_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad6","6_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad7","7_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad8","8_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad9","9_",2);
  v = v+vs;
  h = hm-2; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyDel","Del",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"NPTSPaymentToolKeyPad0","0_",2);
  h = h+l; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolKeyPadPoint",".",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+3*h2,v+v3,"NPTSPaymentToolKeyEnter","Įvesti",2);
  EndWindow;
end;

window GCSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Įstatyti parduotą dovanų čekį",GCSSClass,CGslist,-);
  SetWRect(64,80,509,298);
  SpawnClass(GCSDClass);
  Sizeable(-1,-1,0,0);
  UseView(GCSVc);
  HalPushButton(10,10,100,30,"EBS_CloseWindowBtn","Nutraukti"); //EBS close button
  RecordList(4,47,-21,-39); //EBS edit
  RlColKey(4,4,"Nr.",SerNr,false,ActSerNr);
  RlColKey(94,94,"Data",TransDate,false,ActTransDate);
  RlColKey(170,170,"Komentaras",Comment,false,ActComment);
    RlCol(-70,-70,"Likutis",Balance,true);
  SearchField("Ieškoti");
  EndWindow;
end;

window INSClass:4
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;

  WindowBegin("Įstatyti prekes",INSClass,CGslist,-);
  Sizeable(-1,-1,0,0);
  UseView(INVc);
  SpawnClass(INDClass);
    v = 0;
    if (GuiType==kGuiCocoa) then begin
      SetWRect(210,80,850,498);
      FlowView(0,0,-1,200);
      v = v+200;
    end else begin
      SetWRect(210,80,850,298);
    end;
    HalPushButton(10,v+17,100,v+=47,"EBS_CloseWindowBtn","Nutraukti"); //EBS close button
    RecordList(4,v+17,-21,-39);
    RlColKey(4,4,"Nr.",Code,false,ActCode);
    if (HasItemGroups) then begin
      RlColKey(105,105,"Grupė",Group,false,ActGroup);
      RlColKey(160,160,"Aprašymas",Name,false,ActName);
    end else begin
      RlColKey(105,105,"Aprašymas",Name,false,ActName);
    end;
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        RlColKey(-250,-250,"Alt. kodas",AlternativeCode,false,ActAlternativeCode);
      end else begin
        RlCol(-250,-250,"Barkodas",BarCode,false);
      end;
    end;
    if (HasModIN) then begin
      RlCol(-120,-120,"Baz. kaina",UPrice1,true);
    end else begin
      RlCol(-120,-120,"Kaina",UPrice1,true);
  end;
  if (HasModIN) then begin
    CalculatedColumn(-50,-50,"Sandėlyje","INSClassInStock",true);
  end;
  SearchField("Ieškoti");
  if (HasModIN) then begin
    if (UserCanReport("INInfoRn","",true)) then begin
      SpecialMenu("Prekės būklės ataskaita",'i',0,"INStatusINSsm");
    end;
  end;
  if (IsEnterprise) then begin
    SpecialMenu("Ieškoti",'F',1,"INSearchSsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Alternatyvios prekės",'l',2,"AltItemINSsm");
      SpecialMenu("Kryžminių pardavimų prekės",'r',2,"CrossItemINSsm");
    end;
  end;
//  SearchField("Search");
  EndWindow;
end;

window VARINSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  string 255 label;
  WindowBegin("Įvairovių įvedimas",VARINSClass,CGother,RcType);
  DynamicWindow;//I moved it here bacause of KEYW_DEFINEWINDOWS
  UseView(RcVc);
  SetWRect(164,80,424,264);
  h = 130; vs = 20;
  StaticText(h-8,v=16,"Prekė",true);
  HalPushButton(10,v+=10,-20,v+=40,"EBS_CloseWindowBtn","Nutraukti"); //EBS close button
   label = UserDefined("VARINSClass","1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,f1,false,VARsubSClass);
  end;
  label = UserDefined("VARINSClass","2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,f2,false,VARsubSClass);
  end;
  label = UserDefined("VARINSClass","3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,f3,false,VARsubSClass);
  end;
  label = UserDefined("VARINSClass","4");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,f4,false,VARsubSClass);
  end;
  label = UserDefined("VARINSClass","5");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,f5,false,VARsubSClass);
  end;

/*
  EditField(h,v+=15,50,"1",Normal,f1,false,VARsubSClass);
  EditField(h,v+=20,50,"2",Normal,f2,false,VARsubSClass);
  EditField(h,v+=20,50,"3",Normal,f3,false,VARsubSClass);
  EditField(h,v+=20,50,"4",Normal,f4,false,VARsubSClass);
  EditField(h,v+=20,50,"5",Normal,f5,false,VARsubSClass);
*/

  EndWindow;
end;

window AllCUSClass:4
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,l,v,vs;
  WindowBegin("Įstatyti pirkėją",AllCUSClass,CGslist,-);
  SetWRect(20,80,600,298);
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
  SpawnClass(CUDClass);
  v = 5;  vs = 20; l = 80;
  if (HasStandardCommunicator or HasModPL) then begin
    h = 60; HalPushButton(h,v,h+l,v+vs,"SwitchToVE","Tiekėjai");
  end;
  if (HasStandardCommunicator) then begin
  h=h+l+12; HalPushButton(h,v,h+l,v+vs,"SwitchToContactCU","Visi kontaktai");
  end;
    RecordList(4,42,-21,-39); //EBS edit 17 > 42
  RlColKey(4,4,"Nr.",Code,false,ActCode);
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    RlColKey(96,96,"Trumpas",SearchKey,false,ActSearchKey);
    RlColKey(145,140,"Kat.",CustCat,false,ActGroup);
    RlColKey(190,190,"Pavadinimas",Name,false,ActName);
  end else begin
    RlColKey(81,81,"Kat.",CustCat,false,ActGroup);
    RlColKey(140,140,"Pavadinimas",Name,false,ActName);
  end;
  if (HasDepartments) then begin
    RlColKey(-180,-180,"Skyrius",Department,false,ActDepartment);
  end;
  if (HasStandardCRM==false and HasStandardCommunicator==false and HasStandardOrganizer==false) or (IsEnterprise) then begin
    RlColKey(-80,-80,"PVM mok. kodas",VATNr,false,ActVATNr);
  end;
  SearchField("Ieškoti");
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  if (GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
    if (HasModCRM or HasStandardCRM) then begin
    	if (UserCanReport("CustPSRn","",true)) then begin
  			SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusCUSsm");
      end;
    end;
  end;
  EndWindow;
end;

window NPTSNewCUFieldsTCLass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Laukai naujo pirkėjo sukūrimui",NPTSNewCUFieldsTCLass,CGHbl,HBlRecType);
  SetBlid(NPTSNewCUFieldsBlock);
  SetWRect(20,80,520,300);
  h = 8; v = 20;
  MatrixBegin(h,v,-25,-1,-,99);
//  MatColTL(1,24,"Field Name",0,M4AppCode,Normal,-1,FieldName,false,SetSClass);

  MatCol(1,24,"Lauko pavadinimas",0,FieldName,false,FieldSClass);
  MatCol(1,104,"Tipas",0,EditState,false,SetSClass);
  MatCol(1,184,"Kortelė",0,Label,false,0);
  MatCol(1,284,"Default value",0,DefValue,false,0);
  EndMatrix;
  EndWindow;
end;

window CUNPTDSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer i,rwcnt,btncnt;
  real h,h1,h2,h3,h4,h5,l,v,vs;
  real btnh, btny;
  record NPTSNewCUFieldsBlock NPTSNCUFb;
  row NPTSNewCUFieldsBlock NPTSNCUFbrw;
  record EBS_NewCUFieldsBlock EBS_NewCUFieldsb;
  row EBS_NewCUFieldsBlock EBS_NewCUFieldsrw;
  string 255 label;
  boolean layaltycardaddedf;

  WindowBegin("Kontaktas",CUNPTDSClass,CGview,-);
  Modality(kModalityGlobal);
  WindowHasNoToolbar;
  DynamicWindow;
  SetWRect(20,80,680,441);
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
  v = 6; h = 130; l=223; vs = 40; h1=410; h2 = 340; h3 = 430; h4 = 580; h5 = 460;
  ActiveFieldOnNew("Code"); //dont change, otherwise automatic address lookup helper window wont show automatically //wns
  // EditField(h,v ,   95,"Nr.",Normal,Code,false,TSerSClass);
  EditField(h,v+=vs,h1-h+50,"Pavadinimas",Normal,Name,false,0);

  BlockLoad(NPTSNCUFb);
  rwcnt = MatRowCnt(NPTSNCUFb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(NPTSNCUFb,i,NPTSNCUFbrw);
    label = "";
    switch (NPTSNCUFbrw.FieldName) begin
      case "InvAddr0": label = UserDefined("CUVc","InvAddr0");
      case "InvAddr1": label = UserDefined("CUVc","InvAddr1");
      case "InvAddr2": label = UserDefined("CUVc","InvAddr2");
      case "InvAddr3": label = UserDefined("CUVc","InvAddr3");
      case "InvAddr4": label = UserDefined("CUVc","InvAddr4");
    end;
    if (blank(label)) then begin
      label = NPTSNCUFbrw.Label;
    end;
    if (blank(label)) then begin
      label = NPTSNCUFbrw.FieldName;
    end;
    if NPTSNCUFbrw.EditState != kNPTSNewCUFieldsEditStateViewOnly then begin //EBS
      EditField2(h,v+=vs,h1-h+50,label,NPTSNCUFbrw.EditState,NPTSNCUFbrw.FieldName,false,0);
    end;
  end;

  btny = v + 40;
  BlockLoad(EBS_NewCUFieldsb);
  rwcnt = MatRowCnt(EBS_NewCUFieldsb);
  for(i=0;i<rwcnt;i=i+1)begin
    MatRowGet(EBS_NewCUFieldsb,i,EBS_NewCUFieldsrw);
    Switch (EBS_NewCUFieldsrw.FieldType) begin
      case 1: // loyalty card number
        if !layaltycardaddedf then begin
          label = EBS_NewCUFieldsrw.Label;
          if (blank(label)) then begin
            label = "Loyalty card number";
          end;
          SoftEditField(h,v+=vs,h1-h+50,label,Normal ,"sf_loyaltycard",false,LoyaltyCardSClass,M4Code,20);
          layaltycardaddedf = True;
          btny = v;
        end;
      case 3: //email field
        label = EBS_NewCUFieldsrw.Label;
        if (blank(label)) then begin
          label = "E-mail";
        end;
        SoftEditField(h,v+=vs,155,label,Normal ,"sf_email_first",false,0,M4Str,200);
        StaticText(h+162,v+12,"@",false);
        SoftEditField(h+175,v,155,"",Normal ,"sf_email_second",false,0,M4Str,200);
        btny = v;
      // case 2: // new classification button
      //   if nonblank(EBS_NewCUFieldsrw.DefValue) then begin
      //     label = EBS_NewCUFieldsrw.Label;
      //     if blank(label) then begin
      //       label = EBS_NewCUFieldsrw.DefValue;
      //     end;
      //     ColourPushButtonTag(btnh,btny,-20,btny + 30,"EBS_NewCUClassificationBtn",label,3,EBS_NewCUFieldsrw.DefValue);
      //     btny = btny + 40;
      //   end;
    end;
  end;

  // last add buttons
  btncnt = 1;
  btnh = h;
  rwcnt = MatRowCnt(EBS_NewCUFieldsb);
  for(i=0;i<rwcnt;i=i+1)begin
    MatRowGet(EBS_NewCUFieldsb,i,EBS_NewCUFieldsrw);
    if EBS_NewCUFieldsrw.FieldType==2 begin
      label = EBS_NewCUFieldsrw.Label;
      if blank(label) then begin
        label = EBS_NewCUFieldsrw.DefValue;
      end;
      if mod(btncnt, 2) == 1 then begin
        btny = btny + 40;
        ColourPushButtonTag(btnh,btny,btnh + 160,btny + 30,"EBS_NewCUClassificationBtn",label,3,EBS_NewCUFieldsrw.DefValue);
      end else begin
        ColourPushButtonTag(btnh + 170,btny,btnh + 330,btny + 30,"EBS_NewCUClassificationBtn",label,3,EBS_NewCUFieldsrw.DefValue);
      end;
      btncnt = btncnt + 1;
    end;
  end;

  ColourPushButton(btnh,btny+=40,btnh + 160,btny+30,"SaveCUNPTDSClass","Sukurti",20);
  ColourPushButton(btnh + 170,btny,btnh + 330,btny+30,"CancelCUNPTDSClass","Nutraukti",20);
  EndWindow;
end;

window MainStockTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vm,vs;
  WindowBegin("Sandėlio nustatymai",MainStockTClass,CGSbl,MainStockType);
  SetWRect(64,80,570,630);
  SetBlid(MainStockBlock);
  v = 6; vs = 20; h = 180; h2 = 280; h3 = 330;
  EditField(h,v,150,"Pagrindinė patalpa",Normal,MainStock,false,LocationSClass);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs,150,"Paslaugų patalpa",Normal,DefServiceLoc,false,LocationSClass);
  end;
  EditField(h,v+=vs,150,"Įstatyti klasę",Normal,StartClass,false,DISClass);
  EditField(h,v+=vs,150,"Brokas pat. gr.",Normal,DOL_DefLocGroup,false,LocGrSClass);
//  EditField(h,v+=vs,80,"Leisti koregavimą nuo",Normal,StockCorectAfter,false,PasteCurDate);
//  CheckBox(300,v,0,"RecalcStockNeeded",RecalcStockNeeded);

  CheckBox(h=50,v+=30,0,"Būtina nurodyti patalpą",requireLocation);
  if (StandardHansa==false) then begin
  CheckBox(h,v+=16,0,"Atnaujinti žinomų serij. nr. registrą",updateSVGM);
  end;
  CheckBox(h,v+=16,0,"Automatinis siuntimas paslaugoms ir paprastoms prekėms",DelivPlainItems);
// CheckBox(h,v+=16,0,"Automatinis gavimas paslaugoms ir paprastoms prekėms",RecevPlainItems);
  CheckBox(h,v+=16,0,"Faktūros prieš siuntimą ",AllowInvBeforeShip);
  CheckBox(h,v+=16,0,"Pirkimo faktūros prieš prekių gavimą",AllowInvBeforePU);
  if (StandardHansa==false) then begin
  CheckBox(h,v+=16,0,"Siuntimams automatiškai priskirti siuntos serijinį numerį",DelivSetBatch);
  CheckBox(h,v+=16,0,"Rušiuoti siuntos serijinius numerius pagal galiojimo datą",SortBatchOnBestBefore);
  end;
  CheckBox(h,v+=16,0,"Leisti siuntimo kiekį didesnį negų Užsakyta",DelOrdQty);
  CheckBox(h,v+=16,0,"Neleisti serijinių nr. gavimuose",NoSerOnPU);
  CheckBox(h,v+=16,0,"Pakeisti siuntimo ir perkėlimo datą į patvirtinimo datą",SetDelDateToCurrent);
  CheckBox(h,v+=16,0,"Pirk. užs. nr. tik prekių gavimų eilutėse (ne antraštėje)",PONoOnPURowsOnly);
  CheckBox(h,v+=16,0,"Force Reason",ForceReason);
/*
not possible to store in DB , but anyway, i am sure Karl would have never approved that one
  if (StandardHansa==false) then begin
  CheckBox(h,v+=16,0,"Patvirtinti Serijinius numerius POS faktūrose, neatnaujinančiose sandėlio",ChkSerNumOnNonStockIVcash);
  end;
*/
 // CheckBox(h,v+=16,0,"Nesaugoti svertinio vidurkio patalpai",DontCalcWAPerLoc);
//  CheckBox(h,v+=16,0,"Būtina planuojama pristatymo data",ForcePlanDelDate); moved to plan delivery block
  ButtonFrame(h,vm=(v+=45),210,2,"Sumažinti 'Turima' siuntimuose");
  RadioButton(h,v,0,0,"Siuntimą patvirtinus",UpdateAvailable);
  RadioButton(h,v+=16,1,0,"Siuntimą sukūrus",UpdateAvailable);
  ButtonFrame(h2,v=vm,180,2,"Vnt. konversijos apskaita");
  RadioButton(h2,v,0,0,"Dauginti iš koeficiento",UnitConvCalc);
  RadioButton(h2,v+=16,1,0,"Dalinti iš koeficiento",UnitConvCalc);
  ButtonFrame(h,vm=(v+=45),260,3,"Paslaugos ir paprastos prekės pirkimų Užsakyme");
  RadioButton(h,v,0,0,"Be automatinio gavimo",RecevPlainItems);
  RadioButton(h,v+=16,1,0,"Automatinis gavimas",RecevPlainItems);
  RadioButton(h,v+=16,2,0,"Leisti keisti gautą kiekį",RecevPlainItems);
  ButtonFrame(h3,v=vm,130,3,"Išsiųsti per daug");
  RadioButton(h3,v,0,0,"Leisti",dontAllowOvership);
  RadioButton(h3,v+=16,1,0,"Neleisti",dontAllowOvership);
  RadioButton(h3,v+=16,2,0,"Visada leisti",dontAllowOvership);
  ButtonFrame(h,vm=(v+=45),260,4,"Chronologija sandėlyje");
  RadioButton(h,v,0,0,"Nėra",Chronology);
  RadioButton(h,v+=16,1,0,"Patalpoms",Chronology);
  RadioButton(h,v+=16,2,0,"Visoms patalpoms kartu",Chronology);
  CheckBox(h+10,v+=16,0,"Praleisti nepatvirtintus įrašus",ChronologyOkOnly);
  ButtonFrame(h3,v=vm,130,2,"Gauti per daug");
  RadioButton(h3,v,0,0,"Leisti",dontAllowOverreceive);
  RadioButton(h3,v+=16,1,0,"Neleisti",dontAllowOverreceive);
//  RadioButton(h3,v+=16,2,0,"Gauti visada",dontAllowOverreceive);
  ButtonFrame(h3,v+=45,130,2,"Papild. kaštų skaičiav.");
  RadioButton(h3,v,0,0,"Vertė",ExtraCostsCalculation);
  RadioButton(h3,v+=16,1,0,"Svoris",ExtraCostsCalculation);
  EndWindow;
end;


/*window MasterWClass:7
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real es,h,h2,hfirst,hs,v,v1,v2,voff,vs,ggn,hcount;
  record UserVc Userr;
  string 255 tstr;
  record ModuleBlock Modb;

  BlockLoad(Modb);
  GetCurUser(Userr);

  tstr = "Navigation #Centre#";
  if (HasEMail or HasExternalEMail) then begin
    ggn = 5; 
  end else begin
    ggn = 4; 
  end;
  WindowBegin(tstr,MasterWClass,CGother,RcType); //!!
  DynamicWindow;
  UseView(RcVc);
  if (GuiType==kGuiMetro) then begin
    GroupedGridView;
  end;
  if (StandardHansa and HasInAppsAvailable) then begin
    if (WindowStyle("MasterWClass")==kWindowStyleWindows8Desktop) then begin
      v1 = 87;
    end else begin
      v1 = 65;
    end;
  end else begin
    v1 = 0;
  end;
// Since this had C code adding buttons, I couldn't get this to work in any other way than adding it to the same place in C code.
  if (WindowStyle("MasterWClass")==kWindowStyleWindows8Desktop) then begin
    SetWRect(20,65,778,594+v1);
    ArchiveList(-354,32,-16,-120);
    
    RecordList2(-365,-103,-16,-2,"KPIDefVc");
    v = 5;
    BlackFrame(-354,v+=5,-1,v+=20,"Shortcuts",kFrameShadeNone);
    RlColKey(4,4,"KPI",OwnTitle,false,Sign); // should have "sorting"
    CalculatedColumn(-215,80,"Previous","KPIRowPrevText",true);
    CalculatedColumn(-130,200,"Current","KPIRowCurText",true);
    CalculatedColumnTL(-45,200,"Trend","KPIRowTrend",M4Image,true);
    HalPushButtonWithIcon(-15,-96-23,-3,-96+12,1083,"RecalculateKPIsClientNoArg","");
    h = 20;
    v = 5;
    es = 87;
    vs = 3;
    hfirst = h;
    BlackFrame(h,v+=5,200,v+=20,"Personal Productivity",kFrameShadeNone);
    AddBic(503,504,h,v,ToolCalendar,0,"Calendar");
    AddBic(501,502,h+=es,v,ToolMail,0,"Mailbox");
    AddBic(623,624,h+=es,v,ToolTodo,0,"Tasks");
    AddBic(21423,21424,h+=es,v,ToolConferences,0,"Conferences");
    h = hfirst; v = v + es + vs;
    AddBic(635,735,h,v,ToolResources,0,"Resources");
    if (BuildProductCode!="TBAS" and BuildProductCode!="PAYYAPERP") then begin
      AddBic(739,739,h+=es,v,ToolForms,0,"SmartApps");
    end;
    if (UserCanAction("ViewDashboard",true)) then begin
      if (Modb.Dashboard) then begin
        AddBic(5092,5092,h+=es,v,ToolDashboard,0,"BI");
      end;
    end;
    AddBic(741,742,h+=es,v,ToolAggregator,0,"Feed Reader");
    if (BuildProductCode=="PAYYAPERP") then begin
      AddBic(639,640,h+=es,v,ToolInAppPurchase,0,"Marketplace"); // Marketplace
    end;
    h = hfirst; v = v + es + vs;
    BlackFrame(h,v+=20,200,v+=20,"Navigation:$",kFrameShadeNone);
    AddBic(701+0,700,h,v,ToolRegs,0,"Registers");
    AddBic(737,738,h+=es,v,ToolSetup,0,"Settings");
    AddBic(731,734,h+=es,v,ToolReport,0,"Reports");
    AddBic(625,626,h+=es,v,ToolRoutines,0,"Routines");

    h = hfirst; v = v + es + vs;
    AddBic(718,750,h,v,ToolDocument,0,"Forms");
    AddBic(637,638,h+=es,v,ToolModule,0,"Switch Module");
    AddBic(632,730,h+=es,v,ToolOpen,0,  "Companies");
    if (nonblank(USetStr(915)) or WhiteLabel==false) then begin
      BottomBar;
      WebPage(-365,-94,-1,-1,"","$MASTERBANNER");
    end;
    goto LMasterWClass7_SpecMenu;
  end;

  if (WindowStyle("MasterWClass")==kWindowStyleRedmond) then begin
    es = 6; hs = 40;
    SetWRect(20,65,630+hs,479+11*4+15+v1);
    ScrollBar(-24,16+8+1,-8,-19);
    h = 48; v=40; h2 = 80; hfirst = h;
    if (WhiteLabel==false) then begin
      WebPage(342,0,-1,94,"","$MASTERBANNER");
    end;
    if (HasKPIs) then begin
      RecordList2(343,-82,-16,-1,"KPIDefVc");
      RlColKey(4,4,"KPI",OwnTitle,false,Sign); // should have "sorting"
      CalculatedColumn(-215,80,"Previous","KPIRowPrevText",true);
      CalculatedColumn(-130,200,"Current","KPIRowCurText",true);
      CalculatedColumnTL(-45,200,"Trend","KPIRowTrend",M4Image,true);
    end;
  end else begin
    es = 6; hs = 40;
    if (GuiType==kGuiCocoa or GuiType==kGuiMetro) then begin
      SetWRect(20,65,630+hs,479+11*4+15+v1);
      if (GuiType==kGuiMetro) then begin
        GridViewGroup(ggn,"Shortcuts",kGridViewGroupTypeArchive);
        ggn = ggn - 1;
      end;
      if (WhiteLabel) then begin
        PersonalDesktopHeader(341,-5,-1,24);
        ArchiveList(342,39,-16,-114);
      end else begin
        PersonalDesktopHeader(341,95,-1,118);
        if (StandardHansa==false) then begin
          ArchiveList(342,133,-16,-114);
        end else begin
          ArchiveList(342,133,-16,-1);
        end;
      end;
      if (StandardHansa==false) then begin
        if (GuiType==kGuiMetro) then begin
          GridViewGroup(ggn,"Performance",kGridViewGroupTypeKPI);
        end;
        RecordList2(341,-96,-17,-1,"KPIDefVc");
        RlColKey(4,4,"KPI",OwnTitle,false,Sign); // should have "sorting"
        CalculatedColumn(-215,80,"Previous","KPIRowPrevText",true);
        CalculatedColumn(-130,200,"Current","KPIRowCurText",true);
        CalculatedColumnTL(-45,200,"Trend","KPIRowTrend",M4Image,true);
//        HalPushButtonWithIcon(-16,-106-20,-1,-106+10,607,"RecalculateKPIsClientNoArg","");
      end;

    end else begin
      if (WindowsMode!=0) then begin
        SetWRect(20,65,630+hs,479+11*4+v1);
        ScrollBar(-25,16+8+2,-9,-20);
      end else begin
        SetWRect(20,65,630+hs,479+11*3+v1);
        ScrollBar(-25,16+8+2,-9,-20);
      end;
    end;
    h = 48; v=40; h2 = 80; hfirst = h;
    if (WhiteLabel==false) then begin
      if (IsWebClient) then begin
        WebPage(-365,-128,-1,-35,"","$MASTERBANNER");
      end else begin
        WebPage(342,0,-1,94,"","$MASTERBANNER");
      end;
    end;
    if (GuiType!=kGuiCocoa) then begin
      StaticText(340+hs,19 + 70,"Personal Desktop",false);
    end;
  end;

  ggn = 0;
  if (GuiType==kGuiMetro) then begin 
    if (HasEMail or HasExternalEMail) then begin
      GridViewGroup(ggn,"Personal",kGridViewGroupTypeNormal);
      ggn = ggn + 1;
    end;
  end;
  if (GuiType==kGuiCocoa) then begin
    BlackFrame(0,v-40,342,v+35+es*2+8,"Personal Productivity",kFrameShadeLight);
  end else begin
    BlackFrame(15,v-30+4,312,v+35+es*2+8,"Personal Productivity",kFrameShadeNone);
  end;
  v = v+es;

  voff = 0;

  if (GuiType==kGuiMetro) then begin
    AddBic(503,504,h,v+voff,ToolCalendar,0,"Calendar");
    AddBic(623,624,h+=es,v,ToolTodo,0,"Tasks");
    if (HasEMail or HasExternalEMail) then begin
      AddBic(501,502,h,v+voff,ToolMail,0,"Mailbox");
//      AddBic(21423,21424,h+=h2,v+voff,ToolConferences,0,"Conferences");
    end;
    if (HasWorkflowOverview) then begin
      if (AddBicToMasterWindow(ToolPipeline,h,v,es,vs,hfirst,hcount)) then begin
        AddBic(1100,1101,h+=h2,v,ToolPipeline,0,"Workflow Overview");
      end;
    end;
  end else begin
    AddBic(503,504,h,v+voff,ToolCalendar,0,"Calendar");
    AddBic(501,502,h+=h2,v+voff,ToolMail,0,"Mailbox");
//  AddBic(29017,29018,h+=h2,v+voff,ToolArchive,0,"Desktop");
    AddBic(623,624,h+=h2,v+voff,ToolTodo,0,"Tasks");
    AddBic(21423,21424,h+=h2,v+voff,ToolConferences,0,"Conferences");
  end;
  if (StandardHansa and HasInAppsAvailable) then begin
    h = hfirst; v=v+70;
    AddBic(639,640,h,v,ToolInAppPurchase,0,"Marketplace")
  end;
  h = hfirst; v=v+78+2*es;
  if (StandardHansa==false) then begin
    AddBic(635,735,h,v+voff,ToolResources,0,"Resources");
    if (BuildProductCode!="TBAS" and BuildProductCode!="PAYYAPERP") then begin
      if (GuiType!=kGuiMetro or HasMetroTestFeatures) then begin
        AddBic(739,739,h+=h2,v+voff,ToolForms,0,"SmartApps");
      end;
    end;
    if (UserCanAction("ViewDashboard",true)) then begin
      if (Modb.Dashboard) then begin
        AddBic(5092,5092,h+=h2,v+voff,ToolDashboard,0,"BI");
      end;
    end;
    AddBic(741,742,h+=h2,v+voff,ToolAggregator,0,"Feed Reader");
    if (BuildProductCode=="PAYYAPERP") then begin
      AddBic(639,640,h+=h2,v+voff,ToolInAppPurchase,0,"Marketplace"); // Marketplace
    end;
  end;

  if (GuiType==kGuiMetro) then begin
    GridViewGroup(ggn,"Company",kGridViewGroupTypeNormal);
    ggn = ggn + 1;
    BlackFrame(15,v-30+4,312,v+35+es*2+8,"Company",kFrameShadeNone);
    if (HasEMail or HasExternalEMail) then begin
      AddBic(21423,21424,h+=h2,v+voff,ToolConferences,0,"Conferences");
    end;
    AddBic(637,638,h+=h2,v+voff,ToolModule,0,  "Module:$");
  end;
  v = v+es;
  h = hfirst; v=v+78+2*es;

  if (GuiType==kGuiMetro) then begin
    GridViewGroup(ggn,"Routines",kGridViewGroupTypeNormal);
//    GridViewGroup(ggn,"Routines:$",kGridViewGroupTypeNormal);
    ggn = ggn + 1;
  end;
  BlackFrame(0,v-50,312,v+35,"Navigation:$",kFrameShadeLight);
  AddBic(701+0,700,h,v,ToolRegs,0,"Registers");
  AddBic(737,738,h+=h2,v,ToolSetup,0,"Settings");
  AddBic(731,734,h+=h2,v,ToolReport,0,"Reports");
  AddBic(625,626,h+=h2,v,ToolRoutines,0,"Routines");

  h = hfirst; v=v+78+2*es;
  AddBic(718,750,h,v,ToolDocument,0,"Forms");
  if (GuiType==kGuiMetro) then begin
  end else begin
    AddBic(637,638,h+=h2,v,ToolModule,0,  "Switch Module");
  end;
  AddBic(632,730,h+=h2,v,ToolOpen,0,  "Companies");


LMasterWClass7_SpecMenu:;
  if (HasMetroTestFeatures) then begin
    SpecMenuGroup("Add Shortcut",kSpecMenuGroupTypeMenuInBottomBarLeft,4306);
  end;
  if (GuiType!=kGuiCocoa) then begin
    SpecMenuItem("Attach File",'a',mOpsMenuAttachFile);
    SpecMenuItem("Download File",' ',mOpsMenuDownloadFile);
    SpecMenuItem("Open Record",' ',mOpsMenuOpenRecord);
    SpecMenuItem("Edit Link Comment",' ',mOpsMenuEditLinkComment);
    if (StandardHansa==false) then begin
      SpecMenuItem("Edit Web Link",' ',mEditWebLink);
    end;
//    SpecialMenu("Show To Links",' ',5,"ShowToLinksMasterWsm"); //can we connect Master Control to smthing ?
    SpecialMenu("(-",' ',6,"");
    SpecialMenu("Create Mail",' ',10,"MailFromArchiveWsm");
    SpecialMenu("Create Note",' ',7,"NoteFromMasterWsm");
    SpecialMenu("Create Archive",' ',8,"ArchiveFromMasterWsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Create Web Link",' ',11,"TWebNavLinkFromArchiveWsm");
    end;
  end;
  SpecialMenu("Change Password",' ',9,"ChangePasswdMasterWsm");
  if (nonblank(Userr.MinPLCode)) then begin
    SpecialMenu("Change Discount Password",' ',9,"ChangeDiscPasswdMasterWsm");
  end;
  SpecialMenu("(-",' ',10,"");
  if (StandardHansa==false) then begin
    SpecialMenu("External Chat Availability",' ',11,"ExtChatMasterWsm"); // This should be somewhere else...
//  SpecialMenu("Shares",' ',12,"SharesInfoWsm"); // This should be somewhere else...
    SpecMenuItem("Sync",' ',mOpsMenuSync);
  end;
  if (UserCanAction("AllowNoClockInOut",true)) then begin
    if (StandardHansa==false) then begin
      SpecialMenu("Clock-in",' ',14,"ClockInMasterWsm");
      SpecialMenu("Clock-out",' ',15,"ClockOutMasterWsm");
    end;
  end;
  SpecialMenu("Open Chat Import Filter",' ',16,"OpenChatFilterWsm");
  SpecialMenu("Open Background",' ',9,"OpenBackgroundMasterWsm");

  EndWindow;
end;*/

window VARDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;
  WindowBegin("Prekių įvairovė",VARDClass,CGview,VARView);
  SetWRect(64,80,510,300);
  UseView(VARVc);
  EditField(100,v=6,50,"Kodas",St_i,Code,false,0);
  EditField(120+150,v,50,"Grupė",Normal,VARGCode,false,VARGSClass);
  EditField(100,v+=20,310,"Pavadinimas",Normal,Comment,false,0);
  EditField(100,v+=20,70,"CM for Shopify",Normal,ShopCM,false,0);// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 19 04 2019 y. at 10:27:20 AM
  v = v+40;
  MatrixBegin(4,v,-32,-10,-,99);
  MatCol(1,24,"Kalba",0,LangCode,false,LangSClass);
  MatCol(1,84,"Tekstas",0,Text,false,0);
  EndMatrix;
//  CheckBox(8,v+=30,0,"Uždaryta",TerminateFlag);
  EndWindow;
end;

global
procedure SerialNrRClassReportDefaults(Integer wn)// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 15 04 2019 y. at 12:02:36 PM
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SerialNrRClass");  

  RepSpec.flags[1] = 1;
  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;