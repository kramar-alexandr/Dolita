external inner procedure StockMovVc_PasteFromLocation(var record StockMovVc);
external inner procedure StockMovVc_PasteToLocation(var record StockMovVc);
external inner procedure StockMovGetRate(var record StockMovVc);
external inner function Boolean StockMovVc_PasteArtCode(var record StockMovVc,Integer,Integer,var array string);
external inner function string 255 StringFromSysList(Integer,Integer);
external inner function val GetStockQty(string,string,Date,Boolean);
external inner function Boolean StockMovVc_PasteQuant(var record StockMovVc,Integer);
remote procedure GetShopifyOrderList(string,var array record ORVc,var array record StockMovVc);
remote procedure GetInternalOrderList(string,var array record StockMovVc);
remote updating procedure RemoteApproveStockMov(Longint,var Boolean);
remote updating procedure RemoteApproveStockMov2(array Longint,var Boolean);


updating procedure CreateStockMove(record ORVc ORr,string item,val qty,string frloc,string toloc)
begin
  array string 255 aWarning;
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  record POSIntORBlock IORb;

  BlockLoad(IORb);

  RecordNew(StockMovr);
  StockMovr.SerNr = NextSerNr("StockMovVc",CurrentDate,-1,false,"");
  StockMovr.FrLocation = frloc;
  StockMovr.ToLocation = toloc;
  StockMovr.Sorting = IORb.ShopifyRoute;
  StockMovVc_PasteFromLocation(StockMovr); 
  StockMovVc_PasteToLocation(StockMovr);
  StockMovr.OrderNr = ORr.SerNr;
  StockMovr.TransDate = CurrentDate;
  StockMovGetRate(StockMovr);
  StockMovr.ThrouLocation = "";
  //StockMovr.SentOKFlag = 1;
  ClearRow(StockMovr,StockMovrw,1);
  StockMovrw.ArtCode = item;
  //StockMovrw.SentQuant = qty;
  //StockMovrw.OrdQuant = qty;
  StockMovrw.Quant = qty;
  MatRowPut(StockMovr,0,StockMovrw);
  StockMovVc_PasteArtCode(StockMovr,0,1,aWarning)
  
  RecordInsert(StockMovr,true);

  return;
end;

function Boolean FindLocations(record ShopifyLocLinkBlock SLb,string item,val qty,var string frloc,var string toloc)
begin
  Boolean res;
  row ShopifyLocLinkBlock SLbrw;
  Integer i,rwcnt;

  frloc = "";
  toloc = "";
  rwcnt = MatRowCnt(SLb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SLb,i,SLbrw);
    if (GetStockQty(item,SLbrw.MainLocation,CurrentDate,false)>=qty) then begin
      frloc = SLbrw.MainLocation;
      toloc = SLbrw.ShopifyLocation;
      res = true;
      i = rwcnt;
    end;
  end;
  
  FindLocations = res;
return;
end;

global
updating procedure OuterCustomShopifyOrderAction(record ORVc ORr)
begin
  Integer i,rwcnt;
  row ORVc ORrw;
  string 255 frloc,toloc;
  record ShopifyLocLinkBlock SLb;
  
  BlockLoad(SLb);
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if (nonblank(ORrw.ArtCode)) then begin
      if (FindLocations(SLb,ORrw.ArtCode,ORrw.Quant,frloc,toloc)) then begin
        CreateStockMove(ORr,ORrw.ArtCode,ORrw.Quant,frloc,toloc);
      end;
    end;
  end;

  return;
end;

global
procedure ShowCustomOrderButton(Integer cnt,Integer showf,string ordertype)
begin
  Integer wn,curstat;
  
  wn = FindWindow("NPTSIVCashDClass");
  if (wn>0) then begin//can we get 0 window?
    curstat = StringToInt(GetWindowString(wn,ordertype));
    if (curstat!=showf) then begin
      PutWindowString(wn,ordertype,showf);
      RerunWindowDef(wn);
    end;
  end;

  return;
end;

global
procedure CheckShopifyOrdersTask(string args)
begin
  array record ORVc aORr;
  array record StockMovVc aStockMovr;
  record LocalMachineBlock LMb;
  Integer wn;

  BlockLoad(LMb);
  wn = FindWindow("NPTSIVCashDClass");
  if (wn>0) then begin//can we get 0 window?
    threadremote.GetShopifyOrderList(LMb.LocalMachineCode,aORr,aStockMovr);

    if (aStockMovr.length>0) then begin
      queued.ShowCustomOrderButton(aStockMovr.length,1,"POSShopifyOrders");//enable
    end else begin
      queued.ShowCustomOrderButton(aStockMovr.length,0,"POSShopifyOrders");//disable
    end;

    ClearArray(aStockMovr);
    threadremote.GetInternalOrderList(LMb.LocalMachineCode,aStockMovr);
    if (aStockMovr.length>0) then begin
      queued.ShowCustomOrderButton(aStockMovr.length,1,"POSInternalOrders");//enable
    end else begin
      queued.ShowCustomOrderButton(aStockMovr.length,0,"POSInternalOrders");//disable
    end;
  end;

  return;
end;

global
function Boolean NPTSIVCashDClassOnOpenWindow(Integer wn)
begin
  Boolean res;

  res = inner.NPTSIVCashDClassOnOpenWindow(wn);
  CheckShopifyOrdersTask("");
  
  NPTSIVCashDClassOnOpenWindow = res;
  return;
end;


global
procedure InitCheckShopifyOrders()
begin
  record ORVc ORr;
  Boolean testf;
  
  testf = false;

  if (ClientMode or LiveSyncMode) then begin
    NewPeriodicTask2("CheckShopifyOrders","CheckShopifyOrders","CheckShopifyOrdersTask","",60,"");
  end else begin
    //code for testing
    if (testf) then begin
      ORr.SerNr = 21100007;
      if (ReadFirstMain(ORr,1,true)) then begin
        //qupdating.OuterCustomShopifyOrderAction(ORr);
      end;
    end;
  end;

  return;
end;

procedure SetStockMovWindowData(array record StockMovVc aStockMovr,string ordertype,Integer wn)
begin
  Integer i,mwn;
  string 255 itemvar,itemcode;
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  Longint pos;
  Integer cnt,j,rwcnt;

  for (i=0;i<aStockMovr.length;i=i+1) begin
    StockMovr = aStockMovr[i];
    rwcnt = MatRowCnt(StockMovr);
    for (j=0;j<rwcnt;j=j+1) begin    
      MatRowGet(StockMovr,j,StockMovrw);
      pos = -1;
      GetNextSubstring(StockMovrw.ArtCode,pos,".",itemcode);
      GetNextSubstring(StockMovrw.ArtCode,pos,".",itemvar);
      PutWindowString(wn,"order" & cnt & "order",StockMovr.OrderNr);
      PutWindowString(wn,"order" & cnt & "sernr",StockMovr.SerNr);
      PutWindowString(wn,"order" & cnt & "item",itemcode);
      PutWindowString(wn,"order" & cnt & "var",itemvar);
      PutWindowString(wn,"order" & cnt & "name",StockMovrw.Spec);
      PutWindowString(wn,"order" & cnt & "qty",ValToString(StockMovrw.Quant,M40Val,"",".",1));
      cnt = cnt + 1;
    end;
  end;
  PutWindowString(wn,"ordercnt",cnt);
  RerunWindowDef(wn);

  if (aStockMovr.length==0) then begin
    CloseWindow(wn);
    mwn = FindWindow("NPTSIVCashDClass");
    if (mwn>0) then begin
      PutWindowString(mwn,ordertype,0);
      RerunWindowDef(mwn);    
    end;
  end;

  return;
end;

global
function Boolean ShopifyOrdersWClassOnOpenWindow(Integer wn)
begin
  array record ORVc aORr;
  array record StockMovVc aStockMovr;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  threadremote.GetShopifyOrderList(LMb.LocalMachineCode,aORr,aStockMovr);

  SetStockMovWindowData(aStockMovr,"POSShopifyOrders",wn);
  
  ShopifyOrdersWClassOnOpenWindow = false;
  return;
end;

global
function Boolean DOLInternalOrdersWClassOnOpenWindow(Integer wn)
begin
  array record ORVc aORr;
  array record StockMovVc aStockMovr;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  threadremote.GetInternalOrderList(LMb.LocalMachineCode,aStockMovr);

  SetStockMovWindowData(aStockMovr,"POSInternalOrders",wn);
  
  DOLInternalOrdersWClassOnOpenWindow = false;
  return;
end;

global
updating procedure ApproveShopifyStockMov()
begin
  Longint pos;
  array Longint alist;
  string 255 list,tstr;
  Boolean errf;
  
  list = PushButtonTag;
  while (GetNextSubstring(list,pos,",",tstr)) begin
    alist[alist.length] = StringToLongint(tstr);
  end;
  RemoteApproveStockMov2(alist,errf);
  if (errf) then begin
    MessageBox(22071,"");
  end else begin
    ShopifyOrdersWClassOnOpenWindow(CurWindow);
  end;
  return;
end;

global
updating procedure ApproveInternalStockMov()
begin
  Longint pos;
  array Longint alist;
  string 255 list,tstr;
  Boolean errf;
  
  list = PushButtonTag;
  while (GetNextSubstring(list,pos,",",tstr)) begin
    alist[alist.length] = StringToLongint(tstr);
  end;
  RemoteApproveStockMov2(alist,errf);
  if (errf) then begin
    MessageBox(22071,"");
  end else begin
    DOLInternalOrdersWClassOnOpenWindow(CurWindow);
  end;
  return;
end;

global
function Boolean ShopifyOrdersWClassListDblClick(Integer wn)
begin
  LongInt line;
  record StockMovVc StockMovr;

  line = SelectedListLine(wn);
  if (line>=0) then begin
    StockMovr.SerNr = StringToLongint(GetListTag(wn,line));
    if (ReadFirstMain(StockMovr,1,true)) then begin
      OpenWindow("StockMovDClass",1,0,"","",StockMovr);
    end;
  end;

  return;
end;

global
function Boolean DOLInternalOrdersWClassListDblClick(Integer wn)
begin
  LongInt line;
  record StockMovVc StockMovr;

  line = SelectedListLine(wn);
  if (line>=0) then begin
    StockMovr.SerNr = StringToLongint(GetListTag(wn,line));
    if (ReadFirstMain(StockMovr,1,true)) then begin
      OpenWindow("StockMovDClass",1,0,"","",StockMovr);
    end;
  end;

  return;
end;

global
function string 255 GetLocalMachineLocation(string lm)
begin
  record ShopifyLocLinkBlock SLb;
  row ShopifyLocLinkBlock SLbrw;
  string 255 res;
  Integer i,rwcnt;

  BlockLoad(SLb);
  rwcnt = MatRowCnt(SLb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SLb,i,SLbrw);
    if (nonblank(SLbrw.LocalMachine)) then begin
      if (SetInSet(lm,SLbrw.LocalMachine)) then begin
        res = SLbrw.MainLocation;
        i = rwcnt;
      end;
    end else begin
      if (blank(lm)) then begin
        res = SLbrw.MainLocation;
        i = rwcnt;        
      end;
    end;
  end;

  GetLocalMachineLocation = res;
  return;
end;

global
procedure GetShopifyOrderList(string lm,var array record ORVc aORr,var array record StockMovVc aStockMovr)
begin
  string 255 frloc;
  vector Boolean vOrders;
  record StockMovVc StockMovr;
  Boolean TrHs;
  record ORVc ORr;

  frloc = GetLocalMachineLocation(lm);

  if (nonblank(frloc)) then begin
    TrHs = true;
    StockMovr.OKFlag = 0;
    StockMovr.FrLocation = frloc;
    while (LoopKey("FrLocOK",StockMovr,2,TrHs)) begin
      if (StockMovr.OKFlag!=0 or StockMovr.FrLocation!=frloc) then begin
        TrHs = false;
      end else begin
        if (StockMovr.OrderNr>0) then begin
          if (vOrders[StockMovr.OrderNr]==false) then begin
            ORr.SerNr = StockMovr.OrderNr;
            if (ReadFirstMain(ORr,1,true)) then begin
              aORr[aORr.length] = ORr;
              aStockMovr[aStockMovr.length] = StockMovr;
              vOrders[StockMovr.OrderNr] = true;
            end;
          end;
        end;
      end;
    end;
  end;

  return;
end;

global
procedure GetInternalOrderList(string lm,var array record StockMovVc aStockMovr)
begin
  record ShopifyLocLinkBlock SLb;
  row ShopifyLocLinkBlock SLbrw;
  string 255 toloc;
  vector Boolean vOrders;
  record StockMovVc StockMovr;
  Boolean TrHs;
  Integer i,rwcnt;
  record ORVc ORr;
  record POSIntORBlock IORb;
  string 255 route;

  BlockLoad(IORb);
  route = IORb.Route;

  if (blank(route)) then begin
    goto LGetInternalOrderList;
  end;
  
  BlockLoad(SLb);
  rwcnt = MatRowCnt(SLb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SLb,i,SLbrw);
    if (SetInSet(lm,SLbrw.LocalMachine)) then begin
      toloc = SLbrw.MainLocation;
      i = rwcnt;
    end;
  end;

  if (nonblank(toloc)) then begin
    TrHs = true;
    StockMovr.OKFlag = 0;
    StockMovr.ToLocation = toloc;
    while (LoopKey("ToToLocOK",StockMovr,2,TrHs)) begin
      if (StockMovr.OKFlag!=0 or StockMovr.ToLocation!=toloc) then begin
        TrHs = false;
      end else begin
        if (StockMovr.Sorting==route and StockMovr.SentOKFlag==1) then begin
          aStockMovr[aStockMovr.length] = StockMovr;
        end;
      end;
    end;
  end;

LGetInternalOrderList:;
  return;
end;

global
updating procedure RemoteApproveStockMov(Longint sernr,var Boolean errf)
begin
  record StockMovVc StockMovr,oldStockMovr;
  
  StockMovr.SerNr = sernr;
  if (ReadFirstMain(StockMovr,1,true)) then begin
    RecordCopy(oldStockMovr,StockMovr);
    StockMovr.OKFlag = 1;
    if (RecordUpdate(oldStockMovr,StockMovr,true)!=0) then begin
      errf = true;
    end;
  end;

  return;
end;

global
updating procedure RemoteApproveStockMov2(array Longint alist,var Boolean errf)
begin
  record StockMovVc StockMovr,oldStockMovr;
  row StockMovVc StockMovrw;
  Integer i,j,rwcnt;

  for (i=0;i<alist.length;i=i+1) begin
    StockMovr.SerNr = alist[i];
    if (ReadFirstMain(StockMovr,1,true)) then begin
      RecordCopy(oldStockMovr,StockMovr);
      StockMovr.OKFlag = 1;
      if (nonblank(StockMovr.ThrouLocation) and blank(StockMovr.SentTransDate)) then begin
        StockMovr.SentTransDate = CurrentDate;
      end;
      if (blank(StockMovr.TransDate)) then begin
        StockMovr.TransDate = CurrentDate;
      end;
      rwcnt = MatRowCnt(StockMovr);
      for (j=0;j<rwcnt;j=j+1) begin
        MatRowGet(StockMovr,j,StockMovrw);
        if (StockMovrw.Quant==0) then begin
          if (StockMovrw.SentQuant!=0) then begin
            StockMovrw.Quant = StockMovrw.SentQuant;
            MatRowPut(StockMovr,j,StockMovrw);
            StockMovVc_PasteQuant(StockMovr,j);
          end;
        end;
      end;
      if (RecordUpdate(oldStockMovr,StockMovr,true)!=0) then begin
        errf = true;
      end;
    end;
  end;

  return;
end;