external inner function Date DateFromString(string,string);
external inner function Time TimeDiff(Time,Time);

procedure AddDuration(Time st,Time et,var duration res)
begin
  Time t,rest;
  
  rest = TimeDiff(st,et);  
  res.hour = res.hour + rest.hour;
  res.minute = res.minute + rest.minute;
  res.second = res.second + rest.second;
  return;
end;
function duration AddDuration2(duration dur1,duration dur2)
begin
  duration res;
  
  res.hour = dur1.hour + dur2.hour;
  res.minute = dur1.minute + dur2.minute;
  res.second = dur1.second + dur2.second;

  AddDuration2 = res;
  return;
end;

function duration BlankDur()
begin
  duration res;

  res.hour = 0;
  res.minute = 0;
  res.second = 0;

  BlankDur = res;
end;

procedure AddDurationToRow(var record RoutingVc Rr,Integer rw,duration dur)
begin
  row RoutingVc Rrw;

  MatRowGet(Rr,rw,Rrw);
  Rrw.RunTime = AddDuration2(Rrw.RunTime,dur);
  MatRowPut(Rr,rw,Rrw);

  return;
end;


procedure AddDurationToArray(var array record RoutingVc aRr,string usercode,string location,Time st,Time et)
begin
  duration dur;
  record RoutingVc Rr;
  row RoutingVc Rrw;
  Integer i,rwcnt,j,userpos;
  Boolean foundf;
  
  dur = BlankDur;
  AddDuration(st,et,dur);
  for (i=0;i<aRr.length;i=i+1) begin
    Rr = aRr[i];
    if (Rr.Code==location) then begin
      foundf = true;
      rwcnt = MatRowCnt(Rr);
      for (j=1;j<rwcnt;j=j+1) begin
        MatRowGet(Rr,j,Rrw);
        if (Rrw.Machine==usercode) then begin
          userpos = j;
          j = rwcnt;
        end;
      end;
      if (userpos==0) then begin
        ClearRow(Rr,Rrw,1);
        Rrw.Machine = usercode;
        Rrw.RunTime = BlankDur;
        userpos = MatRowCnt(Rr);
        if (userpos==0) then begin
          userpos = 1;
        end;
        MatRowPut(Rr,userpos,Rrw);
      end;
      AddDurationToRow(Rr,0,dur);
      AddDurationToRow(Rr,userpos,dur);
      aRr[i] = Rr;
      i = aRr.length;
    end;
  end;

  if (!foundf) then begin
    RecordClear(Rr);
    Rr.Code = location;
    ClearRow(Rr,Rrw,1);
    Rrw.RunTime = dur;
    MatRowPut(Rr,0,Rrw);
    ClearRow(Rr,Rrw,1);
    Rrw.Machine = usercode;
    Rrw.RunTime = dur;
    MatRowPut(Rr,1,Rrw);
    aRr[aRr.length] = Rr;
  end;

  return;
end;

function string 255 FormatDuration(duration dur)
begin
  string 255 res;
  
  res = left("00",2-len(dur.hour)) & dur.hour & ":" & left("00",2-len(dur.minute)) & dur.minute & ":" & left("00",2-len(dur.second)) & dur.second;

  FormatDuration = res;
  return;
end;

global
procedure DOL_EmpTimeRn(record RcVc RepSpec)
begin
  record POSClockInOutVc PCr;
  Boolean TrHs,testf;
  string 255 datestr,tmp;
  Date td;
  Longint pos;
  vector time vClockIn,vClockOut;
  array string 255 aClockIn;
  Integer i,j,rwcnt;
  Time diff;
  record UserVc Userr;
  vector string 255 vLocation;
  duration totdur;
  array record RoutingVc aRr;
  record RoutingVc Rr;
  row RoutingVc Rrw;
  
  StartReportJob(UsetStr(1000149));

  EndHeader;

  SetRepCol(2,70);
  SetRepCol(3,120);
  SetRepCol(4,160);
  SetRepCol(5,280);
  SetRepCol(6,350);
  SetRepCol(7,420);
  
  StartFormat(15);
  OutString(0,0,USetStr(14281),false);//date
  OutString(2,0,USetStr(1000158),false);//location
  OutString(3,0,USetStr(1000159),false);//user id
  OutString(4,0,USetStr(1000160),false);//user name
  OutString(5,0,USetStr(1000161),false);
  OutString(6,0,USetStr(1000162),false);
  OutString(7,0,USetStr(1000163),false);
  EndFormat;
  StartFormat(1);
  Gray_Divider(0,1);
  EndFormat;

  totdur.hour = 0;
  totdur.minute = 0;
  totdur.second = 0;

  TrHs = true;
  PCr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",PCr,1,TrHs)) begin
    if (PCr.TransDate>RepSpec.sEndDate) then begin
      TrHs = false;
    end else begin
      testf = true;
      if (nonblank(RepSpec.f2) and RepSpec.f2!=PCr.LocalMachine) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f1) and RepSpec.f1!=PCr.UserCode) then begin
        testf = false;
      end;
      if (testf) then begin
        datestr = DateToString(PCr.TransDate,"YYYY-MM-DD");
        switch (PCr.Type) begin
          case 1: vClockIn[datestr & ":" & PCr.UserCode] = PCr.TransTime;
          case 0: vClockOut[datestr & ":" & PCr.UserCode] = PCr.TransTime;
        end;
        vLocation[datestr & ":" & PCr.UserCode] = PCr.LocalMachine;
      end;
    end;
  end;

  GetVectorTags(vClockIn,aClockIn);
  SortStringArray(aClockIn);
  for (i=0;i<aClockIn.length;i=i+1) begin
    pos = -1;
    GetNextSubString(aClockIn[i],pos,":",tmp);
    td = DateFromString(tmp,"YYYY-MM-DD");
    GetNextSubString(aClockIn[i],pos,":",tmp);
    Userr.Code = tmp;
    ReadFirstMain(Userr,1,true);
    diff = TimeDiff(vClockIn[aClockIn[i]],vClockOut[aClockIn[i]]);
    AddDuration(vClockIn[aClockIn[i]],vClockOut[aClockIn[i]],totdur);
    AddDurationToArray(aRr,Userr.Code,vLocation[aClockIn[i]],vClockIn[aClockIn[i]],vClockOut[aClockIn[i]]);

    StartFormat(15);
    OutString(0,0,td,false);
    OutString(2,0,vLocation[aClockIn[i]],false);
    OutString(3,0,Userr.Code,false);
    OutString(4,0,Userr.Name,false);
    OutString(5,0,vClockIn[aClockIn[i]],false);
    OutString(6,0,vClockOut[aClockIn[i]],false);
    OutString(7,0,diff,false);
    EndFormat;

  end;
  
  StartFormat(1);
  Gray_divider(0,1);
  EndFormat;
/*
  StartFormat(15);
  OutString(0,0,"",false);
  OutString(2,0,"",false);
  OutString(3,0,"",false);
  OutString(4,0,"",false);
  OutString(5,0,"",false);
  OutString(6,0,"",false);
  OutString(7,0,left("00",2-len(totdur.hour)) & totdur.hour & ":" & left("00",2-len(totdur.minute)) & totdur.minute & ":" & left("00",2-len(totdur.second)) & totdur.second,false);//hw doesn't know how to output duration...
  EndFormat;
*/

  for (i=0;i<aRr.length;i=i+1) begin
    Rr = aRr[i];
    StartFormat(5);
    EndFormat;
    StartFormat(20);
    OutString(2,0,Rr.Code,false);
    MatRowGet(Rr,0,Rrw);
    OutString(7,0,FormatDuration(Rrw.RunTime),false);
    EndFormat;
    rwcnt = MatRowCnt(Rr);
    for (j=1;j<rwcnt;j=j+1) begin
      StartFormat(15);
      MatRowGet(Rr,j,Rrw);
      Userr.Code = Rrw.Machine;
      ReadFirstMain(Userr,1,true);
      OutString(3,0,Rrw.Machine,false);
      OutString(4,0,Userr.Name,false);
      OutString(7,0,FormatDuration(Rrw.RunTime),false);
      EndFormat;
   end;
  end;

  EndJob;

  return;
end;